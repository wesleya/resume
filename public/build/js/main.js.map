{"version":3,"names":[],"mappings":"","sources":["main.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n/*!\r\n * vue-resource v1.0.2\r\n * https://github.com/vuejs/vue-resource\r\n * Released under the MIT License.\r\n */\n\n!function (t, n) {\n  \"object\" == (typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) && \"undefined\" != typeof module ? module.exports = n() : \"function\" == typeof define && define.amd ? define(n) : t.VueResource = n();\n}(undefined, function () {\n  \"use strict\";\n  function t(t) {\n    this.state = it, this.value = void 0, this.deferred = [];var n = this;try {\n      t(function (t) {\n        n.resolve(t);\n      }, function (t) {\n        n.reject(t);\n      });\n    } catch (t) {\n      n.reject(t);\n    }\n  }function n(t, n) {\n    t instanceof Promise ? this.promise = t : this.promise = new Promise(t.bind(n)), this.context = n;\n  }function e(t) {\n    at = t.util, ct = t.config.debug || !t.config.silent;\n  }function o(t) {\n    \"undefined\" != typeof console && ct && console.warn(\"[VueResource warn]: \" + t);\n  }function r(t) {\n    \"undefined\" != typeof console && console.error(t);\n  }function i(t, n) {\n    return at.nextTick(t, n);\n  }function u(t) {\n    return t.replace(/^\\s*|\\s*$/g, \"\");\n  }function s(t) {\n    return t ? t.toLowerCase() : \"\";\n  }function c(t) {\n    return t ? t.toUpperCase() : \"\";\n  }function a(t) {\n    return \"string\" == typeof t;\n  }function f(t) {\n    return t === !0 || t === !1;\n  }function h(t) {\n    return \"function\" == typeof t;\n  }function p(t) {\n    return null !== t && \"object\" == (typeof t === \"undefined\" ? \"undefined\" : _typeof(t));\n  }function l(t) {\n    return p(t) && Object.getPrototypeOf(t) == Object.prototype;\n  }function d(t) {\n    return \"undefined\" != typeof Blob && t instanceof Blob;\n  }function m(t) {\n    return \"undefined\" != typeof FormData && t instanceof FormData;\n  }function y(t, e, o) {\n    var r = n.resolve(t);return arguments.length < 2 ? r : r.then(e, o);\n  }function v(t, n, e) {\n    return e = e || {}, h(e) && (e = e.call(n)), g(t.bind({ $vm: n, $options: e }), t, { $options: e });\n  }function b(t, n) {\n    var e, o;if (t && \"number\" == typeof t.length) for (e = 0; e < t.length; e++) {\n      n.call(t[e], t[e], e);\n    } else if (p(t)) for (o in t) {\n      t.hasOwnProperty(o) && n.call(t[o], t[o], o);\n    }return t;\n  }function g(t) {\n    var n = ft.call(arguments, 1);return n.forEach(function (n) {\n      x(t, n, !0);\n    }), t;\n  }function w(t) {\n    var n = ft.call(arguments, 1);return n.forEach(function (n) {\n      for (var e in n) {\n        void 0 === t[e] && (t[e] = n[e]);\n      }\n    }), t;\n  }function T(t) {\n    var n = ft.call(arguments, 1);return n.forEach(function (n) {\n      x(t, n);\n    }), t;\n  }function x(t, n, e) {\n    for (var o in n) {\n      e && (l(n[o]) || ht(n[o])) ? (l(n[o]) && !l(t[o]) && (t[o] = {}), ht(n[o]) && !ht(t[o]) && (t[o] = []), x(t[o], n[o], e)) : void 0 !== n[o] && (t[o] = n[o]);\n    }\n  }function j(t, n) {\n    var e = n(t);return a(t.root) && !e.match(/^(https?:)?\\//) && (e = t.root + \"/\" + e), e;\n  }function E(t, n) {\n    var e = Object.keys(k.options.params),\n        o = {},\n        r = n(t);return b(t.params, function (t, n) {\n      e.indexOf(n) === -1 && (o[n] = t);\n    }), o = k.params(o), o && (r += (r.indexOf(\"?\") == -1 ? \"?\" : \"&\") + o), r;\n  }function O(t, n, e) {\n    var o = P(t),\n        r = o.expand(n);return e && e.push.apply(e, o.vars), r;\n  }function P(t) {\n    var n = [\"+\", \"#\", \".\", \"/\", \";\", \"?\", \"&\"],\n        e = [];return { vars: e, expand: function expand(o) {\n        return t.replace(/\\{([^\\{\\}]+)\\}|([^\\{\\}]+)/g, function (t, r, i) {\n          if (r) {\n            var u = null,\n                s = [];if (n.indexOf(r.charAt(0)) !== -1 && (u = r.charAt(0), r = r.substr(1)), r.split(/,/g).forEach(function (t) {\n              var n = /([^:\\*]*)(?::(\\d+)|(\\*))?/.exec(t);s.push.apply(s, C(o, u, n[1], n[2] || n[3])), e.push(n[1]);\n            }), u && \"+\" !== u) {\n              var c = \",\";return \"?\" === u ? c = \"&\" : \"#\" !== u && (c = u), (0 !== s.length ? u : \"\") + s.join(c);\n            }return s.join(\",\");\n          }return U(i);\n        });\n      } };\n  }function C(t, n, e, o) {\n    var r = t[e],\n        i = [];if ($(r) && \"\" !== r) {\n      if (\"string\" == typeof r || \"number\" == typeof r || \"boolean\" == typeof r) r = r.toString(), o && \"*\" !== o && (r = r.substring(0, parseInt(o, 10))), i.push(R(n, r, A(n) ? e : null));else if (\"*\" === o) Array.isArray(r) ? r.filter($).forEach(function (t) {\n        i.push(R(n, t, A(n) ? e : null));\n      }) : Object.keys(r).forEach(function (t) {\n        $(r[t]) && i.push(R(n, r[t], t));\n      });else {\n        var u = [];Array.isArray(r) ? r.filter($).forEach(function (t) {\n          u.push(R(n, t));\n        }) : Object.keys(r).forEach(function (t) {\n          $(r[t]) && (u.push(encodeURIComponent(t)), u.push(R(n, r[t].toString())));\n        }), A(n) ? i.push(encodeURIComponent(e) + \"=\" + u.join(\",\")) : 0 !== u.length && i.push(u.join(\",\"));\n      }\n    } else \";\" === n ? i.push(encodeURIComponent(e)) : \"\" !== r || \"&\" !== n && \"?\" !== n ? \"\" === r && i.push(\"\") : i.push(encodeURIComponent(e) + \"=\");return i;\n  }function $(t) {\n    return void 0 !== t && null !== t;\n  }function A(t) {\n    return \";\" === t || \"&\" === t || \"?\" === t;\n  }function R(t, n, e) {\n    return n = \"+\" === t || \"#\" === t ? U(n) : encodeURIComponent(n), e ? encodeURIComponent(e) + \"=\" + n : n;\n  }function U(t) {\n    return t.split(/(%[0-9A-Fa-f]{2})/g).map(function (t) {\n      return (/%[0-9A-Fa-f]/.test(t) || (t = encodeURI(t)), t\n      );\n    }).join(\"\");\n  }function S(t) {\n    var n = [],\n        e = O(t.url, t.params, n);return n.forEach(function (n) {\n      delete t.params[n];\n    }), e;\n  }function k(t, n) {\n    var e,\n        o = this || {},\n        r = t;return a(t) && (r = { url: t, params: n }), r = g({}, k.options, o.$options, r), k.transforms.forEach(function (t) {\n      e = I(t, e, o.$vm);\n    }), e(r);\n  }function I(t, n, e) {\n    return function (o) {\n      return t.call(e, o, n);\n    };\n  }function H(t, n, e) {\n    var o,\n        r = ht(n),\n        i = l(n);b(n, function (n, u) {\n      o = p(n) || ht(n), e && (u = e + \"[\" + (i || o ? u : \"\") + \"]\"), !e && r ? t.add(n.name, n.value) : o ? H(t, n, u) : t.add(u, n);\n    });\n  }function L(t) {\n    return new n(function (n) {\n      var e = new XDomainRequest(),\n          o = function o(_o) {\n        var r = t.respondWith(e.responseText, { status: e.status, statusText: e.statusText });n(r);\n      };t.abort = function () {\n        return e.abort();\n      }, e.open(t.method, t.getUrl(), !0), e.timeout = 0, e.onload = o, e.onerror = o, e.ontimeout = function () {}, e.onprogress = function () {}, e.send(t.getBody());\n    });\n  }function N(t, n) {\n    !f(t.crossOrigin) && q(t) && (t.crossOrigin = !0), t.crossOrigin && (yt || (t.client = L), delete t.emulateHTTP), n();\n  }function q(t) {\n    var n = k.parse(k(t));return n.protocol !== mt.protocol || n.host !== mt.host;\n  }function B(t, n) {\n    m(t.body) ? t.headers.delete(\"Content-Type\") : (p(t.body) || ht(t.body)) && (t.emulateJSON ? (t.body = k.params(t.body), t.headers.set(\"Content-Type\", \"application/x-www-form-urlencoded\")) : t.body = JSON.stringify(t.body)), n(function (t) {\n      return Object.defineProperty(t, \"data\", { get: function get() {\n          return this.body;\n        }, set: function set(t) {\n          this.body = t;\n        } }), t.bodyText ? y(t.text(), function (n) {\n        var e = t.headers.get(\"Content-Type\");if (a(e) && 0 === e.indexOf(\"application/json\")) try {\n          t.body = JSON.parse(n);\n        } catch (n) {\n          t.body = null;\n        } else t.body = n;return t;\n      }) : t;\n    });\n  }function J(t) {\n    return new n(function (n) {\n      var e,\n          o,\n          r = t.jsonp || \"callback\",\n          i = \"_jsonp\" + Math.random().toString(36).substr(2),\n          u = null;e = function e(_e) {\n        var r = 0;\"load\" === _e.type && null !== u ? r = 200 : \"error\" === _e.type && (r = 404), n(t.respondWith(u, { status: r })), delete window[i], document.body.removeChild(o);\n      }, t.params[r] = i, window[i] = function (t) {\n        u = JSON.stringify(t);\n      }, o = document.createElement(\"script\"), o.src = t.getUrl(), o.type = \"text/javascript\", o.async = !0, o.onload = e, o.onerror = e, document.body.appendChild(o);\n    });\n  }function D(t, n) {\n    \"JSONP\" == t.method && (t.client = J), n(function (n) {\n      if (\"JSONP\" == t.method) return y(n.json(), function (t) {\n        return n.body = t, n;\n      });\n    });\n  }function M(t, n) {\n    h(t.before) && t.before.call(this, t), n();\n  }function X(t, n) {\n    t.emulateHTTP && /^(PUT|PATCH|DELETE)$/i.test(t.method) && (t.headers.set(\"X-HTTP-Method-Override\", t.method), t.method = \"POST\"), n();\n  }function F(t, n) {\n    var e = pt({}, Z.headers.common, t.crossOrigin ? {} : Z.headers.custom, Z.headers[s(t.method)]);b(e, function (n, e) {\n      t.headers.has(e) || t.headers.set(e, n);\n    }), n();\n  }function W(t, n) {\n    var e;t.timeout && (e = setTimeout(function () {\n      t.abort();\n    }, t.timeout)), n(function (t) {\n      clearTimeout(e);\n    });\n  }function G(t) {\n    return new n(function (n) {\n      var e = new XMLHttpRequest(),\n          o = function o(_o2) {\n        var r = t.respondWith(\"response\" in e ? e.response : e.responseText, { status: 1223 === e.status ? 204 : e.status, statusText: 1223 === e.status ? \"No Content\" : u(e.statusText) });b(u(e.getAllResponseHeaders()).split(\"\\n\"), function (t) {\n          r.headers.append(t.slice(0, t.indexOf(\":\")), t.slice(t.indexOf(\":\") + 1));\n        }), n(r);\n      };t.abort = function () {\n        return e.abort();\n      }, t.progress && (\"GET\" === t.method ? e.addEventListener(\"progress\", t.progress) : /^(POST|PUT)$/i.test(t.method) && e.upload.addEventListener(\"progress\", t.progress)), e.open(t.method, t.getUrl(), !0), \"responseType\" in e && (e.responseType = \"blob\"), t.credentials === !0 && (e.withCredentials = !0), t.headers.forEach(function (t, n) {\n        e.setRequestHeader(n, t);\n      }), e.timeout = 0, e.onload = o, e.onerror = o, e.send(t.getBody());\n    });\n  }function V(t) {\n    function e(e) {\n      return new n(function (n) {\n        function s() {\n          r = i.pop(), h(r) ? r.call(t, e, c) : (o(\"Invalid interceptor of type \" + (typeof r === \"undefined\" ? \"undefined\" : _typeof(r)) + \", must be a function\"), c());\n        }function c(e) {\n          if (h(e)) u.unshift(e);else if (p(e)) return u.forEach(function (n) {\n            e = y(e, function (e) {\n              return n.call(t, e) || e;\n            });\n          }), void y(e, n);s();\n        }s();\n      }, t);\n    }var r,\n        i = [_],\n        u = [];return p(t) || (t = null), e.use = function (t) {\n      i.push(t);\n    }, e;\n  }function _(t, n) {\n    var e = t.client || G;n(e(t));\n  }function z(t, n) {\n    return Object.keys(t).reduce(function (t, e) {\n      return s(n) === s(e) ? e : t;\n    }, null);\n  }function K(t) {\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(t)) throw new TypeError(\"Invalid character in header field name\");return u(t);\n  }function Q(t) {\n    return new n(function (n) {\n      var e = new FileReader();e.readAsText(t), e.onload = function () {\n        n(e.result);\n      };\n    });\n  }function Y(t) {\n    return 0 === t.type.indexOf(\"text\") || t.type.indexOf(\"json\") !== -1;\n  }function Z(t) {\n    var e = this || {},\n        o = V(e.$vm);return w(t || {}, e.$options, Z.options), Z.interceptors.forEach(function (t) {\n      o.use(t);\n    }), o(new wt(t)).then(function (t) {\n      return t.ok ? t : n.reject(t);\n    }, function (t) {\n      return t instanceof Error && r(t), n.reject(t);\n    });\n  }function tt(t, n, e, o) {\n    var r = this || {},\n        i = {};return e = pt({}, tt.actions, e), b(e, function (e, u) {\n      e = g({ url: t, params: pt({}, n) }, o, e), i[u] = function () {\n        return (r.$http || Z)(nt(e, arguments));\n      };\n    }), i;\n  }function nt(t, n) {\n    var e,\n        o = pt({}, t),\n        r = {};switch (n.length) {case 2:\n        r = n[0], e = n[1];break;case 1:\n        /^(POST|PUT|PATCH)$/i.test(o.method) ? e = n[0] : r = n[0];break;case 0:\n        break;default:\n        throw \"Expected up to 4 arguments [params, body], got \" + n.length + \" arguments\";}return o.body = e, o.params = pt({}, o.params, r), o;\n  }function et(t) {\n    et.installed || (e(t), t.url = k, t.http = Z, t.resource = tt, t.Promise = n, Object.defineProperties(t.prototype, { $url: { get: function get() {\n          return v(t.url, this, this.$options.url);\n        } }, $http: { get: function get() {\n          return v(t.http, this, this.$options.http);\n        } }, $resource: { get: function get() {\n          return t.resource.bind(this);\n        } }, $promise: { get: function get() {\n          var n = this;return function (e) {\n            return new t.Promise(e, n);\n          };\n        } } }));\n  }var ot = 0,\n      rt = 1,\n      it = 2;t.reject = function (n) {\n    return new t(function (t, e) {\n      e(n);\n    });\n  }, t.resolve = function (n) {\n    return new t(function (t, e) {\n      t(n);\n    });\n  }, t.all = function (n) {\n    return new t(function (e, o) {\n      function r(t) {\n        return function (o) {\n          u[t] = o, i += 1, i === n.length && e(u);\n        };\n      }var i = 0,\n          u = [];0 === n.length && e(u);for (var s = 0; s < n.length; s += 1) {\n        t.resolve(n[s]).then(r(s), o);\n      }\n    });\n  }, t.race = function (n) {\n    return new t(function (e, o) {\n      for (var r = 0; r < n.length; r += 1) {\n        t.resolve(n[r]).then(e, o);\n      }\n    });\n  };var ut = t.prototype;ut.resolve = function (t) {\n    var n = this;if (n.state === it) {\n      if (t === n) throw new TypeError(\"Promise settled with itself.\");var e = !1;try {\n        var o = t && t.then;if (null !== t && \"object\" == (typeof t === \"undefined\" ? \"undefined\" : _typeof(t)) && \"function\" == typeof o) return void o.call(t, function (t) {\n          e || n.resolve(t), e = !0;\n        }, function (t) {\n          e || n.reject(t), e = !0;\n        });\n      } catch (t) {\n        return void (e || n.reject(t));\n      }n.state = ot, n.value = t, n.notify();\n    }\n  }, ut.reject = function (t) {\n    var n = this;if (n.state === it) {\n      if (t === n) throw new TypeError(\"Promise settled with itself.\");n.state = rt, n.value = t, n.notify();\n    }\n  }, ut.notify = function () {\n    var t = this;i(function () {\n      if (t.state !== it) for (; t.deferred.length;) {\n        var n = t.deferred.shift(),\n            e = n[0],\n            o = n[1],\n            r = n[2],\n            i = n[3];try {\n          t.state === ot ? r(\"function\" == typeof e ? e.call(void 0, t.value) : t.value) : t.state === rt && (\"function\" == typeof o ? r(o.call(void 0, t.value)) : i(t.value));\n        } catch (t) {\n          i(t);\n        }\n      }\n    });\n  }, ut.then = function (n, e) {\n    var o = this;return new t(function (t, r) {\n      o.deferred.push([n, e, t, r]), o.notify();\n    });\n  }, ut.catch = function (t) {\n    return this.then(void 0, t);\n  }, \"undefined\" == typeof Promise && (window.Promise = t), n.all = function (t, e) {\n    return new n(Promise.all(t), e);\n  }, n.resolve = function (t, e) {\n    return new n(Promise.resolve(t), e);\n  }, n.reject = function (t, e) {\n    return new n(Promise.reject(t), e);\n  }, n.race = function (t, e) {\n    return new n(Promise.race(t), e);\n  };var st = n.prototype;st.bind = function (t) {\n    return this.context = t, this;\n  }, st.then = function (t, e) {\n    return t && t.bind && this.context && (t = t.bind(this.context)), e && e.bind && this.context && (e = e.bind(this.context)), new n(this.promise.then(t, e), this.context);\n  }, st.catch = function (t) {\n    return t && t.bind && this.context && (t = t.bind(this.context)), new n(this.promise.catch(t), this.context);\n  }, st.finally = function (t) {\n    return this.then(function (n) {\n      return t.call(this), n;\n    }, function (n) {\n      return t.call(this), Promise.reject(n);\n    });\n  };var ct = !1,\n      at = {},\n      ft = [].slice,\n      ht = Array.isArray,\n      pt = Object.assign || T,\n      lt = document.documentMode,\n      dt = document.createElement(\"a\");k.options = { url: \"\", root: null, params: {} }, k.transforms = [S, E, j], k.params = function (t) {\n    var n = [],\n        e = encodeURIComponent;return n.add = function (t, n) {\n      h(n) && (n = n()), null === n && (n = \"\"), this.push(e(t) + \"=\" + e(n));\n    }, H(n, t), n.join(\"&\").replace(/%20/g, \"+\");\n  }, k.parse = function (t) {\n    return lt && (dt.href = t, t = dt.href), dt.href = t, { href: dt.href, protocol: dt.protocol ? dt.protocol.replace(/:$/, \"\") : \"\", port: dt.port, host: dt.host, hostname: dt.hostname, pathname: \"/\" === dt.pathname.charAt(0) ? dt.pathname : \"/\" + dt.pathname, search: dt.search ? dt.search.replace(/^\\?/, \"\") : \"\", hash: dt.hash ? dt.hash.replace(/^#/, \"\") : \"\" };\n  };var mt = k.parse(location.href),\n      yt = \"withCredentials\" in new XMLHttpRequest(),\n      vt = function vt(t, n) {\n    if (!(t instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n  },\n      bt = function () {\n    function t(n) {\n      var e = this;vt(this, t), this.map = {}, b(n, function (t, n) {\n        return e.append(n, t);\n      });\n    }return t.prototype.has = function (t) {\n      return null !== z(this.map, t);\n    }, t.prototype.get = function (t) {\n      var n = this.map[z(this.map, t)];return n ? n[0] : null;\n    }, t.prototype.getAll = function (t) {\n      return this.map[z(this.map, t)] || [];\n    }, t.prototype.set = function (t, n) {\n      this.map[K(z(this.map, t) || t)] = [u(n)];\n    }, t.prototype.append = function (t, n) {\n      var e = this.getAll(t);e.length ? e.push(u(n)) : this.set(t, n);\n    }, t.prototype.delete = function (t) {\n      delete this.map[z(this.map, t)];\n    }, t.prototype.forEach = function (t, n) {\n      var e = this;b(this.map, function (o, r) {\n        b(o, function (o) {\n          return t.call(n, o, r, e);\n        });\n      });\n    }, t;\n  }(),\n      gt = function () {\n    function t(n, e) {\n      var o = e.url,\n          r = e.headers,\n          i = e.status,\n          u = e.statusText;vt(this, t), this.url = o, this.ok = i >= 200 && i < 300, this.status = i || 0, this.statusText = u || \"\", this.headers = new bt(r), this.body = n, a(n) ? this.bodyText = n : d(n) && (this.bodyBlob = n, Y(n) && (this.bodyText = Q(n)));\n    }return t.prototype.blob = function () {\n      return y(this.bodyBlob);\n    }, t.prototype.text = function () {\n      return y(this.bodyText);\n    }, t.prototype.json = function () {\n      return y(this.text(), function (t) {\n        return JSON.parse(t);\n      });\n    }, t;\n  }(),\n      wt = function () {\n    function t(n) {\n      vt(this, t), this.body = null, this.params = {}, pt(this, n, { method: c(n.method || \"GET\") }), this.headers instanceof bt || (this.headers = new bt(this.headers));\n    }return t.prototype.getUrl = function () {\n      return k(this);\n    }, t.prototype.getBody = function () {\n      return this.body;\n    }, t.prototype.respondWith = function (t, n) {\n      return new gt(t, pt(n || {}, { url: this.getUrl() }));\n    }, t;\n  }(),\n      Tt = { \"X-Requested-With\": \"XMLHttpRequest\" },\n      xt = { Accept: \"application/json, text/plain, */*\" },\n      jt = { \"Content-Type\": \"application/json;charset=utf-8\" };return Z.options = {}, Z.headers = { put: jt, post: jt, patch: jt, delete: jt, custom: Tt, common: xt }, Z.interceptors = [M, W, X, B, D, F, N], [\"get\", \"delete\", \"head\", \"jsonp\"].forEach(function (t) {\n    Z[t] = function (n, e) {\n      return this(pt(e || {}, { url: n, method: t }));\n    };\n  }), [\"post\", \"put\", \"patch\"].forEach(function (t) {\n    Z[t] = function (n, e, o) {\n      return this(pt(o || {}, { url: n, method: t, body: e }));\n    };\n  }), tt.actions = { get: { method: \"GET\" }, save: { method: \"POST\" }, query: { method: \"GET\" }, update: { method: \"PUT\" }, remove: { method: \"DELETE\" }, delete: { method: \"DELETE\" } }, \"undefined\" != typeof window && window.Vue && window.Vue.use(et), et;\n});\n\n},{}],2:[function(require,module,exports){\n(function (global){\n\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n/*!\r\n * Vue.js v1.0.26\r\n * (c) 2016 Evan You\r\n * Released under the MIT License.\r\n */\n!function (t, e) {\n  \"object\" == (typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) && \"undefined\" != typeof module ? module.exports = e() : \"function\" == typeof define && define.amd ? define(e) : t.Vue = e();\n}(undefined, function () {\n  \"use strict\";\n  function t(e, n, r) {\n    if (i(e, n)) return void (e[n] = r);if (e._isVue) return void t(e._data, n, r);var s = e.__ob__;if (!s) return void (e[n] = r);if (s.convert(n, r), s.dep.notify(), s.vms) for (var o = s.vms.length; o--;) {\n      var a = s.vms[o];a._proxy(n), a._digest();\n    }return r;\n  }function e(t, e) {\n    if (i(t, e)) {\n      delete t[e];var n = t.__ob__;if (!n) return void (t._isVue && (delete t._data[e], t._digest()));if (n.dep.notify(), n.vms) for (var r = n.vms.length; r--;) {\n        var s = n.vms[r];s._unproxy(e), s._digest();\n      }\n    }\n  }function i(t, e) {\n    return Oi.call(t, e);\n  }function n(t) {\n    return Ti.test(t);\n  }function r(t) {\n    var e = (t + \"\").charCodeAt(0);return 36 === e || 95 === e;\n  }function s(t) {\n    return null == t ? \"\" : t.toString();\n  }function o(t) {\n    if (\"string\" != typeof t) return t;var e = Number(t);return isNaN(e) ? t : e;\n  }function a(t) {\n    return \"true\" === t ? !0 : \"false\" === t ? !1 : t;\n  }function h(t) {\n    var e = t.charCodeAt(0),\n        i = t.charCodeAt(t.length - 1);return e !== i || 34 !== e && 39 !== e ? t : t.slice(1, -1);\n  }function l(t) {\n    return t.replace(Ni, c);\n  }function c(t, e) {\n    return e ? e.toUpperCase() : \"\";\n  }function u(t) {\n    return t.replace(ji, \"$1-$2\").toLowerCase();\n  }function f(t) {\n    return t.replace(Ei, c);\n  }function p(t, e) {\n    return function (i) {\n      var n = arguments.length;return n ? n > 1 ? t.apply(e, arguments) : t.call(e, i) : t.call(e);\n    };\n  }function d(t, e) {\n    e = e || 0;for (var i = t.length - e, n = new Array(i); i--;) {\n      n[i] = t[i + e];\n    }return n;\n  }function v(t, e) {\n    for (var i = Object.keys(e), n = i.length; n--;) {\n      t[i[n]] = e[i[n]];\n    }return t;\n  }function m(t) {\n    return null !== t && \"object\" == (typeof t === \"undefined\" ? \"undefined\" : _typeof(t));\n  }function g(t) {\n    return Si.call(t) === Fi;\n  }function _(t, e, i, n) {\n    Object.defineProperty(t, e, { value: i, enumerable: !!n, writable: !0, configurable: !0 });\n  }function y(t, e) {\n    var i,\n        n,\n        r,\n        s,\n        o,\n        a = function h() {\n      var a = Date.now() - s;e > a && a >= 0 ? i = setTimeout(h, e - a) : (i = null, o = t.apply(r, n), i || (r = n = null));\n    };return function () {\n      return r = this, n = arguments, s = Date.now(), i || (i = setTimeout(a, e)), o;\n    };\n  }function b(t, e) {\n    for (var i = t.length; i--;) {\n      if (t[i] === e) return i;\n    }return -1;\n  }function w(t) {\n    var e = function i() {\n      return i.cancelled ? void 0 : t.apply(this, arguments);\n    };return e.cancel = function () {\n      e.cancelled = !0;\n    }, e;\n  }function C(t, e) {\n    return t == e || (m(t) && m(e) ? JSON.stringify(t) === JSON.stringify(e) : !1);\n  }function $(t) {\n    this.size = 0, this.limit = t, this.head = this.tail = void 0, this._keymap = Object.create(null);\n  }function k() {\n    var t,\n        e = en.slice(hn, on).trim();if (e) {\n      t = {};var i = e.match(vn);t.name = i[0], i.length > 1 && (t.args = i.slice(1).map(x));\n    }t && (nn.filters = nn.filters || []).push(t), hn = on + 1;\n  }function x(t) {\n    if (mn.test(t)) return { value: o(t), dynamic: !1 };var e = h(t),\n        i = e === t;return { value: i ? t : e, dynamic: i };\n  }function A(t) {\n    var e = dn.get(t);if (e) return e;for (en = t, ln = cn = !1, un = fn = pn = 0, hn = 0, nn = {}, on = 0, an = en.length; an > on; on++) {\n      if (sn = rn, rn = en.charCodeAt(on), ln) 39 === rn && 92 !== sn && (ln = !ln);else if (cn) 34 === rn && 92 !== sn && (cn = !cn);else if (124 === rn && 124 !== en.charCodeAt(on + 1) && 124 !== en.charCodeAt(on - 1)) null == nn.expression ? (hn = on + 1, nn.expression = en.slice(0, on).trim()) : k();else switch (rn) {case 34:\n          cn = !0;break;case 39:\n          ln = !0;break;case 40:\n          pn++;break;case 41:\n          pn--;break;case 91:\n          fn++;break;case 93:\n          fn--;break;case 123:\n          un++;break;case 125:\n          un--;}\n    }return null == nn.expression ? nn.expression = en.slice(0, on).trim() : 0 !== hn && k(), dn.put(t, nn), nn;\n  }function O(t) {\n    return t.replace(_n, \"\\\\$&\");\n  }function T() {\n    var t = O(An.delimiters[0]),\n        e = O(An.delimiters[1]),\n        i = O(An.unsafeDelimiters[0]),\n        n = O(An.unsafeDelimiters[1]);bn = new RegExp(i + \"((?:.|\\\\n)+?)\" + n + \"|\" + t + \"((?:.|\\\\n)+?)\" + e, \"g\"), wn = new RegExp(\"^\" + i + \"((?:.|\\\\n)+?)\" + n + \"$\"), yn = new $(1e3);\n  }function N(t) {\n    yn || T();var e = yn.get(t);if (e) return e;if (!bn.test(t)) return null;for (var i, n, r, s, o, a, h = [], l = bn.lastIndex = 0; i = bn.exec(t);) {\n      n = i.index, n > l && h.push({ value: t.slice(l, n) }), r = wn.test(i[0]), s = r ? i[1] : i[2], o = s.charCodeAt(0), a = 42 === o, s = a ? s.slice(1) : s, h.push({ tag: !0, value: s.trim(), html: r, oneTime: a }), l = n + i[0].length;\n    }return l < t.length && h.push({ value: t.slice(l) }), yn.put(t, h), h;\n  }function j(t, e) {\n    return t.length > 1 ? t.map(function (t) {\n      return E(t, e);\n    }).join(\"+\") : E(t[0], e, !0);\n  }function E(t, e, i) {\n    return t.tag ? t.oneTime && e ? '\"' + e.$eval(t.value) + '\"' : S(t.value, i) : '\"' + t.value + '\"';\n  }function S(t, e) {\n    if (Cn.test(t)) {\n      var i = A(t);return i.filters ? \"this._applyFilters(\" + i.expression + \",null,\" + JSON.stringify(i.filters) + \",false)\" : \"(\" + t + \")\";\n    }return e ? t : \"(\" + t + \")\";\n  }function F(t, e, i, n) {\n    R(t, 1, function () {\n      e.appendChild(t);\n    }, i, n);\n  }function D(t, e, i, n) {\n    R(t, 1, function () {\n      B(t, e);\n    }, i, n);\n  }function P(t, e, i) {\n    R(t, -1, function () {\n      z(t);\n    }, e, i);\n  }function R(t, e, i, n, r) {\n    var s = t.__v_trans;if (!s || !s.hooks && !qi || !n._isCompiled || n.$parent && !n.$parent._isCompiled) return i(), void (r && r());var o = e > 0 ? \"enter\" : \"leave\";s[o](i, r);\n  }function L(t) {\n    if (\"string\" == typeof t) {\n      t = document.querySelector(t);\n    }return t;\n  }function H(t) {\n    if (!t) return !1;var e = t.ownerDocument.documentElement,\n        i = t.parentNode;return e === t || e === i || !(!i || 1 !== i.nodeType || !e.contains(i));\n  }function I(t, e) {\n    var i = t.getAttribute(e);return null !== i && t.removeAttribute(e), i;\n  }function M(t, e) {\n    var i = I(t, \":\" + e);return null === i && (i = I(t, \"v-bind:\" + e)), i;\n  }function V(t, e) {\n    return t.hasAttribute(e) || t.hasAttribute(\":\" + e) || t.hasAttribute(\"v-bind:\" + e);\n  }function B(t, e) {\n    e.parentNode.insertBefore(t, e);\n  }function W(t, e) {\n    e.nextSibling ? B(t, e.nextSibling) : e.parentNode.appendChild(t);\n  }function z(t) {\n    t.parentNode.removeChild(t);\n  }function U(t, e) {\n    e.firstChild ? B(t, e.firstChild) : e.appendChild(t);\n  }function J(t, e) {\n    var i = t.parentNode;i && i.replaceChild(e, t);\n  }function q(t, e, i, n) {\n    t.addEventListener(e, i, n);\n  }function Q(t, e, i) {\n    t.removeEventListener(e, i);\n  }function G(t) {\n    var e = t.className;return \"object\" == (typeof e === \"undefined\" ? \"undefined\" : _typeof(e)) && (e = e.baseVal || \"\"), e;\n  }function Z(t, e) {\n    Mi && !/svg$/.test(t.namespaceURI) ? t.className = e : t.setAttribute(\"class\", e);\n  }function X(t, e) {\n    if (t.classList) t.classList.add(e);else {\n      var i = \" \" + G(t) + \" \";i.indexOf(\" \" + e + \" \") < 0 && Z(t, (i + e).trim());\n    }\n  }function Y(t, e) {\n    if (t.classList) t.classList.remove(e);else {\n      for (var i = \" \" + G(t) + \" \", n = \" \" + e + \" \"; i.indexOf(n) >= 0;) {\n        i = i.replace(n, \" \");\n      }Z(t, i.trim());\n    }t.className || t.removeAttribute(\"class\");\n  }function K(t, e) {\n    var i, n;if (it(t) && at(t.content) && (t = t.content), t.hasChildNodes()) for (tt(t), n = e ? document.createDocumentFragment() : document.createElement(\"div\"); i = t.firstChild;) {\n      n.appendChild(i);\n    }return n;\n  }function tt(t) {\n    for (var e; e = t.firstChild, et(e);) {\n      t.removeChild(e);\n    }for (; e = t.lastChild, et(e);) {\n      t.removeChild(e);\n    }\n  }function et(t) {\n    return t && (3 === t.nodeType && !t.data.trim() || 8 === t.nodeType);\n  }function it(t) {\n    return t.tagName && \"template\" === t.tagName.toLowerCase();\n  }function nt(t, e) {\n    var i = An.debug ? document.createComment(t) : document.createTextNode(e ? \" \" : \"\");return i.__v_anchor = !0, i;\n  }function rt(t) {\n    if (t.hasAttributes()) for (var e = t.attributes, i = 0, n = e.length; n > i; i++) {\n      var r = e[i].name;if (Nn.test(r)) return l(r.replace(Nn, \"\"));\n    }\n  }function st(t, e, i) {\n    for (var n; t !== e;) {\n      n = t.nextSibling, i(t), t = n;\n    }i(e);\n  }function ot(t, e, i, n, r) {\n    function s() {\n      if (a++, o && a >= h.length) {\n        for (var t = 0; t < h.length; t++) {\n          n.appendChild(h[t]);\n        }r && r();\n      }\n    }var o = !1,\n        a = 0,\n        h = [];st(t, e, function (t) {\n      t === e && (o = !0), h.push(t), P(t, i, s);\n    });\n  }function at(t) {\n    return t && 11 === t.nodeType;\n  }function ht(t) {\n    if (t.outerHTML) return t.outerHTML;var e = document.createElement(\"div\");return e.appendChild(t.cloneNode(!0)), e.innerHTML;\n  }function lt(t, e) {\n    var i = t.tagName.toLowerCase(),\n        n = t.hasAttributes();if (jn.test(i) || En.test(i)) {\n      if (n) return ct(t, e);\n    } else {\n      if (gt(e, \"components\", i)) return { id: i };var r = n && ct(t, e);if (r) return r;\n    }\n  }function ct(t, e) {\n    var i = t.getAttribute(\"is\");if (null != i) {\n      if (gt(e, \"components\", i)) return t.removeAttribute(\"is\"), { id: i };\n    } else if (i = M(t, \"is\"), null != i) return { id: i, dynamic: !0 };\n  }function ut(e, n) {\n    var r, s, o;for (r in n) {\n      s = e[r], o = n[r], i(e, r) ? m(s) && m(o) && ut(s, o) : t(e, r, o);\n    }return e;\n  }function ft(t, e) {\n    var i = Object.create(t || null);return e ? v(i, vt(e)) : i;\n  }function pt(t) {\n    if (t.components) for (var e, i = t.components = vt(t.components), n = Object.keys(i), r = 0, s = n.length; s > r; r++) {\n      var o = n[r];jn.test(o) || En.test(o) || (e = i[o], g(e) && (i[o] = wi.extend(e)));\n    }\n  }function dt(t) {\n    var e,\n        i,\n        n = t.props;if (Di(n)) for (t.props = {}, e = n.length; e--;) {\n      i = n[e], \"string\" == typeof i ? t.props[i] = null : i.name && (t.props[i.name] = i);\n    } else if (g(n)) {\n      var r = Object.keys(n);for (e = r.length; e--;) {\n        i = n[r[e]], \"function\" == typeof i && (n[r[e]] = { type: i });\n      }\n    }\n  }function vt(t) {\n    if (Di(t)) {\n      for (var e, i = {}, n = t.length; n--;) {\n        e = t[n];var r = \"function\" == typeof e ? e.options && e.options.name || e.id : e.name || e.id;r && (i[r] = e);\n      }return i;\n    }return t;\n  }function mt(t, e, n) {\n    function r(i) {\n      var r = Sn[i] || Fn;o[i] = r(t[i], e[i], n, i);\n    }pt(e), dt(e);var s,\n        o = {};if (e[\"extends\"] && (t = \"function\" == typeof e[\"extends\"] ? mt(t, e[\"extends\"].options, n) : mt(t, e[\"extends\"], n)), e.mixins) for (var a = 0, h = e.mixins.length; h > a; a++) {\n      var l = e.mixins[a],\n          c = l.prototype instanceof wi ? l.options : l;t = mt(t, c, n);\n    }for (s in t) {\n      r(s);\n    }for (s in e) {\n      i(t, s) || r(s);\n    }return o;\n  }function gt(t, e, i, n) {\n    if (\"string\" == typeof i) {\n      var r,\n          s = t[e],\n          o = s[i] || s[r = l(i)] || s[r.charAt(0).toUpperCase() + r.slice(1)];return o;\n    }\n  }function _t() {\n    this.id = Dn++, this.subs = [];\n  }function yt(t) {\n    Hn = !1, t(), Hn = !0;\n  }function bt(t) {\n    if (this.value = t, this.dep = new _t(), _(t, \"__ob__\", this), Di(t)) {\n      var e = Pi ? wt : Ct;e(t, Rn, Ln), this.observeArray(t);\n    } else this.walk(t);\n  }function wt(t, e) {\n    t.__proto__ = e;\n  }function Ct(t, e, i) {\n    for (var n = 0, r = i.length; r > n; n++) {\n      var s = i[n];_(t, s, e[s]);\n    }\n  }function $t(t, e) {\n    if (t && \"object\" == (typeof t === \"undefined\" ? \"undefined\" : _typeof(t))) {\n      var n;return i(t, \"__ob__\") && t.__ob__ instanceof bt ? n = t.__ob__ : Hn && (Di(t) || g(t)) && Object.isExtensible(t) && !t._isVue && (n = new bt(t)), n && e && n.addVm(e), n;\n    }\n  }function kt(t, e, i) {\n    var n = new _t(),\n        r = Object.getOwnPropertyDescriptor(t, e);if (!r || r.configurable !== !1) {\n      var s = r && r.get,\n          o = r && r.set,\n          a = $t(i);Object.defineProperty(t, e, { enumerable: !0, configurable: !0, get: function get() {\n          var e = s ? s.call(t) : i;if (_t.target && (n.depend(), a && a.dep.depend(), Di(e))) for (var r, o = 0, h = e.length; h > o; o++) {\n            r = e[o], r && r.__ob__ && r.__ob__.dep.depend();\n          }return e;\n        }, set: function set(e) {\n          var r = s ? s.call(t) : i;e !== r && (o ? o.call(t, e) : i = e, a = $t(e), n.notify());\n        } });\n    }\n  }function xt(t) {\n    t.prototype._init = function (t) {\n      t = t || {}, this.$el = null, this.$parent = t.parent, this.$root = this.$parent ? this.$parent.$root : this, this.$children = [], this.$refs = {}, this.$els = {}, this._watchers = [], this._directives = [], this._uid = Mn++, this._isVue = !0, this._events = {}, this._eventsCount = {}, this._isFragment = !1, this._fragment = this._fragmentStart = this._fragmentEnd = null, this._isCompiled = this._isDestroyed = this._isReady = this._isAttached = this._isBeingDestroyed = this._vForRemoving = !1, this._unlinkFn = null, this._context = t._context || this.$parent, this._scope = t._scope, this._frag = t._frag, this._frag && this._frag.children.push(this), this.$parent && this.$parent.$children.push(this), t = this.$options = mt(this.constructor.options, t, this), this._updateRef(), this._data = {}, this._callHook(\"init\"), this._initState(), this._initEvents(), this._callHook(\"created\"), t.el && this.$mount(t.el);\n    };\n  }function At(t) {\n    if (void 0 === t) return \"eof\";var e = t.charCodeAt(0);switch (e) {case 91:case 93:case 46:case 34:case 39:case 48:\n        return t;case 95:case 36:\n        return \"ident\";case 32:case 9:case 10:case 13:case 160:case 65279:case 8232:case 8233:\n        return \"ws\";}return e >= 97 && 122 >= e || e >= 65 && 90 >= e ? \"ident\" : e >= 49 && 57 >= e ? \"number\" : \"else\";\n  }function Ot(t) {\n    var e = t.trim();return \"0\" === t.charAt(0) && isNaN(t) ? !1 : n(e) ? h(e) : \"*\" + e;\n  }function Tt(t) {\n    function e() {\n      var e = t[c + 1];return u === Xn && \"'\" === e || u === Yn && '\"' === e ? (c++, n = \"\\\\\" + e, p[Bn](), !0) : void 0;\n    }var i,\n        n,\n        r,\n        s,\n        o,\n        a,\n        h,\n        l = [],\n        c = -1,\n        u = Jn,\n        f = 0,\n        p = [];for (p[Wn] = function () {\n      void 0 !== r && (l.push(r), r = void 0);\n    }, p[Bn] = function () {\n      void 0 === r ? r = n : r += n;\n    }, p[zn] = function () {\n      p[Bn](), f++;\n    }, p[Un] = function () {\n      if (f > 0) f--, u = Zn, p[Bn]();else {\n        if (f = 0, r = Ot(r), r === !1) return !1;p[Wn]();\n      }\n    }; null != u;) {\n      if (c++, i = t[c], \"\\\\\" !== i || !e()) {\n        if (s = At(i), h = er[u], o = h[s] || h[\"else\"] || tr, o === tr) return;if (u = o[0], a = p[o[1]], a && (n = o[2], n = void 0 === n ? i : n, a() === !1)) return;if (u === Kn) return l.raw = t, l;\n      }\n    }\n  }function Nt(t) {\n    var e = Vn.get(t);return e || (e = Tt(t), e && Vn.put(t, e)), e;\n  }function jt(t, e) {\n    return It(e).get(t);\n  }function Et(e, i, n) {\n    var r = e;if (\"string\" == typeof i && (i = Tt(i)), !i || !m(e)) return !1;for (var s, o, a = 0, h = i.length; h > a; a++) {\n      s = e, o = i[a], \"*\" === o.charAt(0) && (o = It(o.slice(1)).get.call(r, r)), h - 1 > a ? (e = e[o], m(e) || (e = {}, t(s, o, e))) : Di(e) ? e.$set(o, n) : o in e ? e[o] = n : t(e, o, n);\n    }return !0;\n  }function St() {}function Ft(t, e) {\n    var i = vr.length;return vr[i] = e ? t.replace(lr, \"\\\\n\") : t, '\"' + i + '\"';\n  }function Dt(t) {\n    var e = t.charAt(0),\n        i = t.slice(1);return sr.test(i) ? t : (i = i.indexOf('\"') > -1 ? i.replace(ur, Pt) : i, e + \"scope.\" + i);\n  }function Pt(t, e) {\n    return vr[e];\n  }function Rt(t) {\n    ar.test(t), vr.length = 0;var e = t.replace(cr, Ft).replace(hr, \"\");return e = (\" \" + e).replace(pr, Dt).replace(ur, Pt), Lt(e);\n  }function Lt(t) {\n    try {\n      return new Function(\"scope\", \"return \" + t + \";\");\n    } catch (e) {\n      return St;\n    }\n  }function Ht(t) {\n    var e = Nt(t);return e ? function (t, i) {\n      Et(t, e, i);\n    } : void 0;\n  }function It(t, e) {\n    t = t.trim();var i = nr.get(t);if (i) return e && !i.set && (i.set = Ht(i.exp)), i;var n = { exp: t };return n.get = Mt(t) && t.indexOf(\"[\") < 0 ? Lt(\"scope.\" + t) : Rt(t), e && (n.set = Ht(t)), nr.put(t, n), n;\n  }function Mt(t) {\n    return fr.test(t) && !dr.test(t) && \"Math.\" !== t.slice(0, 5);\n  }function Vt() {\n    gr.length = 0, _r.length = 0, yr = {}, br = {}, wr = !1;\n  }function Bt() {\n    for (var t = !0; t;) {\n      t = !1, Wt(gr), Wt(_r), gr.length ? t = !0 : (Li && An.devtools && Li.emit(\"flush\"), Vt());\n    }\n  }function Wt(t) {\n    for (var e = 0; e < t.length; e++) {\n      var i = t[e],\n          n = i.id;yr[n] = null, i.run();\n    }t.length = 0;\n  }function zt(t) {\n    var e = t.id;if (null == yr[e]) {\n      var i = t.user ? _r : gr;yr[e] = i.length, i.push(t), wr || (wr = !0, Yi(Bt));\n    }\n  }function Ut(t, e, i, n) {\n    n && v(this, n);var r = \"function\" == typeof e;if (this.vm = t, t._watchers.push(this), this.expression = e, this.cb = i, this.id = ++Cr, this.active = !0, this.dirty = this.lazy, this.deps = [], this.newDeps = [], this.depIds = new Ki(), this.newDepIds = new Ki(), this.prevError = null, r) this.getter = e, this.setter = void 0;else {\n      var s = It(e, this.twoWay);this.getter = s.get, this.setter = s.set;\n    }this.value = this.lazy ? void 0 : this.get(), this.queued = this.shallow = !1;\n  }function Jt(t, e) {\n    var i = void 0,\n        n = void 0;e || (e = $r, e.clear());var r = Di(t),\n        s = m(t);if ((r || s) && Object.isExtensible(t)) {\n      if (t.__ob__) {\n        var o = t.__ob__.dep.id;if (e.has(o)) return;e.add(o);\n      }if (r) for (i = t.length; i--;) {\n        Jt(t[i], e);\n      } else if (s) for (n = Object.keys(t), i = n.length; i--;) {\n        Jt(t[n[i]], e);\n      }\n    }\n  }function qt(t) {\n    return it(t) && at(t.content);\n  }function Qt(t, e) {\n    var i = e ? t : t.trim(),\n        n = xr.get(i);if (n) return n;var r = document.createDocumentFragment(),\n        s = t.match(Tr),\n        o = Nr.test(t),\n        a = jr.test(t);if (s || o || a) {\n      var h = s && s[1],\n          l = Or[h] || Or.efault,\n          c = l[0],\n          u = l[1],\n          f = l[2],\n          p = document.createElement(\"div\");for (p.innerHTML = u + t + f; c--;) {\n        p = p.lastChild;\n      }for (var d; d = p.firstChild;) {\n        r.appendChild(d);\n      }\n    } else r.appendChild(document.createTextNode(t));return e || tt(r), xr.put(i, r), r;\n  }function Gt(t) {\n    if (qt(t)) return Qt(t.innerHTML);if (\"SCRIPT\" === t.tagName) return Qt(t.textContent);for (var e, i = Zt(t), n = document.createDocumentFragment(); e = i.firstChild;) {\n      n.appendChild(e);\n    }return tt(n), n;\n  }function Zt(t) {\n    if (!t.querySelectorAll) return t.cloneNode();var e,\n        i,\n        n,\n        r = t.cloneNode(!0);if (Er) {\n      var s = r;if (qt(t) && (t = t.content, s = r.content), i = t.querySelectorAll(\"template\"), i.length) for (n = s.querySelectorAll(\"template\"), e = n.length; e--;) {\n        n[e].parentNode.replaceChild(Zt(i[e]), n[e]);\n      }\n    }if (Sr) if (\"TEXTAREA\" === t.tagName) r.value = t.value;else if (i = t.querySelectorAll(\"textarea\"), i.length) for (n = r.querySelectorAll(\"textarea\"), e = n.length; e--;) {\n      n[e].value = i[e].value;\n    }return r;\n  }function Xt(t, e, i) {\n    var n, r;return at(t) ? (tt(t), e ? Zt(t) : t) : (\"string\" == typeof t ? i || \"#\" !== t.charAt(0) ? r = Qt(t, i) : (r = Ar.get(t), r || (n = document.getElementById(t.slice(1)), n && (r = Gt(n), Ar.put(t, r)))) : t.nodeType && (r = Gt(t)), r && e ? Zt(r) : r);\n  }function Yt(t, e, i, n, r, s) {\n    this.children = [], this.childFrags = [], this.vm = e, this.scope = r, this.inserted = !1, this.parentFrag = s, s && s.childFrags.push(this), this.unlink = t(e, i, n, r, this);var o = this.single = 1 === i.childNodes.length && !i.childNodes[0].__v_anchor;o ? (this.node = i.childNodes[0], this.before = Kt, this.remove = te) : (this.node = nt(\"fragment-start\"), this.end = nt(\"fragment-end\"), this.frag = i, U(this.node, i), i.appendChild(this.end), this.before = ee, this.remove = ie), this.node.__v_frag = this;\n  }function Kt(t, e) {\n    this.inserted = !0;var i = e !== !1 ? D : B;i(this.node, t, this.vm), H(this.node) && this.callHook(ne);\n  }function te() {\n    this.inserted = !1;var t = H(this.node),\n        e = this;this.beforeRemove(), P(this.node, this.vm, function () {\n      t && e.callHook(re), e.destroy();\n    });\n  }function ee(t, e) {\n    this.inserted = !0;var i = this.vm,\n        n = e !== !1 ? D : B;st(this.node, this.end, function (e) {\n      n(e, t, i);\n    }), H(this.node) && this.callHook(ne);\n  }function ie() {\n    this.inserted = !1;var t = this,\n        e = H(this.node);this.beforeRemove(), ot(this.node, this.end, this.vm, this.frag, function () {\n      e && t.callHook(re), t.destroy();\n    });\n  }function ne(t) {\n    !t._isAttached && H(t.$el) && t._callHook(\"attached\");\n  }function re(t) {\n    t._isAttached && !H(t.$el) && t._callHook(\"detached\");\n  }function se(t, e) {\n    this.vm = t;var i,\n        n = \"string\" == typeof e;n || it(e) && !e.hasAttribute(\"v-if\") ? i = Xt(e, !0) : (i = document.createDocumentFragment(), i.appendChild(e)), this.template = i;var r,\n        s = t.constructor.cid;if (s > 0) {\n      var o = s + (n ? e : ht(e));r = Pr.get(o), r || (r = De(i, t.$options, !0), Pr.put(o, r));\n    } else r = De(i, t.$options, !0);this.linker = r;\n  }function oe(t, e, i) {\n    var n = t.node.previousSibling;if (n) {\n      for (t = n.__v_frag; !(t && t.forId === i && t.inserted || n === e);) {\n        if (n = n.previousSibling, !n) return;t = n.__v_frag;\n      }return t;\n    }\n  }function ae(t) {\n    var e = t.node;if (t.end) for (; !e.__vue__ && e !== t.end && e.nextSibling;) {\n      e = e.nextSibling;\n    }return e.__vue__;\n  }function he(t) {\n    for (var e = -1, i = new Array(Math.floor(t)); ++e < t;) {\n      i[e] = e;\n    }return i;\n  }function le(t, e, i, n) {\n    return n ? \"$index\" === n ? t : n.charAt(0).match(/\\w/) ? jt(i, n) : i[n] : e || i;\n  }function ce(t, e, i) {\n    for (var n, r, s, o = e ? [] : null, a = 0, h = t.options.length; h > a; a++) {\n      if (n = t.options[a], s = i ? n.hasAttribute(\"selected\") : n.selected) {\n        if (r = n.hasOwnProperty(\"_value\") ? n._value : n.value, !e) return r;o.push(r);\n      }\n    }return o;\n  }function ue(t, e) {\n    for (var i = t.length; i--;) {\n      if (C(t[i], e)) return i;\n    }return -1;\n  }function fe(t, e) {\n    var i = e.map(function (t) {\n      var e = t.charCodeAt(0);return e > 47 && 58 > e ? parseInt(t, 10) : 1 === t.length && (e = t.toUpperCase().charCodeAt(0), e > 64 && 91 > e) ? e : is[t];\n    });return i = [].concat.apply([], i), function (e) {\n      return i.indexOf(e.keyCode) > -1 ? t.call(this, e) : void 0;\n    };\n  }function pe(t) {\n    return function (e) {\n      return e.stopPropagation(), t.call(this, e);\n    };\n  }function de(t) {\n    return function (e) {\n      return e.preventDefault(), t.call(this, e);\n    };\n  }function ve(t) {\n    return function (e) {\n      return e.target === e.currentTarget ? t.call(this, e) : void 0;\n    };\n  }function me(t) {\n    if (as[t]) return as[t];var e = ge(t);return as[t] = as[e] = e, e;\n  }function ge(t) {\n    t = u(t);var e = l(t),\n        i = e.charAt(0).toUpperCase() + e.slice(1);hs || (hs = document.createElement(\"div\"));var n,\n        r = rs.length;if (\"filter\" !== e && e in hs.style) return { kebab: t, camel: e };for (; r--;) {\n      if (n = ss[r] + i, n in hs.style) return { kebab: rs[r] + t, camel: n };\n    }\n  }function _e(t) {\n    var e = [];if (Di(t)) for (var i = 0, n = t.length; n > i; i++) {\n      var r = t[i];if (r) if (\"string\" == typeof r) e.push(r);else for (var s in r) {\n        r[s] && e.push(s);\n      }\n    } else if (m(t)) for (var o in t) {\n      t[o] && e.push(o);\n    }return e;\n  }function ye(t, e, i) {\n    if (e = e.trim(), -1 === e.indexOf(\" \")) return void i(t, e);for (var n = e.split(/\\s+/), r = 0, s = n.length; s > r; r++) {\n      i(t, n[r]);\n    }\n  }function be(t, e, i) {\n    function n() {\n      ++s >= r ? i() : t[s].call(e, n);\n    }var r = t.length,\n        s = 0;t[0].call(e, n);\n  }function we(t, e, i) {\n    for (var r, s, o, a, h, c, f, p = [], d = Object.keys(e), v = d.length; v--;) {\n      s = d[v], r = e[s] || ks, h = l(s), xs.test(h) && (f = { name: s, path: h, options: r, mode: $s.ONE_WAY, raw: null }, o = u(s), null === (a = M(t, o)) && (null !== (a = M(t, o + \".sync\")) ? f.mode = $s.TWO_WAY : null !== (a = M(t, o + \".once\")) && (f.mode = $s.ONE_TIME)), null !== a ? (f.raw = a, c = A(a), a = c.expression, f.filters = c.filters, n(a) && !c.filters ? f.optimizedLiteral = !0 : f.dynamic = !0, f.parentPath = a) : null !== (a = I(t, o)) && (f.raw = a), p.push(f));\n    }return Ce(p);\n  }function Ce(t) {\n    return function (e, n) {\n      e._props = {};for (var r, s, l, c, f, p = e.$options.propsData, d = t.length; d--;) {\n        if (r = t[d], f = r.raw, s = r.path, l = r.options, e._props[s] = r, p && i(p, s) && ke(e, r, p[s]), null === f) ke(e, r, void 0);else if (r.dynamic) r.mode === $s.ONE_TIME ? (c = (n || e._context || e).$get(r.parentPath), ke(e, r, c)) : e._context ? e._bindDir({ name: \"prop\", def: Os, prop: r }, null, null, n) : ke(e, r, e.$get(r.parentPath));else if (r.optimizedLiteral) {\n          var v = h(f);c = v === f ? a(o(f)) : v, ke(e, r, c);\n        } else c = l.type !== Boolean || \"\" !== f && f !== u(r.name) ? f : !0, ke(e, r, c);\n      }\n    };\n  }function $e(t, e, i, n) {\n    var r = e.dynamic && Mt(e.parentPath),\n        s = i;void 0 === s && (s = Ae(t, e)), s = Te(e, s, t);var o = s !== i;Oe(e, s, t) || (s = void 0), r && !o ? yt(function () {\n      n(s);\n    }) : n(s);\n  }function ke(t, e, i) {\n    $e(t, e, i, function (i) {\n      kt(t, e.path, i);\n    });\n  }function xe(t, e, i) {\n    $e(t, e, i, function (i) {\n      t[e.path] = i;\n    });\n  }function Ae(t, e) {\n    var n = e.options;if (!i(n, \"default\")) return n.type === Boolean ? !1 : void 0;var r = n[\"default\"];return m(r), \"function\" == typeof r && n.type !== Function ? r.call(t) : r;\n  }function Oe(t, e, i) {\n    if (!t.options.required && (null === t.raw || null == e)) return !0;var n = t.options,\n        r = n.type,\n        s = !r,\n        o = [];if (r) {\n      Di(r) || (r = [r]);for (var a = 0; a < r.length && !s; a++) {\n        var h = Ne(e, r[a]);o.push(h.expectedType), s = h.valid;\n      }\n    }if (!s) return !1;var l = n.validator;return !l || l(e);\n  }function Te(t, e, i) {\n    var n = t.options.coerce;return n && \"function\" == typeof n ? n(e) : e;\n  }function Ne(t, e) {\n    var i, n;return e === String ? (n = \"string\", i = (typeof t === \"undefined\" ? \"undefined\" : _typeof(t)) === n) : e === Number ? (n = \"number\", i = (typeof t === \"undefined\" ? \"undefined\" : _typeof(t)) === n) : e === Boolean ? (n = \"boolean\", i = (typeof t === \"undefined\" ? \"undefined\" : _typeof(t)) === n) : e === Function ? (n = \"function\", i = (typeof t === \"undefined\" ? \"undefined\" : _typeof(t)) === n) : e === Object ? (n = \"object\", i = g(t)) : e === Array ? (n = \"array\", i = Di(t)) : i = t instanceof e, { valid: i, expectedType: n };\n  }function je(t) {\n    Ts.push(t), Ns || (Ns = !0, Yi(Ee));\n  }function Ee() {\n    for (var t = document.documentElement.offsetHeight, e = 0; e < Ts.length; e++) {\n      Ts[e]();\n    }return Ts = [], Ns = !1, t;\n  }function Se(t, e, i, n) {\n    this.id = e, this.el = t, this.enterClass = i && i.enterClass || e + \"-enter\", this.leaveClass = i && i.leaveClass || e + \"-leave\", this.hooks = i, this.vm = n, this.pendingCssEvent = this.pendingCssCb = this.cancel = this.pendingJsCb = this.op = this.cb = null, this.justEntered = !1, this.entered = this.left = !1, this.typeCache = {}, this.type = i && i.type;var r = this;[\"enterNextTick\", \"enterDone\", \"leaveNextTick\", \"leaveDone\"].forEach(function (t) {\n      r[t] = p(r[t], r);\n    });\n  }function Fe(t) {\n    if (/svg$/.test(t.namespaceURI)) {\n      var e = t.getBoundingClientRect();return !(e.width || e.height);\n    }return !(t.offsetWidth || t.offsetHeight || t.getClientRects().length);\n  }function De(t, e, i) {\n    var n = i || !e._asComponent ? Ve(t, e) : null,\n        r = n && n.terminal || ri(t) || !t.hasChildNodes() ? null : qe(t.childNodes, e);return function (t, e, i, s, o) {\n      var a = d(e.childNodes),\n          h = Pe(function () {\n        n && n(t, e, i, s, o), r && r(t, a, i, s, o);\n      }, t);return Le(t, h);\n    };\n  }function Pe(t, e) {\n    e._directives = [];var i = e._directives.length;t();var n = e._directives.slice(i);n.sort(Re);for (var r = 0, s = n.length; s > r; r++) {\n      n[r]._bind();\n    }return n;\n  }function Re(t, e) {\n    return t = t.descriptor.def.priority || zs, e = e.descriptor.def.priority || zs, t > e ? -1 : t === e ? 0 : 1;\n  }function Le(t, e, i, n) {\n    function r(r) {\n      He(t, e, r), i && n && He(i, n);\n    }return r.dirs = e, r;\n  }function He(t, e, i) {\n    for (var n = e.length; n--;) {\n      e[n]._teardown();\n    }\n  }function Ie(t, e, i, n) {\n    var r = we(e, i, t),\n        s = Pe(function () {\n      r(t, n);\n    }, t);return Le(t, s);\n  }function Me(t, e, i) {\n    var n,\n        r,\n        s = e._containerAttrs,\n        o = e._replacerAttrs;return 11 !== t.nodeType && (e._asComponent ? (s && i && (n = ti(s, i)), o && (r = ti(o, e))) : r = ti(t.attributes, e)), e._containerAttrs = e._replacerAttrs = null, function (t, e, i) {\n      var s,\n          o = t._context;o && n && (s = Pe(function () {\n        n(o, e, null, i);\n      }, o));var a = Pe(function () {\n        r && r(t, e);\n      }, t);return Le(t, a, o, s);\n    };\n  }function Ve(t, e) {\n    var i = t.nodeType;return 1 !== i || ri(t) ? 3 === i && t.data.trim() ? We(t, e) : null : Be(t, e);\n  }function Be(t, e) {\n    if (\"TEXTAREA\" === t.tagName) {\n      var i = N(t.value);i && (t.setAttribute(\":value\", j(i)), t.value = \"\");\n    }var n,\n        r = t.hasAttributes(),\n        s = r && d(t.attributes);return r && (n = Xe(t, s, e)), n || (n = Ge(t, e)), n || (n = Ze(t, e)), !n && r && (n = ti(s, e)), n;\n  }function We(t, e) {\n    if (t._skip) return ze;var i = N(t.wholeText);if (!i) return null;for (var n = t.nextSibling; n && 3 === n.nodeType;) {\n      n._skip = !0, n = n.nextSibling;\n    }for (var r, s, o = document.createDocumentFragment(), a = 0, h = i.length; h > a; a++) {\n      s = i[a], r = s.tag ? Ue(s, e) : document.createTextNode(s.value), o.appendChild(r);\n    }return Je(i, o, e);\n  }function ze(t, e) {\n    z(e);\n  }function Ue(t, e) {\n    function i(e) {\n      if (!t.descriptor) {\n        var i = A(t.value);t.descriptor = { name: e, def: bs[e], expression: i.expression, filters: i.filters };\n      }\n    }var n;return t.oneTime ? n = document.createTextNode(t.value) : t.html ? (n = document.createComment(\"v-html\"), i(\"html\")) : (n = document.createTextNode(\" \"), i(\"text\")), n;\n  }function Je(t, e) {\n    return function (i, n, r, o) {\n      for (var a, h, l, c = e.cloneNode(!0), u = d(c.childNodes), f = 0, p = t.length; p > f; f++) {\n        a = t[f], h = a.value, a.tag && (l = u[f], a.oneTime ? (h = (o || i).$eval(h), a.html ? J(l, Xt(h, !0)) : l.data = s(h)) : i._bindDir(a.descriptor, l, r, o));\n      }J(n, c);\n    };\n  }function qe(t, e) {\n    for (var i, n, r, s = [], o = 0, a = t.length; a > o; o++) {\n      r = t[o], i = Ve(r, e), n = i && i.terminal || \"SCRIPT\" === r.tagName || !r.hasChildNodes() ? null : qe(r.childNodes, e), s.push(i, n);\n    }return s.length ? Qe(s) : null;\n  }function Qe(t) {\n    return function (e, i, n, r, s) {\n      for (var o, a, h, l = 0, c = 0, u = t.length; u > l; c++) {\n        o = i[c], a = t[l++], h = t[l++];var f = d(o.childNodes);a && a(e, o, n, r, s), h && h(e, f, n, r, s);\n      }\n    };\n  }function Ge(t, e) {\n    var i = t.tagName.toLowerCase();if (!jn.test(i)) {\n      var n = gt(e, \"elementDirectives\", i);return n ? Ke(t, i, \"\", e, n) : void 0;\n    }\n  }function Ze(t, e) {\n    var i = lt(t, e);if (i) {\n      var n = rt(t),\n          r = { name: \"component\", ref: n, expression: i.id, def: Hs.component, modifiers: { literal: !i.dynamic } },\n          s = function s(t, e, i, _s2, o) {\n        n && kt((_s2 || t).$refs, n, null), t._bindDir(r, e, i, _s2, o);\n      };return s.terminal = !0, s;\n    }\n  }function Xe(t, e, i) {\n    if (null !== I(t, \"v-pre\")) return Ye;if (t.hasAttribute(\"v-else\")) {\n      var n = t.previousElementSibling;if (n && n.hasAttribute(\"v-if\")) return Ye;\n    }for (var r, s, o, a, h, l, c, u, f, p, d = 0, v = e.length; v > d; d++) {\n      r = e[d], s = r.name.replace(Bs, \"\"), (h = s.match(Vs)) && (f = gt(i, \"directives\", h[1]), f && f.terminal && (!p || (f.priority || Us) > p.priority) && (p = f, c = r.name, a = ei(r.name), o = r.value, l = h[1], u = h[2]));\n    }return p ? Ke(t, l, o, i, p, c, u, a) : void 0;\n  }function Ye() {}function Ke(t, e, i, n, r, s, o, a) {\n    var h = A(i),\n        l = { name: e, arg: o, expression: h.expression, filters: h.filters, raw: i, attr: s, modifiers: a, def: r };\"for\" !== e && \"router-view\" !== e || (l.ref = rt(t));var c = function c(t, e, i, n, r) {\n      l.ref && kt((n || t).$refs, l.ref, null), t._bindDir(l, e, i, n, r);\n    };return c.terminal = !0, c;\n  }function ti(t, e) {\n    function i(t, e, i) {\n      var n = i && ni(i),\n          r = !n && A(s);v.push({ name: t, attr: o, raw: a, def: e, arg: l, modifiers: c, expression: r && r.expression, filters: r && r.filters, interp: i, hasOneTime: n });\n    }for (var n, r, s, o, a, h, l, c, u, f, p, d = t.length, v = []; d--;) {\n      if (n = t[d], r = o = n.name, s = a = n.value, f = N(s), l = null, c = ei(r), r = r.replace(Bs, \"\"), f) s = j(f), l = r, i(\"bind\", bs.bind, f);else if (Ws.test(r)) c.literal = !Is.test(r), i(\"transition\", Hs.transition);else if (Ms.test(r)) l = r.replace(Ms, \"\"), i(\"on\", bs.on);else if (Is.test(r)) h = r.replace(Is, \"\"), \"style\" === h || \"class\" === h ? i(h, Hs[h]) : (l = h, i(\"bind\", bs.bind));else if (p = r.match(Vs)) {\n        if (h = p[1], l = p[2], \"else\" === h) continue;u = gt(e, \"directives\", h, !0), u && i(h, u);\n      }\n    }return v.length ? ii(v) : void 0;\n  }function ei(t) {\n    var e = Object.create(null),\n        i = t.match(Bs);if (i) for (var n = i.length; n--;) {\n      e[i[n].slice(1)] = !0;\n    }return e;\n  }function ii(t) {\n    return function (e, i, n, r, s) {\n      for (var o = t.length; o--;) {\n        e._bindDir(t[o], i, n, r, s);\n      }\n    };\n  }function ni(t) {\n    for (var e = t.length; e--;) {\n      if (t[e].oneTime) return !0;\n    }\n  }function ri(t) {\n    return \"SCRIPT\" === t.tagName && (!t.hasAttribute(\"type\") || \"text/javascript\" === t.getAttribute(\"type\"));\n  }function si(t, e) {\n    return e && (e._containerAttrs = ai(t)), it(t) && (t = Xt(t)), e && (e._asComponent && !e.template && (e.template = \"<slot></slot>\"), e.template && (e._content = K(t), t = oi(t, e))), at(t) && (U(nt(\"v-start\", !0), t), t.appendChild(nt(\"v-end\", !0))), t;\n  }function oi(t, e) {\n    var i = e.template,\n        n = Xt(i, !0);if (n) {\n      var r = n.firstChild,\n          s = r.tagName && r.tagName.toLowerCase();return e.replace ? (t === document.body, n.childNodes.length > 1 || 1 !== r.nodeType || \"component\" === s || gt(e, \"components\", s) || V(r, \"is\") || gt(e, \"elementDirectives\", s) || r.hasAttribute(\"v-for\") || r.hasAttribute(\"v-if\") ? n : (e._replacerAttrs = ai(r), hi(t, r), r)) : (t.appendChild(n), t);\n    }\n  }function ai(t) {\n    return 1 === t.nodeType && t.hasAttributes() ? d(t.attributes) : void 0;\n  }function hi(t, e) {\n    for (var i, n, r = t.attributes, s = r.length; s--;) {\n      i = r[s].name, n = r[s].value, e.hasAttribute(i) || Js.test(i) ? \"class\" === i && !N(n) && (n = n.trim()) && n.split(/\\s+/).forEach(function (t) {\n        X(e, t);\n      }) : e.setAttribute(i, n);\n    }\n  }function li(t, e) {\n    if (e) {\n      for (var i, n, r = t._slotContents = Object.create(null), s = 0, o = e.children.length; o > s; s++) {\n        i = e.children[s], (n = i.getAttribute(\"slot\")) && (r[n] || (r[n] = [])).push(i);\n      }for (n in r) {\n        r[n] = ci(r[n], e);\n      }if (e.hasChildNodes()) {\n        var a = e.childNodes;if (1 === a.length && 3 === a[0].nodeType && !a[0].data.trim()) return;r[\"default\"] = ci(e.childNodes, e);\n      }\n    }\n  }function ci(t, e) {\n    var i = document.createDocumentFragment();t = d(t);for (var n = 0, r = t.length; r > n; n++) {\n      var s = t[n];!it(s) || s.hasAttribute(\"v-if\") || s.hasAttribute(\"v-for\") || (e.removeChild(s), s = Xt(s, !0)), i.appendChild(s);\n    }return i;\n  }function ui(t) {\n    function e() {}function n(t, e) {\n      var i = new Ut(e, t, null, { lazy: !0 });return function () {\n        return i.dirty && i.evaluate(), _t.target && i.depend(), i.value;\n      };\n    }Object.defineProperty(t.prototype, \"$data\", { get: function get() {\n        return this._data;\n      }, set: function set(t) {\n        t !== this._data && this._setData(t);\n      } }), t.prototype._initState = function () {\n      this._initProps(), this._initMeta(), this._initMethods(), this._initData(), this._initComputed();\n    }, t.prototype._initProps = function () {\n      var t = this.$options,\n          e = t.el,\n          i = t.props;e = t.el = L(e), this._propsUnlinkFn = e && 1 === e.nodeType && i ? Ie(this, e, i, this._scope) : null;\n    }, t.prototype._initData = function () {\n      var t = this.$options.data,\n          e = this._data = t ? t() : {};g(e) || (e = {});var n,\n          r,\n          s = this._props,\n          o = Object.keys(e);for (n = o.length; n--;) {\n        r = o[n], s && i(s, r) || this._proxy(r);\n      }$t(e, this);\n    }, t.prototype._setData = function (t) {\n      t = t || {};var e = this._data;this._data = t;var n, r, s;for (n = Object.keys(e), s = n.length; s--;) {\n        r = n[s], r in t || this._unproxy(r);\n      }for (n = Object.keys(t), s = n.length; s--;) {\n        r = n[s], i(this, r) || this._proxy(r);\n      }e.__ob__.removeVm(this), $t(t, this), this._digest();\n    }, t.prototype._proxy = function (t) {\n      if (!r(t)) {\n        var e = this;Object.defineProperty(e, t, { configurable: !0, enumerable: !0, get: function get() {\n            return e._data[t];\n          }, set: function set(i) {\n            e._data[t] = i;\n          } });\n      }\n    }, t.prototype._unproxy = function (t) {\n      r(t) || delete this[t];\n    }, t.prototype._digest = function () {\n      for (var t = 0, e = this._watchers.length; e > t; t++) {\n        this._watchers[t].update(!0);\n      }\n    }, t.prototype._initComputed = function () {\n      var t = this.$options.computed;if (t) for (var i in t) {\n        var r = t[i],\n            s = { enumerable: !0, configurable: !0 };\"function\" == typeof r ? (s.get = n(r, this), s.set = e) : (s.get = r.get ? r.cache !== !1 ? n(r.get, this) : p(r.get, this) : e, s.set = r.set ? p(r.set, this) : e), Object.defineProperty(this, i, s);\n      }\n    }, t.prototype._initMethods = function () {\n      var t = this.$options.methods;if (t) for (var e in t) {\n        this[e] = p(t[e], this);\n      }\n    }, t.prototype._initMeta = function () {\n      var t = this.$options._meta;if (t) for (var e in t) {\n        kt(this, e, t[e]);\n      }\n    };\n  }function fi(t) {\n    function e(t, e) {\n      for (var i, n, r, s = e.attributes, o = 0, a = s.length; a > o; o++) {\n        i = s[o].name, Qs.test(i) && (i = i.replace(Qs, \"\"), n = s[o].value, Mt(n) && (n += \".apply(this, $arguments)\"), r = (t._scope || t._context).$eval(n, !0), r._fromParent = !0, t.$on(i.replace(Qs), r));\n      }\n    }function i(t, e, i) {\n      if (i) {\n        var r, s, o, a;for (s in i) {\n          if (r = i[s], Di(r)) for (o = 0, a = r.length; a > o; o++) {\n            n(t, e, s, r[o]);\n          } else n(t, e, s, r);\n        }\n      }\n    }function n(t, e, i, r, s) {\n      var o = typeof r === \"undefined\" ? \"undefined\" : _typeof(r);if (\"function\" === o) t[e](i, r, s);else if (\"string\" === o) {\n        var a = t.$options.methods,\n            h = a && a[r];h && t[e](i, h, s);\n      } else r && \"object\" === o && n(t, e, i, r.handler, r);\n    }function r() {\n      this._isAttached || (this._isAttached = !0, this.$children.forEach(s));\n    }function s(t) {\n      !t._isAttached && H(t.$el) && t._callHook(\"attached\");\n    }function o() {\n      this._isAttached && (this._isAttached = !1, this.$children.forEach(a));\n    }function a(t) {\n      t._isAttached && !H(t.$el) && t._callHook(\"detached\");\n    }t.prototype._initEvents = function () {\n      var t = this.$options;t._asComponent && e(this, t.el), i(this, \"$on\", t.events), i(this, \"$watch\", t.watch);\n    }, t.prototype._initDOMHooks = function () {\n      this.$on(\"hook:attached\", r), this.$on(\"hook:detached\", o);\n    }, t.prototype._callHook = function (t) {\n      this.$emit(\"pre-hook:\" + t);var e = this.$options[t];if (e) for (var i = 0, n = e.length; n > i; i++) {\n        e[i].call(this);\n      }this.$emit(\"hook:\" + t);\n    };\n  }function pi() {}function di(t, e, i, n, r, s) {\n    this.vm = e, this.el = i, this.descriptor = t, this.name = t.name, this.expression = t.expression, this.arg = t.arg, this.modifiers = t.modifiers, this.filters = t.filters, this.literal = this.modifiers && this.modifiers.literal, this._locked = !1, this._bound = !1, this._listeners = null, this._host = n, this._scope = r, this._frag = s;\n  }function vi(t) {\n    t.prototype._updateRef = function (t) {\n      var e = this.$options._ref;if (e) {\n        var i = (this._scope || this._context).$refs;t ? i[e] === this && (i[e] = null) : i[e] = this;\n      }\n    }, t.prototype._compile = function (t) {\n      var e = this.$options,\n          i = t;if (t = si(t, e), this._initElement(t), 1 !== t.nodeType || null === I(t, \"v-pre\")) {\n        var n = this._context && this._context.$options,\n            r = Me(t, e, n);li(this, e._content);var s,\n            o = this.constructor;e._linkerCachable && (s = o.linker, s || (s = o.linker = De(t, e)));var a = r(this, t, this._scope),\n            h = s ? s(this, t) : De(t, e)(this, t);this._unlinkFn = function () {\n          a(), h(!0);\n        }, e.replace && J(i, t), this._isCompiled = !0, this._callHook(\"compiled\");\n      }\n    }, t.prototype._initElement = function (t) {\n      at(t) ? (this._isFragment = !0, this.$el = this._fragmentStart = t.firstChild, this._fragmentEnd = t.lastChild, 3 === this._fragmentStart.nodeType && (this._fragmentStart.data = this._fragmentEnd.data = \"\"), this._fragment = t) : this.$el = t, this.$el.__vue__ = this, this._callHook(\"beforeCompile\");\n    }, t.prototype._bindDir = function (t, e, i, n, r) {\n      this._directives.push(new di(t, this, e, i, n, r));\n    }, t.prototype._destroy = function (t, e) {\n      if (this._isBeingDestroyed) return void (e || this._cleanup());var i,\n          n,\n          r = this,\n          s = function s() {\n        !i || n || e || r._cleanup();\n      };t && this.$el && (n = !0, this.$remove(function () {\n        n = !1, s();\n      })), this._callHook(\"beforeDestroy\"), this._isBeingDestroyed = !0;var o,\n          a = this.$parent;for (a && !a._isBeingDestroyed && (a.$children.$remove(this), this._updateRef(!0)), o = this.$children.length; o--;) {\n        this.$children[o].$destroy();\n      }for (this._propsUnlinkFn && this._propsUnlinkFn(), this._unlinkFn && this._unlinkFn(), o = this._watchers.length; o--;) {\n        this._watchers[o].teardown();\n      }this.$el && (this.$el.__vue__ = null), i = !0, s();\n    }, t.prototype._cleanup = function () {\n      this._isDestroyed || (this._frag && this._frag.children.$remove(this), this._data && this._data.__ob__ && this._data.__ob__.removeVm(this), this.$el = this.$parent = this.$root = this.$children = this._watchers = this._context = this._scope = this._directives = null, this._isDestroyed = !0, this._callHook(\"destroyed\"), this.$off());\n    };\n  }function mi(t) {\n    t.prototype._applyFilters = function (t, e, i, n) {\n      var r, s, o, a, h, l, c, u, f;for (l = 0, c = i.length; c > l; l++) {\n        if (r = i[n ? c - l - 1 : l], s = gt(this.$options, \"filters\", r.name, !0), s && (s = n ? s.write : s.read || s, \"function\" == typeof s)) {\n          if (o = n ? [t, e] : [t], h = n ? 2 : 1, r.args) for (u = 0, f = r.args.length; f > u; u++) {\n            a = r.args[u], o[u + h] = a.dynamic ? this.$get(a.value) : a.value;\n          }t = s.apply(this, o);\n        }\n      }return t;\n    }, t.prototype._resolveComponent = function (e, i) {\n      var n;if (n = \"function\" == typeof e ? e : gt(this.$options, \"components\", e, !0)) if (n.options) i(n);else if (n.resolved) i(n.resolved);else if (n.requested) n.pendingCallbacks.push(i);else {\n        n.requested = !0;var r = n.pendingCallbacks = [i];n.call(this, function (e) {\n          g(e) && (e = t.extend(e)), n.resolved = e;for (var i = 0, s = r.length; s > i; i++) {\n            r[i](e);\n          }\n        }, function (t) {});\n      }\n    };\n  }function gi(t) {\n    function i(t) {\n      return JSON.parse(JSON.stringify(t));\n    }t.prototype.$get = function (t, e) {\n      var i = It(t);if (i) {\n        if (e) {\n          var n = this;return function () {\n            n.$arguments = d(arguments);var t = i.get.call(n, n);return n.$arguments = null, t;\n          };\n        }try {\n          return i.get.call(this, this);\n        } catch (r) {}\n      }\n    }, t.prototype.$set = function (t, e) {\n      var i = It(t, !0);i && i.set && i.set.call(this, this, e);\n    }, t.prototype.$delete = function (t) {\n      e(this._data, t);\n    }, t.prototype.$watch = function (t, e, i) {\n      var n,\n          r = this;\"string\" == typeof t && (n = A(t), t = n.expression);var s = new Ut(r, t, e, { deep: i && i.deep, sync: i && i.sync, filters: n && n.filters, user: !i || i.user !== !1 });return i && i.immediate && e.call(r, s.value), function () {\n        s.teardown();\n      };\n    }, t.prototype.$eval = function (t, e) {\n      if (Gs.test(t)) {\n        var i = A(t),\n            n = this.$get(i.expression, e);return i.filters ? this._applyFilters(n, null, i.filters) : n;\n      }return this.$get(t, e);\n    }, t.prototype.$interpolate = function (t) {\n      var e = N(t),\n          i = this;return e ? 1 === e.length ? i.$eval(e[0].value) + \"\" : e.map(function (t) {\n        return t.tag ? i.$eval(t.value) : t.value;\n      }).join(\"\") : t;\n    }, t.prototype.$log = function (t) {\n      var e = t ? jt(this._data, t) : this._data;if (e && (e = i(e)), !t) {\n        var n;for (n in this.$options.computed) {\n          e[n] = i(this[n]);\n        }if (this._props) for (n in this._props) {\n          e[n] = i(this[n]);\n        }\n      }console.log(e);\n    };\n  }function _i(t) {\n    function e(t, e, n, r, s, o) {\n      e = i(e);var a = !H(e),\n          h = r === !1 || a ? s : o,\n          l = !a && !t._isAttached && !H(t.$el);return t._isFragment ? (st(t._fragmentStart, t._fragmentEnd, function (i) {\n        h(i, e, t);\n      }), n && n()) : h(t.$el, e, t, n), l && t._callHook(\"attached\"), t;\n    }function i(t) {\n      return \"string\" == typeof t ? document.querySelector(t) : t;\n    }function n(t, e, i, n) {\n      e.appendChild(t), n && n();\n    }function r(t, e, i, n) {\n      B(t, e), n && n();\n    }function s(t, e, i) {\n      z(t), i && i();\n    }t.prototype.$nextTick = function (t) {\n      Yi(t, this);\n    }, t.prototype.$appendTo = function (t, i, r) {\n      return e(this, t, i, r, n, F);\n    }, t.prototype.$prependTo = function (t, e, n) {\n      return t = i(t), t.hasChildNodes() ? this.$before(t.firstChild, e, n) : this.$appendTo(t, e, n), this;\n    }, t.prototype.$before = function (t, i, n) {\n      return e(this, t, i, n, r, D);\n    }, t.prototype.$after = function (t, e, n) {\n      return t = i(t), t.nextSibling ? this.$before(t.nextSibling, e, n) : this.$appendTo(t.parentNode, e, n), this;\n    }, t.prototype.$remove = function (t, e) {\n      if (!this.$el.parentNode) return t && t();var i = this._isAttached && H(this.$el);i || (e = !1);var n = this,\n          r = function r() {\n        i && n._callHook(\"detached\"), t && t();\n      };if (this._isFragment) ot(this._fragmentStart, this._fragmentEnd, this, this._fragment, r);else {\n        var o = e === !1 ? s : P;o(this.$el, this, r);\n      }return this;\n    };\n  }function yi(t) {\n    function e(t, e, n) {\n      var r = t.$parent;if (r && n && !i.test(e)) for (; r;) {\n        r._eventsCount[e] = (r._eventsCount[e] || 0) + n, r = r.$parent;\n      }\n    }t.prototype.$on = function (t, i) {\n      return (this._events[t] || (this._events[t] = [])).push(i), e(this, t, 1), this;\n    }, t.prototype.$once = function (t, e) {\n      function i() {\n        n.$off(t, i), e.apply(this, arguments);\n      }var n = this;return i.fn = e, this.$on(t, i), this;\n    }, t.prototype.$off = function (t, i) {\n      var n;if (!arguments.length) {\n        if (this.$parent) for (t in this._events) {\n          n = this._events[t], n && e(this, t, -n.length);\n        }return this._events = {}, this;\n      }if (n = this._events[t], !n) return this;if (1 === arguments.length) return e(this, t, -n.length), this._events[t] = null, this;for (var r, s = n.length; s--;) {\n        if (r = n[s], r === i || r.fn === i) {\n          e(this, t, -1), n.splice(s, 1);break;\n        }\n      }return this;\n    }, t.prototype.$emit = function (t) {\n      var e = \"string\" == typeof t;t = e ? t : t.name;var i = this._events[t],\n          n = e || !i;if (i) {\n        i = i.length > 1 ? d(i) : i;var r = e && i.some(function (t) {\n          return t._fromParent;\n        });r && (n = !1);for (var s = d(arguments, 1), o = 0, a = i.length; a > o; o++) {\n          var h = i[o],\n              l = h.apply(this, s);l !== !0 || r && !h._fromParent || (n = !0);\n        }\n      }return n;\n    }, t.prototype.$broadcast = function (t) {\n      var e = \"string\" == typeof t;if (t = e ? t : t.name, this._eventsCount[t]) {\n        var i = this.$children,\n            n = d(arguments);e && (n[0] = { name: t, source: this });for (var r = 0, s = i.length; s > r; r++) {\n          var o = i[r],\n              a = o.$emit.apply(o, n);a && o.$broadcast.apply(o, n);\n        }return this;\n      }\n    }, t.prototype.$dispatch = function (t) {\n      var e = this.$emit.apply(this, arguments);if (e) {\n        var i = this.$parent,\n            n = d(arguments);for (n[0] = { name: t, source: this }; i;) {\n          e = i.$emit.apply(i, n), i = e ? i.$parent : null;\n        }return this;\n      }\n    };var i = /^hook:/;\n  }function bi(t) {\n    function e() {\n      this._isAttached = !0, this._isReady = !0, this._callHook(\"ready\");\n    }t.prototype.$mount = function (t) {\n      return this._isCompiled ? void 0 : (t = L(t), t || (t = document.createElement(\"div\")), this._compile(t), this._initDOMHooks(), H(this.$el) ? (this._callHook(\"attached\"), e.call(this)) : this.$once(\"hook:attached\", e), this);\n    }, t.prototype.$destroy = function (t, e) {\n      this._destroy(t, e);\n    }, t.prototype.$compile = function (t, e, i, n) {\n      return De(t, this.$options, !0)(this, t, e, i, n);\n    };\n  }function wi(t) {\n    this._init(t);\n  }function Ci(t, e, i) {\n    return i = i ? parseInt(i, 10) : 0, e = o(e), \"number\" == typeof e ? t.slice(i, i + e) : t;\n  }function $i(t, e, i) {\n    if (t = Ks(t), null == e) return t;if (\"function\" == typeof e) return t.filter(e);e = (\"\" + e).toLowerCase();for (var n, r, s, o, a = \"in\" === i ? 3 : 2, h = Array.prototype.concat.apply([], d(arguments, a)), l = [], c = 0, u = t.length; u > c; c++) {\n      if (n = t[c], s = n && n.$value || n, o = h.length) {\n        for (; o--;) {\n          if (r = h[o], \"$key\" === r && xi(n.$key, e) || xi(jt(s, r), e)) {\n            l.push(n);break;\n          }\n        }\n      } else xi(n, e) && l.push(n);\n    }return l;\n  }function ki(t) {\n    function e(t, e, i) {\n      var r = n[i];return r && (\"$key\" !== r && (m(t) && \"$value\" in t && (t = t.$value), m(e) && \"$value\" in e && (e = e.$value)), t = m(t) ? jt(t, r) : t, e = m(e) ? jt(e, r) : e), t === e ? 0 : t > e ? s : -s;\n    }var _i2 = null,\n        n = void 0;t = Ks(t);var r = d(arguments, 1),\n        s = r[r.length - 1];\"number\" == typeof s ? (s = 0 > s ? -1 : 1, r = r.length > 1 ? r.slice(0, -1) : r) : s = 1;var o = r[0];return o ? (\"function\" == typeof o ? _i2 = function i(t, e) {\n      return o(t, e) * s;\n    } : (n = Array.prototype.concat.apply([], r), _i2 = function i(t, r, s) {\n      return s = s || 0, s >= n.length - 1 ? e(t, r, s) : e(t, r, s) || _i2(t, r, s + 1);\n    }), t.slice().sort(_i2)) : t;\n  }function xi(t, e) {\n    var i;if (g(t)) {\n      var n = Object.keys(t);for (i = n.length; i--;) {\n        if (xi(t[n[i]], e)) return !0;\n      }\n    } else if (Di(t)) {\n      for (i = t.length; i--;) {\n        if (xi(t[i], e)) return !0;\n      }\n    } else if (null != t) return t.toString().toLowerCase().indexOf(e) > -1;\n  }function Ai(i) {\n    function n(t) {\n      return new Function(\"return function \" + f(t) + \" (options) { this._init(options) }\")();\n    }i.options = { directives: bs, elementDirectives: Ys, filters: eo, transitions: {}, components: {}, partials: {}, replace: !0 }, i.util = In, i.config = An, i.set = t, i[\"delete\"] = e, i.nextTick = Yi, i.compiler = qs, i.FragmentFactory = se, i.internalDirectives = Hs, i.parsers = { path: ir, text: $n, template: Fr, directive: gn, expression: mr }, i.cid = 0;var r = 1;i.extend = function (t) {\n      t = t || {};var e = this,\n          i = 0 === e.cid;if (i && t._Ctor) return t._Ctor;var s = t.name || e.options.name,\n          o = n(s || \"VueComponent\");return o.prototype = Object.create(e.prototype), o.prototype.constructor = o, o.cid = r++, o.options = mt(e.options, t), o[\"super\"] = e, o.extend = e.extend, An._assetTypes.forEach(function (t) {\n        o[t] = e[t];\n      }), s && (o.options.components[s] = o), i && (t._Ctor = o), o;\n    }, i.use = function (t) {\n      if (!t.installed) {\n        var e = d(arguments, 1);return e.unshift(this), \"function\" == typeof t.install ? t.install.apply(t, e) : t.apply(null, e), t.installed = !0, this;\n      }\n    }, i.mixin = function (t) {\n      i.options = mt(i.options, t);\n    }, An._assetTypes.forEach(function (t) {\n      i[t] = function (e, n) {\n        return n ? (\"component\" === t && g(n) && (n.name || (n.name = e), n = i.extend(n)), this.options[t + \"s\"][e] = n, n) : this.options[t + \"s\"][e];\n      };\n    }), v(i.transition, Tn);\n  }var Oi = Object.prototype.hasOwnProperty,\n      Ti = /^\\s?(true|false|-?[\\d\\.]+|'[^']*'|\"[^\"]*\")\\s?$/,\n      Ni = /-(\\w)/g,\n      ji = /([a-z\\d])([A-Z])/g,\n      Ei = /(?:^|[-_\\/])(\\w)/g,\n      Si = Object.prototype.toString,\n      Fi = \"[object Object]\",\n      Di = Array.isArray,\n      Pi = \"__proto__\" in {},\n      Ri = \"undefined\" != typeof window && \"[object Object]\" !== Object.prototype.toString.call(window),\n      Li = Ri && window.__VUE_DEVTOOLS_GLOBAL_HOOK__,\n      Hi = Ri && window.navigator.userAgent.toLowerCase(),\n      Ii = Hi && Hi.indexOf(\"trident\") > 0,\n      Mi = Hi && Hi.indexOf(\"msie 9.0\") > 0,\n      Vi = Hi && Hi.indexOf(\"android\") > 0,\n      Bi = Hi && /(iphone|ipad|ipod|ios)/i.test(Hi),\n      Wi = Bi && Hi.match(/os ([\\d_]+)/),\n      zi = Wi && Wi[1].split(\"_\"),\n      Ui = zi && Number(zi[0]) >= 9 && Number(zi[1]) >= 3 && !window.indexedDB,\n      Ji = void 0,\n      qi = void 0,\n      Qi = void 0,\n      Gi = void 0;if (Ri && !Mi) {\n    var Zi = void 0 === window.ontransitionend && void 0 !== window.onwebkittransitionend,\n        Xi = void 0 === window.onanimationend && void 0 !== window.onwebkitanimationend;Ji = Zi ? \"WebkitTransition\" : \"transition\", qi = Zi ? \"webkitTransitionEnd\" : \"transitionend\", Qi = Xi ? \"WebkitAnimation\" : \"animation\", Gi = Xi ? \"webkitAnimationEnd\" : \"animationend\";\n  }var Yi = function () {\n    function t() {\n      n = !1;var t = i.slice(0);i = [];for (var e = 0; e < t.length; e++) {\n        t[e]();\n      }\n    }var e,\n        i = [],\n        n = !1;if (\"undefined\" == typeof MutationObserver || Ui) {\n      var r = Ri ? window : \"undefined\" != typeof global ? global : {};e = r.setImmediate || setTimeout;\n    } else {\n      var s = 1,\n          o = new MutationObserver(t),\n          a = document.createTextNode(s);o.observe(a, { characterData: !0 }), e = function e() {\n        s = (s + 1) % 2, a.data = s;\n      };\n    }return function (r, s) {\n      var o = s ? function () {\n        r.call(s);\n      } : r;i.push(o), n || (n = !0, e(t, 0));\n    };\n  }(),\n      Ki = void 0;\"undefined\" != typeof Set && Set.toString().match(/native code/) ? Ki = Set : (Ki = function Ki() {\n    this.set = Object.create(null);\n  }, Ki.prototype.has = function (t) {\n    return void 0 !== this.set[t];\n  }, Ki.prototype.add = function (t) {\n    this.set[t] = 1;\n  }, Ki.prototype.clear = function () {\n    this.set = Object.create(null);\n  });var tn = $.prototype;tn.put = function (t, e) {\n    var i,\n        n = this.get(t, !0);return n || (this.size === this.limit && (i = this.shift()), n = { key: t }, this._keymap[t] = n, this.tail ? (this.tail.newer = n, n.older = this.tail) : this.head = n, this.tail = n, this.size++), n.value = e, i;\n  }, tn.shift = function () {\n    var t = this.head;return t && (this.head = this.head.newer, this.head.older = void 0, t.newer = t.older = void 0, this._keymap[t.key] = void 0, this.size--), t;\n  }, tn.get = function (t, e) {\n    var i = this._keymap[t];if (void 0 !== i) return i === this.tail ? e ? i : i.value : (i.newer && (i === this.head && (this.head = i.newer), i.newer.older = i.older), i.older && (i.older.newer = i.newer), i.newer = void 0, i.older = this.tail, this.tail && (this.tail.newer = i), this.tail = i, e ? i : i.value);\n  };var en,\n      nn,\n      rn,\n      sn,\n      on,\n      an,\n      hn,\n      ln,\n      cn,\n      un,\n      fn,\n      pn,\n      dn = new $(1e3),\n      vn = /[^\\s'\"]+|'[^']*'|\"[^\"]*\"/g,\n      mn = /^in$|^-?\\d+/,\n      gn = Object.freeze({ parseDirective: A }),\n      _n = /[-.*+?^${}()|[\\]\\/\\\\]/g,\n      yn = void 0,\n      bn = void 0,\n      wn = void 0,\n      Cn = /[^|]\\|[^|]/,\n      $n = Object.freeze({ compileRegex: T, parseText: N, tokensToExp: j }),\n      kn = [\"{{\", \"}}\"],\n      xn = [\"{{{\", \"}}}\"],\n      An = Object.defineProperties({ debug: !1, silent: !1, async: !0, warnExpressionErrors: !0, devtools: !1, _delimitersChanged: !0, _assetTypes: [\"component\", \"directive\", \"elementDirective\", \"filter\", \"transition\", \"partial\"], _propBindingModes: { ONE_WAY: 0, TWO_WAY: 1, ONE_TIME: 2 }, _maxUpdateCount: 100 }, { delimiters: { get: function get() {\n        return kn;\n      }, set: function set(t) {\n        kn = t, T();\n      }, configurable: !0, enumerable: !0 }, unsafeDelimiters: { get: function get() {\n        return xn;\n      }, set: function set(t) {\n        xn = t, T();\n      }, configurable: !0, enumerable: !0 } }),\n      On = void 0,\n      Tn = Object.freeze({ appendWithTransition: F, beforeWithTransition: D, removeWithTransition: P, applyTransition: R }),\n      Nn = /^v-ref:/,\n      jn = /^(div|p|span|img|a|b|i|br|ul|ol|li|h1|h2|h3|h4|h5|h6|code|pre|table|th|td|tr|form|label|input|select|option|nav|article|section|header|footer)$/i,\n      En = /^(slot|partial|component)$/i,\n      Sn = An.optionMergeStrategies = Object.create(null);Sn.data = function (t, e, i) {\n    return i ? t || e ? function () {\n      var n = \"function\" == typeof e ? e.call(i) : e,\n          r = \"function\" == typeof t ? t.call(i) : void 0;return n ? ut(n, r) : r;\n    } : void 0 : e ? \"function\" != typeof e ? t : t ? function () {\n      return ut(e.call(this), t.call(this));\n    } : e : t;\n  }, Sn.el = function (t, e, i) {\n    if (i || !e || \"function\" == typeof e) {\n      var n = e || t;return i && \"function\" == typeof n ? n.call(i) : n;\n    }\n  }, Sn.init = Sn.created = Sn.ready = Sn.attached = Sn.detached = Sn.beforeCompile = Sn.compiled = Sn.beforeDestroy = Sn.destroyed = Sn.activate = function (t, e) {\n    return e ? t ? t.concat(e) : Di(e) ? e : [e] : t;\n  }, An._assetTypes.forEach(function (t) {\n    Sn[t + \"s\"] = ft;\n  }), Sn.watch = Sn.events = function (t, e) {\n    if (!e) return t;if (!t) return e;var i = {};v(i, t);for (var n in e) {\n      var r = i[n],\n          s = e[n];r && !Di(r) && (r = [r]), i[n] = r ? r.concat(s) : [s];\n    }return i;\n  }, Sn.props = Sn.methods = Sn.computed = function (t, e) {\n    if (!e) return t;if (!t) return e;var i = Object.create(null);return v(i, t), v(i, e), i;\n  };var Fn = function Fn(t, e) {\n    return void 0 === e ? t : e;\n  },\n      Dn = 0;_t.target = null, _t.prototype.addSub = function (t) {\n    this.subs.push(t);\n  }, _t.prototype.removeSub = function (t) {\n    this.subs.$remove(t);\n  }, _t.prototype.depend = function () {\n    _t.target.addDep(this);\n  }, _t.prototype.notify = function () {\n    for (var t = d(this.subs), e = 0, i = t.length; i > e; e++) {\n      t[e].update();\n    }\n  };var Pn = Array.prototype,\n      Rn = Object.create(Pn);[\"push\", \"pop\", \"shift\", \"unshift\", \"splice\", \"sort\", \"reverse\"].forEach(function (t) {\n    var e = Pn[t];_(Rn, t, function () {\n      for (var i = arguments.length, n = new Array(i); i--;) {\n        n[i] = arguments[i];\n      }var r,\n          s = e.apply(this, n),\n          o = this.__ob__;switch (t) {case \"push\":\n          r = n;break;case \"unshift\":\n          r = n;break;case \"splice\":\n          r = n.slice(2);}return r && o.observeArray(r), o.dep.notify(), s;\n    });\n  }), _(Pn, \"$set\", function (t, e) {\n    return t >= this.length && (this.length = Number(t) + 1), this.splice(t, 1, e)[0];\n  }), _(Pn, \"$remove\", function (t) {\n    if (this.length) {\n      var e = b(this, t);return e > -1 ? this.splice(e, 1) : void 0;\n    }\n  });var Ln = Object.getOwnPropertyNames(Rn),\n      Hn = !0;bt.prototype.walk = function (t) {\n    for (var e = Object.keys(t), i = 0, n = e.length; n > i; i++) {\n      this.convert(e[i], t[e[i]]);\n    }\n  }, bt.prototype.observeArray = function (t) {\n    for (var e = 0, i = t.length; i > e; e++) {\n      $t(t[e]);\n    }\n  }, bt.prototype.convert = function (t, e) {\n    kt(this.value, t, e);\n  }, bt.prototype.addVm = function (t) {\n    (this.vms || (this.vms = [])).push(t);\n  }, bt.prototype.removeVm = function (t) {\n    this.vms.$remove(t);\n  };var In = Object.freeze({ defineReactive: kt, set: t, del: e, hasOwn: i, isLiteral: n, isReserved: r, _toString: s, toNumber: o, toBoolean: a, stripQuotes: h, camelize: l, hyphenate: u, classify: f, bind: p, toArray: d, extend: v, isObject: m, isPlainObject: g, def: _, debounce: y, indexOf: b, cancellable: w, looseEqual: C, isArray: Di, hasProto: Pi, inBrowser: Ri, devtools: Li, isIE: Ii, isIE9: Mi, isAndroid: Vi, isIos: Bi, iosVersionMatch: Wi, iosVersion: zi, hasMutationObserverBug: Ui, get transitionProp() {\n      return Ji;\n    }, get transitionEndEvent() {\n      return qi;\n    }, get animationProp() {\n      return Qi;\n    }, get animationEndEvent() {\n      return Gi;\n    }, nextTick: Yi, get _Set() {\n      return Ki;\n    }, query: L, inDoc: H, getAttr: I, getBindAttr: M, hasBindAttr: V, before: B, after: W, remove: z, prepend: U, replace: J, on: q, off: Q, setClass: Z, addClass: X, removeClass: Y, extractContent: K, trimNode: tt, isTemplate: it, createAnchor: nt, findRef: rt, mapNodeRange: st, removeNodeRange: ot, isFragment: at, getOuterHTML: ht, mergeOptions: mt, resolveAsset: gt, checkComponentAttr: lt, commonTagRE: jn, reservedTagRE: En, warn: On }),\n      Mn = 0,\n      Vn = new $(1e3),\n      Bn = 0,\n      Wn = 1,\n      zn = 2,\n      Un = 3,\n      Jn = 0,\n      qn = 1,\n      Qn = 2,\n      Gn = 3,\n      Zn = 4,\n      Xn = 5,\n      Yn = 6,\n      Kn = 7,\n      tr = 8,\n      er = [];er[Jn] = { ws: [Jn], ident: [Gn, Bn], \"[\": [Zn], eof: [Kn] }, er[qn] = { ws: [qn], \".\": [Qn], \"[\": [Zn], eof: [Kn] }, er[Qn] = { ws: [Qn], ident: [Gn, Bn] }, er[Gn] = { ident: [Gn, Bn], 0: [Gn, Bn], number: [Gn, Bn], ws: [qn, Wn], \".\": [Qn, Wn], \"[\": [Zn, Wn], eof: [Kn, Wn] }, er[Zn] = { \"'\": [Xn, Bn], '\"': [Yn, Bn], \"[\": [Zn, zn], \"]\": [qn, Un], eof: tr, \"else\": [Zn, Bn] }, er[Xn] = { \"'\": [Zn, Bn], eof: tr, \"else\": [Xn, Bn] }, er[Yn] = { '\"': [Zn, Bn], eof: tr, \"else\": [Yn, Bn] };var ir = Object.freeze({ parsePath: Nt, getPath: jt, setPath: Et }),\n      nr = new $(1e3),\n      rr = \"Math,Date,this,true,false,null,undefined,Infinity,NaN,isNaN,isFinite,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,parseInt,parseFloat\",\n      sr = new RegExp(\"^(\" + rr.replace(/,/g, \"\\\\b|\") + \"\\\\b)\"),\n      or = \"break,case,class,catch,const,continue,debugger,default,delete,do,else,export,extends,finally,for,function,if,import,in,instanceof,let,return,super,switch,throw,try,var,while,with,yield,enum,await,implements,package,protected,static,interface,private,public\",\n      ar = new RegExp(\"^(\" + or.replace(/,/g, \"\\\\b|\") + \"\\\\b)\"),\n      hr = /\\s/g,\n      lr = /\\n/g,\n      cr = /[\\{,]\\s*[\\w\\$_]+\\s*:|('(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`)|new |typeof |void /g,\n      ur = /\"(\\d+)\"/g,\n      fr = /^[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['.*?'\\]|\\[\".*?\"\\]|\\[\\d+\\]|\\[[A-Za-z_$][\\w$]*\\])*$/,\n      pr = /[^\\w$\\.](?:[A-Za-z_$][\\w$]*)/g,\n      dr = /^(?:true|false|null|undefined|Infinity|NaN)$/,\n      vr = [],\n      mr = Object.freeze({ parseExpression: It, isSimplePath: Mt }),\n      gr = [],\n      _r = [],\n      yr = {},\n      br = {},\n      wr = !1,\n      Cr = 0;Ut.prototype.get = function () {\n    this.beforeGet();var t,\n        e = this.scope || this.vm;try {\n      t = this.getter.call(e, e);\n    } catch (i) {}return this.deep && Jt(t), this.preProcess && (t = this.preProcess(t)), this.filters && (t = e._applyFilters(t, null, this.filters, !1)), this.postProcess && (t = this.postProcess(t)), this.afterGet(), t;\n  }, Ut.prototype.set = function (t) {\n    var e = this.scope || this.vm;this.filters && (t = e._applyFilters(t, this.value, this.filters, !0));try {\n      this.setter.call(e, e, t);\n    } catch (i) {}var n = e.$forContext;if (n && n.alias === this.expression) {\n      if (n.filters) return;n._withLock(function () {\n        e.$key ? n.rawValue[e.$key] = t : n.rawValue.$set(e.$index, t);\n      });\n    }\n  }, Ut.prototype.beforeGet = function () {\n    _t.target = this;\n  }, Ut.prototype.addDep = function (t) {\n    var e = t.id;this.newDepIds.has(e) || (this.newDepIds.add(e), this.newDeps.push(t), this.depIds.has(e) || t.addSub(this));\n  }, Ut.prototype.afterGet = function () {\n    _t.target = null;for (var t = this.deps.length; t--;) {\n      var e = this.deps[t];this.newDepIds.has(e.id) || e.removeSub(this);\n    }var i = this.depIds;this.depIds = this.newDepIds, this.newDepIds = i, this.newDepIds.clear(), i = this.deps, this.deps = this.newDeps, this.newDeps = i, this.newDeps.length = 0;\n  }, Ut.prototype.update = function (t) {\n    this.lazy ? this.dirty = !0 : this.sync || !An.async ? this.run() : (this.shallow = this.queued ? t ? this.shallow : !1 : !!t, this.queued = !0, zt(this));\n  }, Ut.prototype.run = function () {\n    if (this.active) {\n      var t = this.get();if (t !== this.value || (m(t) || this.deep) && !this.shallow) {\n        var e = this.value;this.value = t;this.prevError;this.cb.call(this.vm, t, e);\n      }this.queued = this.shallow = !1;\n    }\n  }, Ut.prototype.evaluate = function () {\n    var t = _t.target;this.value = this.get(), this.dirty = !1, _t.target = t;\n  }, Ut.prototype.depend = function () {\n    for (var t = this.deps.length; t--;) {\n      this.deps[t].depend();\n    }\n  }, Ut.prototype.teardown = function () {\n    if (this.active) {\n      this.vm._isBeingDestroyed || this.vm._vForRemoving || this.vm._watchers.$remove(this);for (var t = this.deps.length; t--;) {\n        this.deps[t].removeSub(this);\n      }this.active = !1, this.vm = this.cb = this.value = null;\n    }\n  };var $r = new Ki(),\n      kr = { bind: function bind() {\n      this.attr = 3 === this.el.nodeType ? \"data\" : \"textContent\";\n    }, update: function update(t) {\n      this.el[this.attr] = s(t);\n    } },\n      xr = new $(1e3),\n      Ar = new $(1e3),\n      Or = { efault: [0, \"\", \"\"], legend: [1, \"<fieldset>\", \"</fieldset>\"], tr: [2, \"<table><tbody>\", \"</tbody></table>\"], col: [2, \"<table><tbody></tbody><colgroup>\", \"</colgroup></table>\"] };Or.td = Or.th = [3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"], Or.option = Or.optgroup = [1, '<select multiple=\"multiple\">', \"</select>\"], Or.thead = Or.tbody = Or.colgroup = Or.caption = Or.tfoot = [1, \"<table>\", \"</table>\"], Or.g = Or.defs = Or.symbol = Or.use = Or.image = Or.text = Or.circle = Or.ellipse = Or.line = Or.path = Or.polygon = Or.polyline = Or.rect = [1, '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:ev=\"http://www.w3.org/2001/xml-events\"version=\"1.1\">', \"</svg>\"];var Tr = /<([\\w:-]+)/,\n      Nr = /&#?\\w+?;/,\n      jr = /<!--/,\n      Er = function () {\n    if (Ri) {\n      var t = document.createElement(\"div\");return t.innerHTML = \"<template>1</template>\", !t.cloneNode(!0).firstChild.innerHTML;\n    }return !1;\n  }(),\n      Sr = function () {\n    if (Ri) {\n      var t = document.createElement(\"textarea\");return t.placeholder = \"t\", \"t\" === t.cloneNode(!0).value;\n    }return !1;\n  }(),\n      Fr = Object.freeze({ cloneNode: Zt, parseTemplate: Xt }),\n      Dr = { bind: function bind() {\n      8 === this.el.nodeType && (this.nodes = [], this.anchor = nt(\"v-html\"), J(this.el, this.anchor));\n    }, update: function update(t) {\n      t = s(t), this.nodes ? this.swap(t) : this.el.innerHTML = t;\n    }, swap: function swap(t) {\n      for (var e = this.nodes.length; e--;) {\n        z(this.nodes[e]);\n      }var i = Xt(t, !0, !0);this.nodes = d(i.childNodes), B(i, this.anchor);\n    } };Yt.prototype.callHook = function (t) {\n    var e, i;for (e = 0, i = this.childFrags.length; i > e; e++) {\n      this.childFrags[e].callHook(t);\n    }for (e = 0, i = this.children.length; i > e; e++) {\n      t(this.children[e]);\n    }\n  }, Yt.prototype.beforeRemove = function () {\n    var t, e;for (t = 0, e = this.childFrags.length; e > t; t++) {\n      this.childFrags[t].beforeRemove(!1);\n    }for (t = 0, e = this.children.length; e > t; t++) {\n      this.children[t].$destroy(!1, !0);\n    }var i = this.unlink.dirs;for (t = 0, e = i.length; e > t; t++) {\n      i[t]._watcher && i[t]._watcher.teardown();\n    }\n  }, Yt.prototype.destroy = function () {\n    this.parentFrag && this.parentFrag.childFrags.$remove(this), this.node.__v_frag = null, this.unlink();\n  };var Pr = new $(5e3);se.prototype.create = function (t, e, i) {\n    var n = Zt(this.template);return new Yt(this.linker, this.vm, n, t, e, i);\n  };var Rr = 700,\n      Lr = 800,\n      Hr = 850,\n      Ir = 1100,\n      Mr = 1500,\n      Vr = 1500,\n      Br = 1750,\n      Wr = 2100,\n      zr = 2200,\n      Ur = 2300,\n      Jr = 0,\n      qr = { priority: zr, terminal: !0, params: [\"track-by\", \"stagger\", \"enter-stagger\", \"leave-stagger\"], bind: function bind() {\n      var t = this.expression.match(/(.*) (?:in|of) (.*)/);if (t) {\n        var e = t[1].match(/\\((.*),(.*)\\)/);e ? (this.iterator = e[1].trim(), this.alias = e[2].trim()) : this.alias = t[1].trim(), this.expression = t[2];\n      }if (this.alias) {\n        this.id = \"__v-for__\" + ++Jr;var i = this.el.tagName;this.isOption = (\"OPTION\" === i || \"OPTGROUP\" === i) && \"SELECT\" === this.el.parentNode.tagName, this.start = nt(\"v-for-start\"), this.end = nt(\"v-for-end\"), J(this.el, this.end), B(this.start, this.end), this.cache = Object.create(null), this.factory = new se(this.vm, this.el);\n      }\n    }, update: function update(t) {\n      this.diff(t), this.updateRef(), this.updateModel();\n    }, diff: function diff(t) {\n      var e,\n          n,\n          r,\n          s,\n          o,\n          a,\n          h = t[0],\n          l = this.fromObject = m(h) && i(h, \"$key\") && i(h, \"$value\"),\n          c = this.params.trackBy,\n          u = this.frags,\n          f = this.frags = new Array(t.length),\n          p = this.alias,\n          d = this.iterator,\n          v = this.start,\n          g = this.end,\n          _ = H(v),\n          y = !u;for (e = 0, n = t.length; n > e; e++) {\n        h = t[e], s = l ? h.$key : null, o = l ? h.$value : h, a = !m(o), r = !y && this.getCachedFrag(o, e, s), r ? (r.reused = !0, r.scope.$index = e, s && (r.scope.$key = s), d && (r.scope[d] = null !== s ? s : e), (c || l || a) && yt(function () {\n          r.scope[p] = o;\n        })) : (r = this.create(o, p, e, s), r.fresh = !y), f[e] = r, y && r.before(g);\n      }if (!y) {\n        var b = 0,\n            w = u.length - f.length;for (this.vm._vForRemoving = !0, e = 0, n = u.length; n > e; e++) {\n          r = u[e], r.reused || (this.deleteCachedFrag(r), this.remove(r, b++, w, _));\n        }this.vm._vForRemoving = !1, b && (this.vm._watchers = this.vm._watchers.filter(function (t) {\n          return t.active;\n        }));var C,\n            $,\n            k,\n            x = 0;for (e = 0, n = f.length; n > e; e++) {\n          r = f[e], C = f[e - 1], $ = C ? C.staggerCb ? C.staggerAnchor : C.end || C.node : v, r.reused && !r.staggerCb ? (k = oe(r, v, this.id), k === C || k && oe(k, v, this.id) === C || this.move(r, $)) : this.insert(r, x++, $, _), r.reused = r.fresh = !1;\n        }\n      }\n    }, create: function create(t, e, i, n) {\n      var r = this._host,\n          s = this._scope || this.vm,\n          o = Object.create(s);o.$refs = Object.create(s.$refs), o.$els = Object.create(s.$els), o.$parent = s, o.$forContext = this, yt(function () {\n        kt(o, e, t);\n      }), kt(o, \"$index\", i), n ? kt(o, \"$key\", n) : o.$key && _(o, \"$key\", null), this.iterator && kt(o, this.iterator, null !== n ? n : i);var a = this.factory.create(r, o, this._frag);return a.forId = this.id, this.cacheFrag(t, a, i, n), a;\n    }, updateRef: function updateRef() {\n      var t = this.descriptor.ref;if (t) {\n        var e,\n            i = (this._scope || this.vm).$refs;this.fromObject ? (e = {}, this.frags.forEach(function (t) {\n          e[t.scope.$key] = ae(t);\n        })) : e = this.frags.map(ae), i[t] = e;\n      }\n    }, updateModel: function updateModel() {\n      if (this.isOption) {\n        var t = this.start.parentNode,\n            e = t && t.__v_model;e && e.forceUpdate();\n      }\n    }, insert: function insert(t, e, i, n) {\n      t.staggerCb && (t.staggerCb.cancel(), t.staggerCb = null);var r = this.getStagger(t, e, null, \"enter\");if (n && r) {\n        var s = t.staggerAnchor;s || (s = t.staggerAnchor = nt(\"stagger-anchor\"), s.__v_frag = t), W(s, i);var o = t.staggerCb = w(function () {\n          t.staggerCb = null, t.before(s), z(s);\n        });setTimeout(o, r);\n      } else {\n        var a = i.nextSibling;a || (W(this.end, i), a = this.end), t.before(a);\n      }\n    }, remove: function remove(t, e, i, n) {\n      if (t.staggerCb) return t.staggerCb.cancel(), void (t.staggerCb = null);var r = this.getStagger(t, e, i, \"leave\");if (n && r) {\n        var s = t.staggerCb = w(function () {\n          t.staggerCb = null, t.remove();\n        });setTimeout(s, r);\n      } else t.remove();\n    }, move: function move(t, e) {\n      e.nextSibling || this.end.parentNode.appendChild(this.end), t.before(e.nextSibling, !1);\n    }, cacheFrag: function cacheFrag(t, e, n, r) {\n      var s,\n          o = this.params.trackBy,\n          a = this.cache,\n          h = !m(t);r || o || h ? (s = le(n, r, t, o), a[s] || (a[s] = e)) : (s = this.id, i(t, s) ? null === t[s] && (t[s] = e) : Object.isExtensible(t) && _(t, s, e)), e.raw = t;\n    }, getCachedFrag: function getCachedFrag(t, e, i) {\n      var n,\n          r = this.params.trackBy,\n          s = !m(t);if (i || r || s) {\n        var o = le(e, i, t, r);n = this.cache[o];\n      } else n = t[this.id];return n && (n.reused || n.fresh), n;\n    }, deleteCachedFrag: function deleteCachedFrag(t) {\n      var e = t.raw,\n          n = this.params.trackBy,\n          r = t.scope,\n          s = r.$index,\n          o = i(r, \"$key\") && r.$key,\n          a = !m(e);if (n || o || a) {\n        var h = le(s, o, e, n);this.cache[h] = null;\n      } else e[this.id] = null, t.raw = null;\n    }, getStagger: function getStagger(t, e, i, n) {\n      n += \"Stagger\";var r = t.node.__v_trans,\n          s = r && r.hooks,\n          o = s && (s[n] || s.stagger);return o ? o.call(t, e, i) : e * parseInt(this.params[n] || this.params.stagger, 10);\n    }, _preProcess: function _preProcess(t) {\n      return this.rawValue = t, t;\n    }, _postProcess: function _postProcess(t) {\n      if (Di(t)) return t;if (g(t)) {\n        for (var e, i = Object.keys(t), n = i.length, r = new Array(n); n--;) {\n          e = i[n], r[n] = { $key: e, $value: t[e] };\n        }return r;\n      }return \"number\" != typeof t || isNaN(t) || (t = he(t)), t || [];\n    }, unbind: function unbind() {\n      if (this.descriptor.ref && ((this._scope || this.vm).$refs[this.descriptor.ref] = null), this.frags) for (var t, e = this.frags.length; e--;) {\n        t = this.frags[e], this.deleteCachedFrag(t), t.destroy();\n      }\n    } },\n      Qr = { priority: Wr, terminal: !0, bind: function bind() {\n      var t = this.el;if (t.__vue__) this.invalid = !0;else {\n        var e = t.nextElementSibling;e && null !== I(e, \"v-else\") && (z(e), this.elseEl = e), this.anchor = nt(\"v-if\"), J(t, this.anchor);\n      }\n    }, update: function update(t) {\n      this.invalid || (t ? this.frag || this.insert() : this.remove());\n    }, insert: function insert() {\n      this.elseFrag && (this.elseFrag.remove(), this.elseFrag = null), this.factory || (this.factory = new se(this.vm, this.el)), this.frag = this.factory.create(this._host, this._scope, this._frag), this.frag.before(this.anchor);\n    }, remove: function remove() {\n      this.frag && (this.frag.remove(), this.frag = null), this.elseEl && !this.elseFrag && (this.elseFactory || (this.elseFactory = new se(this.elseEl._context || this.vm, this.elseEl)), this.elseFrag = this.elseFactory.create(this._host, this._scope, this._frag), this.elseFrag.before(this.anchor));\n    }, unbind: function unbind() {\n      this.frag && this.frag.destroy(), this.elseFrag && this.elseFrag.destroy();\n    } },\n      Gr = { bind: function bind() {\n      var t = this.el.nextElementSibling;t && null !== I(t, \"v-else\") && (this.elseEl = t);\n    }, update: function update(t) {\n      this.apply(this.el, t), this.elseEl && this.apply(this.elseEl, !t);\n    }, apply: function apply(t, e) {\n      function i() {\n        t.style.display = e ? \"\" : \"none\";\n      }H(t) ? R(t, e ? 1 : -1, i, this.vm) : i();\n    } },\n      Zr = { bind: function bind() {\n      var t = this,\n          e = this.el,\n          i = \"range\" === e.type,\n          n = this.params.lazy,\n          r = this.params.number,\n          s = this.params.debounce,\n          a = !1;if (Vi || i || (this.on(\"compositionstart\", function () {\n        a = !0;\n      }), this.on(\"compositionend\", function () {\n        a = !1, n || t.listener();\n      })), this.focused = !1, i || n || (this.on(\"focus\", function () {\n        t.focused = !0;\n      }), this.on(\"blur\", function () {\n        t.focused = !1, t._frag && !t._frag.inserted || t.rawListener();\n      })), this.listener = this.rawListener = function () {\n        if (!a && t._bound) {\n          var n = r || i ? o(e.value) : e.value;t.set(n), Yi(function () {\n            t._bound && !t.focused && t.update(t._watcher.value);\n          });\n        }\n      }, s && (this.listener = y(this.listener, s)), this.hasjQuery = \"function\" == typeof jQuery, this.hasjQuery) {\n        var h = jQuery.fn.on ? \"on\" : \"bind\";jQuery(e)[h](\"change\", this.rawListener), n || jQuery(e)[h](\"input\", this.listener);\n      } else this.on(\"change\", this.rawListener), n || this.on(\"input\", this.listener);!n && Mi && (this.on(\"cut\", function () {\n        Yi(t.listener);\n      }), this.on(\"keyup\", function (e) {\n        46 !== e.keyCode && 8 !== e.keyCode || t.listener();\n      })), (e.hasAttribute(\"value\") || \"TEXTAREA\" === e.tagName && e.value.trim()) && (this.afterBind = this.listener);\n    }, update: function update(t) {\n      t = s(t), t !== this.el.value && (this.el.value = t);\n    }, unbind: function unbind() {\n      var t = this.el;if (this.hasjQuery) {\n        var e = jQuery.fn.off ? \"off\" : \"unbind\";jQuery(t)[e](\"change\", this.listener), jQuery(t)[e](\"input\", this.listener);\n      }\n    } },\n      Xr = { bind: function bind() {\n      var t = this,\n          e = this.el;this.getValue = function () {\n        if (e.hasOwnProperty(\"_value\")) return e._value;var i = e.value;return t.params.number && (i = o(i)), i;\n      }, this.listener = function () {\n        t.set(t.getValue());\n      }, this.on(\"change\", this.listener), e.hasAttribute(\"checked\") && (this.afterBind = this.listener);\n    }, update: function update(t) {\n      this.el.checked = C(t, this.getValue());\n    } },\n      Yr = { bind: function bind() {\n      var t = this,\n          e = this,\n          i = this.el;this.forceUpdate = function () {\n        e._watcher && e.update(e._watcher.get());\n      };var n = this.multiple = i.hasAttribute(\"multiple\");this.listener = function () {\n        var t = ce(i, n);t = e.params.number ? Di(t) ? t.map(o) : o(t) : t, e.set(t);\n      }, this.on(\"change\", this.listener);var r = ce(i, n, !0);(n && r.length || !n && null !== r) && (this.afterBind = this.listener), this.vm.$on(\"hook:attached\", function () {\n        Yi(t.forceUpdate);\n      }), H(i) || Yi(this.forceUpdate);\n    }, update: function update(t) {\n      var e = this.el;e.selectedIndex = -1;for (var i, n, r = this.multiple && Di(t), s = e.options, o = s.length; o--;) {\n        i = s[o], n = i.hasOwnProperty(\"_value\") ? i._value : i.value, i.selected = r ? ue(t, n) > -1 : C(t, n);\n      }\n    }, unbind: function unbind() {\n      this.vm.$off(\"hook:attached\", this.forceUpdate);\n    } },\n      Kr = { bind: function bind() {\n      function t() {\n        var t = i.checked;return t && i.hasOwnProperty(\"_trueValue\") ? i._trueValue : !t && i.hasOwnProperty(\"_falseValue\") ? i._falseValue : t;\n      }var e = this,\n          i = this.el;this.getValue = function () {\n        return i.hasOwnProperty(\"_value\") ? i._value : e.params.number ? o(i.value) : i.value;\n      }, this.listener = function () {\n        var n = e._watcher.value;if (Di(n)) {\n          var r = e.getValue();i.checked ? b(n, r) < 0 && n.push(r) : n.$remove(r);\n        } else e.set(t());\n      }, this.on(\"change\", this.listener), i.hasAttribute(\"checked\") && (this.afterBind = this.listener);\n    }, update: function update(t) {\n      var e = this.el;Di(t) ? e.checked = b(t, this.getValue()) > -1 : e.hasOwnProperty(\"_trueValue\") ? e.checked = C(t, e._trueValue) : e.checked = !!t;\n    } },\n      ts = { text: Zr, radio: Xr, select: Yr, checkbox: Kr },\n      es = { priority: Lr, twoWay: !0, handlers: ts, params: [\"lazy\", \"number\", \"debounce\"], bind: function bind() {\n      this.checkFilters(), this.hasRead && !this.hasWrite;var t,\n          e = this.el,\n          i = e.tagName;if (\"INPUT\" === i) t = ts[e.type] || ts.text;else if (\"SELECT\" === i) t = ts.select;else {\n        if (\"TEXTAREA\" !== i) return;t = ts.text;\n      }e.__v_model = this, t.bind.call(this), this.update = t.update, this._unbind = t.unbind;\n    }, checkFilters: function checkFilters() {\n      var t = this.filters;if (t) for (var e = t.length; e--;) {\n        var i = gt(this.vm.$options, \"filters\", t[e].name);(\"function\" == typeof i || i.read) && (this.hasRead = !0), i.write && (this.hasWrite = !0);\n      }\n    }, unbind: function unbind() {\n      this.el.__v_model = null, this._unbind && this._unbind();\n    } },\n      is = { esc: 27, tab: 9, enter: 13, space: 32, \"delete\": [8, 46], up: 38, left: 37, right: 39, down: 40 },\n      ns = { priority: Rr, acceptStatement: !0, keyCodes: is, bind: function bind() {\n      if (\"IFRAME\" === this.el.tagName && \"load\" !== this.arg) {\n        var t = this;this.iframeBind = function () {\n          q(t.el.contentWindow, t.arg, t.handler, t.modifiers.capture);\n        }, this.on(\"load\", this.iframeBind);\n      }\n    }, update: function update(t) {\n      if (this.descriptor.raw || (t = function t() {}), \"function\" == typeof t) {\n        this.modifiers.stop && (t = pe(t)), this.modifiers.prevent && (t = de(t)), this.modifiers.self && (t = ve(t));var e = Object.keys(this.modifiers).filter(function (t) {\n          return \"stop\" !== t && \"prevent\" !== t && \"self\" !== t && \"capture\" !== t;\n        });e.length && (t = fe(t, e)), this.reset(), this.handler = t, this.iframeBind ? this.iframeBind() : q(this.el, this.arg, this.handler, this.modifiers.capture);\n      }\n    }, reset: function reset() {\n      var t = this.iframeBind ? this.el.contentWindow : this.el;this.handler && Q(t, this.arg, this.handler);\n    }, unbind: function unbind() {\n      this.reset();\n    } },\n      rs = [\"-webkit-\", \"-moz-\", \"-ms-\"],\n      ss = [\"Webkit\", \"Moz\", \"ms\"],\n      os = /!important;?$/,\n      as = Object.create(null),\n      hs = null,\n      ls = { deep: !0, update: function update(t) {\n      \"string\" == typeof t ? this.el.style.cssText = t : Di(t) ? this.handleObject(t.reduce(v, {})) : this.handleObject(t || {});\n    }, handleObject: function handleObject(t) {\n      var e,\n          i,\n          n = this.cache || (this.cache = {});for (e in n) {\n        e in t || (this.handleSingle(e, null), delete n[e]);\n      }for (e in t) {\n        i = t[e], i !== n[e] && (n[e] = i, this.handleSingle(e, i));\n      }\n    }, handleSingle: function handleSingle(t, e) {\n      if (t = me(t)) if (null != e && (e += \"\"), e) {\n        var i = os.test(e) ? \"important\" : \"\";i ? (e = e.replace(os, \"\").trim(), this.el.style.setProperty(t.kebab, e, i)) : this.el.style[t.camel] = e;\n      } else this.el.style[t.camel] = \"\";\n    } },\n      cs = \"http://www.w3.org/1999/xlink\",\n      us = /^xlink:/,\n      fs = /^v-|^:|^@|^(?:is|transition|transition-mode|debounce|track-by|stagger|enter-stagger|leave-stagger)$/,\n      ps = /^(?:value|checked|selected|muted)$/,\n      ds = /^(?:draggable|contenteditable|spellcheck)$/,\n      vs = { value: \"_value\", \"true-value\": \"_trueValue\", \"false-value\": \"_falseValue\" },\n      ms = { priority: Hr, bind: function bind() {\n      var t = this.arg,\n          e = this.el.tagName;t || (this.deep = !0);var i = this.descriptor,\n          n = i.interp;n && (i.hasOneTime && (this.expression = j(n, this._scope || this.vm)), (fs.test(t) || \"name\" === t && (\"PARTIAL\" === e || \"SLOT\" === e)) && (this.el.removeAttribute(t), this.invalid = !0));\n    }, update: function update(t) {\n      if (!this.invalid) {\n        var e = this.arg;this.arg ? this.handleSingle(e, t) : this.handleObject(t || {});\n      }\n    }, handleObject: ls.handleObject, handleSingle: function handleSingle(t, e) {\n      var i = this.el,\n          n = this.descriptor.interp;if (this.modifiers.camel && (t = l(t)), !n && ps.test(t) && t in i) {\n        var r = \"value\" === t && null == e ? \"\" : e;i[t] !== r && (i[t] = r);\n      }var s = vs[t];if (!n && s) {\n        i[s] = e;var o = i.__v_model;o && o.listener();\n      }return \"value\" === t && \"TEXTAREA\" === i.tagName ? void i.removeAttribute(t) : void (ds.test(t) ? i.setAttribute(t, e ? \"true\" : \"false\") : null != e && e !== !1 ? \"class\" === t ? (i.__v_trans && (e += \" \" + i.__v_trans.id + \"-transition\"), Z(i, e)) : us.test(t) ? i.setAttributeNS(cs, t, e === !0 ? \"\" : e) : i.setAttribute(t, e === !0 ? \"\" : e) : i.removeAttribute(t));\n    } },\n      gs = { priority: Mr, bind: function bind() {\n      if (this.arg) {\n        var t = this.id = l(this.arg),\n            e = (this._scope || this.vm).$els;i(e, t) ? e[t] = this.el : kt(e, t, this.el);\n      }\n    }, unbind: function unbind() {\n      var t = (this._scope || this.vm).$els;t[this.id] === this.el && (t[this.id] = null);\n    } },\n      _s = { bind: function bind() {} },\n      ys = { bind: function bind() {\n      var t = this.el;this.vm.$once(\"pre-hook:compiled\", function () {\n        t.removeAttribute(\"v-cloak\");\n      });\n    } },\n      bs = { text: kr, html: Dr, \"for\": qr, \"if\": Qr, show: Gr, model: es, on: ns, bind: ms, el: gs, ref: _s, cloak: ys },\n      ws = { deep: !0, update: function update(t) {\n      t ? \"string\" == typeof t ? this.setClass(t.trim().split(/\\s+/)) : this.setClass(_e(t)) : this.cleanup();\n    }, setClass: function setClass(t) {\n      this.cleanup(t);for (var e = 0, i = t.length; i > e; e++) {\n        var n = t[e];n && ye(this.el, n, X);\n      }this.prevKeys = t;\n    }, cleanup: function cleanup(t) {\n      var e = this.prevKeys;if (e) for (var i = e.length; i--;) {\n        var n = e[i];(!t || t.indexOf(n) < 0) && ye(this.el, n, Y);\n      }\n    } },\n      Cs = { priority: Vr, params: [\"keep-alive\", \"transition-mode\", \"inline-template\"], bind: function bind() {\n      this.el.__vue__ || (this.keepAlive = this.params.keepAlive, this.keepAlive && (this.cache = {}), this.params.inlineTemplate && (this.inlineTemplate = K(this.el, !0)), this.pendingComponentCb = this.Component = null, this.pendingRemovals = 0, this.pendingRemovalCb = null, this.anchor = nt(\"v-component\"), J(this.el, this.anchor), this.el.removeAttribute(\"is\"), this.el.removeAttribute(\":is\"), this.descriptor.ref && this.el.removeAttribute(\"v-ref:\" + u(this.descriptor.ref)), this.literal && this.setComponent(this.expression));\n    }, update: function update(t) {\n      this.literal || this.setComponent(t);\n    }, setComponent: function setComponent(t, e) {\n      if (this.invalidatePending(), t) {\n        var i = this;this.resolveComponent(t, function () {\n          i.mountComponent(e);\n        });\n      } else this.unbuild(!0), this.remove(this.childVM, e), this.childVM = null;\n    }, resolveComponent: function resolveComponent(t, e) {\n      var i = this;this.pendingComponentCb = w(function (n) {\n        i.ComponentName = n.options.name || (\"string\" == typeof t ? t : null), i.Component = n, e();\n      }), this.vm._resolveComponent(t, this.pendingComponentCb);\n    }, mountComponent: function mountComponent(t) {\n      this.unbuild(!0);var e = this,\n          i = this.Component.options.activate,\n          n = this.getCached(),\n          r = this.build();i && !n ? (this.waitingFor = r, be(i, r, function () {\n        e.waitingFor === r && (e.waitingFor = null, e.transition(r, t));\n      })) : (n && r._updateRef(), this.transition(r, t));\n    }, invalidatePending: function invalidatePending() {\n      this.pendingComponentCb && (this.pendingComponentCb.cancel(), this.pendingComponentCb = null);\n    }, build: function build(t) {\n      var e = this.getCached();if (e) return e;if (this.Component) {\n        var i = { name: this.ComponentName, el: Zt(this.el), template: this.inlineTemplate, parent: this._host || this.vm, _linkerCachable: !this.inlineTemplate, _ref: this.descriptor.ref, _asComponent: !0, _isRouterView: this._isRouterView, _context: this.vm, _scope: this._scope, _frag: this._frag };t && v(i, t);var n = new this.Component(i);return this.keepAlive && (this.cache[this.Component.cid] = n), n;\n      }\n    }, getCached: function getCached() {\n      return this.keepAlive && this.cache[this.Component.cid];\n    }, unbuild: function unbuild(t) {\n      this.waitingFor && (this.keepAlive || this.waitingFor.$destroy(), this.waitingFor = null);var e = this.childVM;return !e || this.keepAlive ? void (e && (e._inactive = !0, e._updateRef(!0))) : void e.$destroy(!1, t);\n    }, remove: function remove(t, e) {\n      var i = this.keepAlive;if (t) {\n        this.pendingRemovals++, this.pendingRemovalCb = e;var n = this;t.$remove(function () {\n          n.pendingRemovals--, i || t._cleanup(), !n.pendingRemovals && n.pendingRemovalCb && (n.pendingRemovalCb(), n.pendingRemovalCb = null);\n        });\n      } else e && e();\n    }, transition: function transition(t, e) {\n      var i = this,\n          n = this.childVM;switch (n && (n._inactive = !0), t._inactive = !1, this.childVM = t, i.params.transitionMode) {case \"in-out\":\n          t.$before(i.anchor, function () {\n            i.remove(n, e);\n          });break;case \"out-in\":\n          i.remove(n, function () {\n            t.$before(i.anchor, e);\n          });break;default:\n          i.remove(n), t.$before(i.anchor, e);}\n    }, unbind: function unbind() {\n      if (this.invalidatePending(), this.unbuild(), this.cache) {\n        for (var t in this.cache) {\n          this.cache[t].$destroy();\n        }this.cache = null;\n      }\n    } },\n      $s = An._propBindingModes,\n      ks = {},\n      xs = /^[$_a-zA-Z]+[\\w$]*$/,\n      As = An._propBindingModes,\n      Os = { bind: function bind() {\n      var t = this.vm,\n          e = t._context,\n          i = this.descriptor.prop,\n          n = i.path,\n          r = i.parentPath,\n          s = i.mode === As.TWO_WAY,\n          o = this.parentWatcher = new Ut(e, r, function (e) {\n        xe(t, i, e);\n      }, { twoWay: s, filters: i.filters, scope: this._scope });if (ke(t, i, o.value), s) {\n        var a = this;t.$once(\"pre-hook:created\", function () {\n          a.childWatcher = new Ut(t, n, function (t) {\n            o.set(t);\n          }, { sync: !0 });\n        });\n      }\n    }, unbind: function unbind() {\n      this.parentWatcher.teardown(), this.childWatcher && this.childWatcher.teardown();\n    } },\n      Ts = [],\n      Ns = !1,\n      js = \"transition\",\n      Es = \"animation\",\n      Ss = Ji + \"Duration\",\n      Fs = Qi + \"Duration\",\n      Ds = Ri && window.requestAnimationFrame,\n      Ps = Ds ? function (t) {\n    Ds(function () {\n      Ds(t);\n    });\n  } : function (t) {\n    setTimeout(t, 50);\n  },\n      Rs = Se.prototype;Rs.enter = function (t, e) {\n    this.cancelPending(), this.callHook(\"beforeEnter\"), this.cb = e, X(this.el, this.enterClass), t(), this.entered = !1, this.callHookWithCb(\"enter\"), this.entered || (this.cancel = this.hooks && this.hooks.enterCancelled, je(this.enterNextTick));\n  }, Rs.enterNextTick = function () {\n    var t = this;this.justEntered = !0, Ps(function () {\n      t.justEntered = !1;\n    });var e = this.enterDone,\n        i = this.getCssTransitionType(this.enterClass);this.pendingJsCb ? i === js && Y(this.el, this.enterClass) : i === js ? (Y(this.el, this.enterClass), this.setupCssCb(qi, e)) : i === Es ? this.setupCssCb(Gi, e) : e();\n  }, Rs.enterDone = function () {\n    this.entered = !0, this.cancel = this.pendingJsCb = null, Y(this.el, this.enterClass), this.callHook(\"afterEnter\"), this.cb && this.cb();\n  }, Rs.leave = function (t, e) {\n    this.cancelPending(), this.callHook(\"beforeLeave\"), this.op = t, this.cb = e, X(this.el, this.leaveClass), this.left = !1, this.callHookWithCb(\"leave\"), this.left || (this.cancel = this.hooks && this.hooks.leaveCancelled, this.op && !this.pendingJsCb && (this.justEntered ? this.leaveDone() : je(this.leaveNextTick)));\n  }, Rs.leaveNextTick = function () {\n    var t = this.getCssTransitionType(this.leaveClass);if (t) {\n      var e = t === js ? qi : Gi;this.setupCssCb(e, this.leaveDone);\n    } else this.leaveDone();\n  }, Rs.leaveDone = function () {\n    this.left = !0, this.cancel = this.pendingJsCb = null, this.op(), Y(this.el, this.leaveClass), this.callHook(\"afterLeave\"), this.cb && this.cb(), this.op = null;\n  }, Rs.cancelPending = function () {\n    this.op = this.cb = null;var t = !1;this.pendingCssCb && (t = !0, Q(this.el, this.pendingCssEvent, this.pendingCssCb), this.pendingCssEvent = this.pendingCssCb = null), this.pendingJsCb && (t = !0, this.pendingJsCb.cancel(), this.pendingJsCb = null), t && (Y(this.el, this.enterClass), Y(this.el, this.leaveClass)), this.cancel && (this.cancel.call(this.vm, this.el), this.cancel = null);\n  }, Rs.callHook = function (t) {\n    this.hooks && this.hooks[t] && this.hooks[t].call(this.vm, this.el);\n  }, Rs.callHookWithCb = function (t) {\n    var e = this.hooks && this.hooks[t];e && (e.length > 1 && (this.pendingJsCb = w(this[t + \"Done\"])), e.call(this.vm, this.el, this.pendingJsCb));\n  }, Rs.getCssTransitionType = function (t) {\n    if (!(!qi || document.hidden || this.hooks && this.hooks.css === !1 || Fe(this.el))) {\n      var e = this.type || this.typeCache[t];if (e) return e;var i = this.el.style,\n          n = window.getComputedStyle(this.el),\n          r = i[Ss] || n[Ss];if (r && \"0s\" !== r) e = js;else {\n        var s = i[Fs] || n[Fs];s && \"0s\" !== s && (e = Es);\n      }return e && (this.typeCache[t] = e), e;\n    }\n  }, Rs.setupCssCb = function (t, e) {\n    this.pendingCssEvent = t;var i = this,\n        n = this.el,\n        r = this.pendingCssCb = function (s) {\n      s.target === n && (Q(n, t, r), i.pendingCssEvent = i.pendingCssCb = null, !i.pendingJsCb && e && e());\n    };q(n, t, r);\n  };var Ls = { priority: Ir, update: function update(t, e) {\n      var i = this.el,\n          n = gt(this.vm.$options, \"transitions\", t);t = t || \"v\", e = e || \"v\", i.__v_trans = new Se(i, t, n, this.vm), Y(i, e + \"-transition\"), X(i, t + \"-transition\");\n    } },\n      Hs = { style: ls, \"class\": ws, component: Cs, prop: Os, transition: Ls },\n      Is = /^v-bind:|^:/,\n      Ms = /^v-on:|^@/,\n      Vs = /^v-([^:]+)(?:$|:(.*)$)/,\n      Bs = /\\.[^\\.]+/g,\n      Ws = /^(v-bind:|:)?transition$/,\n      zs = 1e3,\n      Us = 2e3;Ye.terminal = !0;var Js = /[^\\w\\-:\\.]/,\n      qs = Object.freeze({ compile: De, compileAndLinkProps: Ie, compileRoot: Me, transclude: si, resolveSlots: li }),\n      Qs = /^v-on:|^@/;di.prototype._bind = function () {\n    var t = this.name,\n        e = this.descriptor;if ((\"cloak\" !== t || this.vm._isCompiled) && this.el && this.el.removeAttribute) {\n      var i = e.attr || \"v-\" + t;this.el.removeAttribute(i);\n    }var n = e.def;if (\"function\" == typeof n ? this.update = n : v(this, n), this._setupParams(), this.bind && this.bind(), this._bound = !0, this.literal) this.update && this.update(e.raw);else if ((this.expression || this.modifiers) && (this.update || this.twoWay) && !this._checkStatement()) {\n      var r = this;this.update ? this._update = function (t, e) {\n        r._locked || r.update(t, e);\n      } : this._update = pi;var s = this._preProcess ? p(this._preProcess, this) : null,\n          o = this._postProcess ? p(this._postProcess, this) : null,\n          a = this._watcher = new Ut(this.vm, this.expression, this._update, { filters: this.filters, twoWay: this.twoWay, deep: this.deep, preProcess: s, postProcess: o, scope: this._scope });this.afterBind ? this.afterBind() : this.update && this.update(a.value);\n    }\n  }, di.prototype._setupParams = function () {\n    if (this.params) {\n      var t = this.params;this.params = Object.create(null);for (var e, i, n, r = t.length; r--;) {\n        e = u(t[r]), n = l(e), i = M(this.el, e), null != i ? this._setupParamWatcher(n, i) : (i = I(this.el, e), null != i && (this.params[n] = \"\" === i ? !0 : i));\n      }\n    }\n  }, di.prototype._setupParamWatcher = function (t, e) {\n    var i = this,\n        n = !1,\n        r = (this._scope || this.vm).$watch(e, function (e, r) {\n      if (i.params[t] = e, n) {\n        var s = i.paramWatchers && i.paramWatchers[t];s && s.call(i, e, r);\n      } else n = !0;\n    }, { immediate: !0, user: !1 });(this._paramUnwatchFns || (this._paramUnwatchFns = [])).push(r);\n  }, di.prototype._checkStatement = function () {\n    var t = this.expression;if (t && this.acceptStatement && !Mt(t)) {\n      var e = It(t).get,\n          i = this._scope || this.vm,\n          n = function n(t) {\n        i.$event = t, e.call(i, i), i.$event = null;\n      };return this.filters && (n = i._applyFilters(n, null, this.filters)), this.update(n), !0;\n    }\n  }, di.prototype.set = function (t) {\n    this.twoWay && this._withLock(function () {\n      this._watcher.set(t);\n    });\n  }, di.prototype._withLock = function (t) {\n    var e = this;e._locked = !0, t.call(e), Yi(function () {\n      e._locked = !1;\n    });\n  }, di.prototype.on = function (t, e, i) {\n    q(this.el, t, e, i), (this._listeners || (this._listeners = [])).push([t, e]);\n  }, di.prototype._teardown = function () {\n    if (this._bound) {\n      this._bound = !1, this.unbind && this.unbind(), this._watcher && this._watcher.teardown();var t,\n          e = this._listeners;if (e) for (t = e.length; t--;) {\n        Q(this.el, e[t][0], e[t][1]);\n      }var i = this._paramUnwatchFns;if (i) for (t = i.length; t--;) {\n        i[t]();\n      }this.vm = this.el = this._watcher = this._listeners = null;\n    }\n  };var Gs = /[^|]\\|[^|]/;xt(wi), ui(wi), fi(wi), vi(wi), mi(wi), gi(wi), _i(wi), yi(wi), bi(wi);var Zs = { priority: Ur, params: [\"name\"], bind: function bind() {\n      var t = this.params.name || \"default\",\n          e = this.vm._slotContents && this.vm._slotContents[t];e && e.hasChildNodes() ? this.compile(e.cloneNode(!0), this.vm._context, this.vm) : this.fallback();\n    }, compile: function compile(t, e, i) {\n      if (t && e) {\n        if (this.el.hasChildNodes() && 1 === t.childNodes.length && 1 === t.childNodes[0].nodeType && t.childNodes[0].hasAttribute(\"v-if\")) {\n          var n = document.createElement(\"template\");n.setAttribute(\"v-else\", \"\"), n.innerHTML = this.el.innerHTML, n._context = this.vm, t.appendChild(n);\n        }var r = i ? i._scope : this._scope;this.unlink = e.$compile(t, i, r, this._frag);\n      }t ? J(this.el, t) : z(this.el);\n    }, fallback: function fallback() {\n      this.compile(K(this.el, !0), this.vm);\n    }, unbind: function unbind() {\n      this.unlink && this.unlink();\n    } },\n      Xs = { priority: Br, params: [\"name\"], paramWatchers: { name: function name(t) {\n        Qr.remove.call(this), t && this.insert(t);\n      } }, bind: function bind() {\n      this.anchor = nt(\"v-partial\"), J(this.el, this.anchor), this.insert(this.params.name);\n    }, insert: function insert(t) {\n      var e = gt(this.vm.$options, \"partials\", t, !0);e && (this.factory = new se(this.vm, e), Qr.insert.call(this));\n    }, unbind: function unbind() {\n      this.frag && this.frag.destroy();\n    } },\n      Ys = { slot: Zs, partial: Xs },\n      Ks = qr._postProcess,\n      to = /(\\d{3})(?=\\d)/g,\n      eo = { orderBy: ki, filterBy: $i, limitBy: Ci, json: { read: function read(t, e) {\n        return \"string\" == typeof t ? t : JSON.stringify(t, null, arguments.length > 1 ? e : 2);\n      }, write: function write(t) {\n        try {\n          return JSON.parse(t);\n        } catch (e) {\n          return t;\n        }\n      } }, capitalize: function capitalize(t) {\n      return t || 0 === t ? (t = t.toString(), t.charAt(0).toUpperCase() + t.slice(1)) : \"\";\n    }, uppercase: function uppercase(t) {\n      return t || 0 === t ? t.toString().toUpperCase() : \"\";\n    }, lowercase: function lowercase(t) {\n      return t || 0 === t ? t.toString().toLowerCase() : \"\";\n    }, currency: function currency(t, e, i) {\n      if (t = parseFloat(t), !isFinite(t) || !t && 0 !== t) return \"\";e = null != e ? e : \"$\", i = null != i ? i : 2;var n = Math.abs(t).toFixed(i),\n          r = i ? n.slice(0, -1 - i) : n,\n          s = r.length % 3,\n          o = s > 0 ? r.slice(0, s) + (r.length > 3 ? \",\" : \"\") : \"\",\n          a = i ? n.slice(-1 - i) : \"\",\n          h = 0 > t ? \"-\" : \"\";return h + e + o + r.slice(s).replace(to, \"$1,\") + a;\n    }, pluralize: function pluralize(t) {\n      var e = d(arguments, 1),\n          i = e.length;if (i > 1) {\n        var n = t % 10 - 1;return n in e ? e[n] : e[i - 1];\n      }return e[0] + (1 === t ? \"\" : \"s\");\n    }, debounce: function debounce(t, e) {\n      return t ? (e || (e = 300), y(t, e)) : void 0;\n    } };return Ai(wi), wi.version = \"1.0.26\", setTimeout(function () {\n    An.devtools && Li && Li.emit(\"init\", wi);\n  }, 0), wi;\n});\n\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],3:[function(require,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\n(function () {\n  try {\n    cachedSetTimeout = setTimeout;\n  } catch (e) {\n    cachedSetTimeout = function () {\n      throw new Error('setTimeout is not defined');\n    }\n  }\n  try {\n    cachedClearTimeout = clearTimeout;\n  } catch (e) {\n    cachedClearTimeout = function () {\n      throw new Error('clearTimeout is not defined');\n    }\n  }\n} ())\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = cachedSetTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    cachedClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        cachedSetTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],4:[function(require,module,exports){\nvar Vue // late bind\nvar map = Object.create(null)\nvar shimmed = false\nvar isBrowserify = false\n\n/**\n * Determine compatibility and apply patch.\n *\n * @param {Function} vue\n * @param {Boolean} browserify\n */\n\nexports.install = function (vue, browserify) {\n  if (shimmed) return\n  shimmed = true\n\n  Vue = vue\n  isBrowserify = browserify\n\n  exports.compatible = !!Vue.internalDirectives\n  if (!exports.compatible) {\n    console.warn(\n      '[HMR] vue-loader hot reload is only compatible with ' +\n      'Vue.js 1.0.0+.'\n    )\n    return\n  }\n\n  // patch view directive\n  patchView(Vue.internalDirectives.component)\n  console.log('[HMR] Vue component hot reload shim applied.')\n  // shim router-view if present\n  var routerView = Vue.elementDirective('router-view')\n  if (routerView) {\n    patchView(routerView)\n    console.log('[HMR] vue-router <router-view> hot reload shim applied.')\n  }\n}\n\n/**\n * Shim the view directive (component or router-view).\n *\n * @param {Object} View\n */\n\nfunction patchView (View) {\n  var unbuild = View.unbuild\n  View.unbuild = function (defer) {\n    if (!this.hotUpdating) {\n      var prevComponent = this.childVM && this.childVM.constructor\n      removeView(prevComponent, this)\n      // defer = true means we are transitioning to a new\n      // Component. Register this new component to the list.\n      if (defer) {\n        addView(this.Component, this)\n      }\n    }\n    // call original\n    return unbuild.call(this, defer)\n  }\n}\n\n/**\n * Add a component view to a Component's hot list\n *\n * @param {Function} Component\n * @param {Directive} view - view directive instance\n */\n\nfunction addView (Component, view) {\n  var id = Component && Component.options.hotID\n  if (id) {\n    if (!map[id]) {\n      map[id] = {\n        Component: Component,\n        views: [],\n        instances: []\n      }\n    }\n    map[id].views.push(view)\n  }\n}\n\n/**\n * Remove a component view from a Component's hot list\n *\n * @param {Function} Component\n * @param {Directive} view - view directive instance\n */\n\nfunction removeView (Component, view) {\n  var id = Component && Component.options.hotID\n  if (id) {\n    map[id].views.$remove(view)\n  }\n}\n\n/**\n * Create a record for a hot module, which keeps track of its construcotr,\n * instnaces and views (component directives or router-views).\n *\n * @param {String} id\n * @param {Object} options\n */\n\nexports.createRecord = function (id, options) {\n  if (typeof options === 'function') {\n    options = options.options\n  }\n  if (typeof options.el !== 'string' && typeof options.data !== 'object') {\n    makeOptionsHot(id, options)\n    map[id] = {\n      Component: null,\n      views: [],\n      instances: []\n    }\n  }\n}\n\n/**\n * Make a Component options object hot.\n *\n * @param {String} id\n * @param {Object} options\n */\n\nfunction makeOptionsHot (id, options) {\n  options.hotID = id\n  injectHook(options, 'created', function () {\n    var record = map[id]\n    if (!record.Component) {\n      record.Component = this.constructor\n    }\n    record.instances.push(this)\n  })\n  injectHook(options, 'beforeDestroy', function () {\n    map[id].instances.$remove(this)\n  })\n}\n\n/**\n * Inject a hook to a hot reloadable component so that\n * we can keep track of it.\n *\n * @param {Object} options\n * @param {String} name\n * @param {Function} hook\n */\n\nfunction injectHook (options, name, hook) {\n  var existing = options[name]\n  options[name] = existing\n    ? Array.isArray(existing)\n      ? existing.concat(hook)\n      : [existing, hook]\n    : [hook]\n}\n\n/**\n * Update a hot component.\n *\n * @param {String} id\n * @param {Object|null} newOptions\n * @param {String|null} newTemplate\n */\n\nexports.update = function (id, newOptions, newTemplate) {\n  var record = map[id]\n  // force full-reload if an instance of the component is active but is not\n  // managed by a view\n  if (!record || (record.instances.length && !record.views.length)) {\n    console.log('[HMR] Root or manually-mounted instance modified. Full reload may be required.')\n    if (!isBrowserify) {\n      window.location.reload()\n    } else {\n      // browserify-hmr somehow sends incomplete bundle if we reload here\n      return\n    }\n  }\n  if (!isBrowserify) {\n    // browserify-hmr already logs this\n    console.log('[HMR] Updating component: ' + format(id))\n  }\n  var Component = record.Component\n  // update constructor\n  if (newOptions) {\n    // in case the user exports a constructor\n    Component = record.Component = typeof newOptions === 'function'\n      ? newOptions\n      : Vue.extend(newOptions)\n    makeOptionsHot(id, Component.options)\n  }\n  if (newTemplate) {\n    Component.options.template = newTemplate\n  }\n  // handle recursive lookup\n  if (Component.options.name) {\n    Component.options.components[Component.options.name] = Component\n  }\n  // reset constructor cached linker\n  Component.linker = null\n  // reload all views\n  record.views.forEach(function (view) {\n    updateView(view, Component)\n  })\n  // flush devtools\n  if (window.__VUE_DEVTOOLS_GLOBAL_HOOK__) {\n    window.__VUE_DEVTOOLS_GLOBAL_HOOK__.emit('flush')\n  }\n}\n\n/**\n * Update a component view instance\n *\n * @param {Directive} view\n * @param {Function} Component\n */\n\nfunction updateView (view, Component) {\n  if (!view._bound) {\n    return\n  }\n  view.Component = Component\n  view.hotUpdating = true\n  // disable transitions\n  view.vm._isCompiled = false\n  // save state\n  var state = extractState(view.childVM)\n  // remount, make sure to disable keep-alive\n  var keepAlive = view.keepAlive\n  view.keepAlive = false\n  view.mountComponent()\n  view.keepAlive = keepAlive\n  // restore state\n  restoreState(view.childVM, state, true)\n  // re-eanble transitions\n  view.vm._isCompiled = true\n  view.hotUpdating = false\n}\n\n/**\n * Extract state from a Vue instance.\n *\n * @param {Vue} vm\n * @return {Object}\n */\n\nfunction extractState (vm) {\n  return {\n    cid: vm.constructor.cid,\n    data: vm.$data,\n    children: vm.$children.map(extractState)\n  }\n}\n\n/**\n * Restore state to a reloaded Vue instance.\n *\n * @param {Vue} vm\n * @param {Object} state\n */\n\nfunction restoreState (vm, state, isRoot) {\n  var oldAsyncConfig\n  if (isRoot) {\n    // set Vue into sync mode during state rehydration\n    oldAsyncConfig = Vue.config.async\n    Vue.config.async = false\n  }\n  // actual restore\n  if (isRoot || !vm._props) {\n    vm.$data = state.data\n  } else {\n    Object.keys(state.data).forEach(function (key) {\n      if (!vm._props[key]) {\n        // for non-root, only restore non-props fields\n        vm.$data[key] = state.data[key]\n      }\n    })\n  }\n  // verify child consistency\n  var hasSameChildren = vm.$children.every(function (c, i) {\n    return state.children[i] && state.children[i].cid === c.constructor.cid\n  })\n  if (hasSameChildren) {\n    // rehydrate children\n    vm.$children.forEach(function (c, i) {\n      restoreState(c, state.children[i])\n    })\n  }\n  if (isRoot) {\n    Vue.config.async = oldAsyncConfig\n  }\n}\n\nfunction format (id) {\n  var match = id.match(/[^\\/]+\\.vue$/)\n  return match ? match[0] : id\n}\n\n},{}],5:[function(require,module,exports){\n(function (process,global){\n/*!\n * Vue.js v1.0.26\n * (c) 2016 Evan You\n * Released under the MIT License.\n */\n'use strict';\n\nfunction set(obj, key, val) {\n  if (hasOwn(obj, key)) {\n    obj[key] = val;\n    return;\n  }\n  if (obj._isVue) {\n    set(obj._data, key, val);\n    return;\n  }\n  var ob = obj.__ob__;\n  if (!ob) {\n    obj[key] = val;\n    return;\n  }\n  ob.convert(key, val);\n  ob.dep.notify();\n  if (ob.vms) {\n    var i = ob.vms.length;\n    while (i--) {\n      var vm = ob.vms[i];\n      vm._proxy(key);\n      vm._digest();\n    }\n  }\n  return val;\n}\n\n/**\n * Delete a property and trigger change if necessary.\n *\n * @param {Object} obj\n * @param {String} key\n */\n\nfunction del(obj, key) {\n  if (!hasOwn(obj, key)) {\n    return;\n  }\n  delete obj[key];\n  var ob = obj.__ob__;\n  if (!ob) {\n    if (obj._isVue) {\n      delete obj._data[key];\n      obj._digest();\n    }\n    return;\n  }\n  ob.dep.notify();\n  if (ob.vms) {\n    var i = ob.vms.length;\n    while (i--) {\n      var vm = ob.vms[i];\n      vm._unproxy(key);\n      vm._digest();\n    }\n  }\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n/**\n * Check whether the object has the property.\n *\n * @param {Object} obj\n * @param {String} key\n * @return {Boolean}\n */\n\nfunction hasOwn(obj, key) {\n  return hasOwnProperty.call(obj, key);\n}\n\n/**\n * Check if an expression is a literal value.\n *\n * @param {String} exp\n * @return {Boolean}\n */\n\nvar literalValueRE = /^\\s?(true|false|-?[\\d\\.]+|'[^']*'|\"[^\"]*\")\\s?$/;\n\nfunction isLiteral(exp) {\n  return literalValueRE.test(exp);\n}\n\n/**\n * Check if a string starts with $ or _\n *\n * @param {String} str\n * @return {Boolean}\n */\n\nfunction isReserved(str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F;\n}\n\n/**\n * Guard text output, make sure undefined outputs\n * empty string\n *\n * @param {*} value\n * @return {String}\n */\n\nfunction _toString(value) {\n  return value == null ? '' : value.toString();\n}\n\n/**\n * Check and convert possible numeric strings to numbers\n * before setting back to data\n *\n * @param {*} value\n * @return {*|Number}\n */\n\nfunction toNumber(value) {\n  if (typeof value !== 'string') {\n    return value;\n  } else {\n    var parsed = Number(value);\n    return isNaN(parsed) ? value : parsed;\n  }\n}\n\n/**\n * Convert string boolean literals into real booleans.\n *\n * @param {*} value\n * @return {*|Boolean}\n */\n\nfunction toBoolean(value) {\n  return value === 'true' ? true : value === 'false' ? false : value;\n}\n\n/**\n * Strip quotes from a string\n *\n * @param {String} str\n * @return {String | false}\n */\n\nfunction stripQuotes(str) {\n  var a = str.charCodeAt(0);\n  var b = str.charCodeAt(str.length - 1);\n  return a === b && (a === 0x22 || a === 0x27) ? str.slice(1, -1) : str;\n}\n\n/**\n * Camelize a hyphen-delmited string.\n *\n * @param {String} str\n * @return {String}\n */\n\nvar camelizeRE = /-(\\w)/g;\n\nfunction camelize(str) {\n  return str.replace(camelizeRE, toUpper);\n}\n\nfunction toUpper(_, c) {\n  return c ? c.toUpperCase() : '';\n}\n\n/**\n * Hyphenate a camelCase string.\n *\n * @param {String} str\n * @return {String}\n */\n\nvar hyphenateRE = /([a-z\\d])([A-Z])/g;\n\nfunction hyphenate(str) {\n  return str.replace(hyphenateRE, '$1-$2').toLowerCase();\n}\n\n/**\n * Converts hyphen/underscore/slash delimitered names into\n * camelized classNames.\n *\n * e.g. my-component => MyComponent\n *      some_else    => SomeElse\n *      some/comp    => SomeComp\n *\n * @param {String} str\n * @return {String}\n */\n\nvar classifyRE = /(?:^|[-_\\/])(\\w)/g;\n\nfunction classify(str) {\n  return str.replace(classifyRE, toUpper);\n}\n\n/**\n * Simple bind, faster than native\n *\n * @param {Function} fn\n * @param {Object} ctx\n * @return {Function}\n */\n\nfunction bind(fn, ctx) {\n  return function (a) {\n    var l = arguments.length;\n    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);\n  };\n}\n\n/**\n * Convert an Array-like object to a real Array.\n *\n * @param {Array-like} list\n * @param {Number} [start] - start index\n * @return {Array}\n */\n\nfunction toArray(list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret;\n}\n\n/**\n * Mix properties into target object.\n *\n * @param {Object} to\n * @param {Object} from\n */\n\nfunction extend(to, from) {\n  var keys = Object.keys(from);\n  var i = keys.length;\n  while (i--) {\n    to[keys[i]] = from[keys[i]];\n  }\n  return to;\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n *\n * @param {*} obj\n * @return {Boolean}\n */\n\nfunction isObject(obj) {\n  return obj !== null && typeof obj === 'object';\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n *\n * @param {*} obj\n * @return {Boolean}\n */\n\nvar toString = Object.prototype.toString;\nvar OBJECT_STRING = '[object Object]';\n\nfunction isPlainObject(obj) {\n  return toString.call(obj) === OBJECT_STRING;\n}\n\n/**\n * Array type check.\n *\n * @param {*} obj\n * @return {Boolean}\n */\n\nvar isArray = Array.isArray;\n\n/**\n * Define a property.\n *\n * @param {Object} obj\n * @param {String} key\n * @param {*} val\n * @param {Boolean} [enumerable]\n */\n\nfunction def(obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Debounce a function so it only gets called after the\n * input stops arriving after the given wait period.\n *\n * @param {Function} func\n * @param {Number} wait\n * @return {Function} - the debounced function\n */\n\nfunction _debounce(func, wait) {\n  var timeout, args, context, timestamp, result;\n  var later = function later() {\n    var last = Date.now() - timestamp;\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    }\n  };\n  return function () {\n    context = this;\n    args = arguments;\n    timestamp = Date.now();\n    if (!timeout) {\n      timeout = setTimeout(later, wait);\n    }\n    return result;\n  };\n}\n\n/**\n * Manual indexOf because it's slightly faster than\n * native.\n *\n * @param {Array} arr\n * @param {*} obj\n */\n\nfunction indexOf(arr, obj) {\n  var i = arr.length;\n  while (i--) {\n    if (arr[i] === obj) return i;\n  }\n  return -1;\n}\n\n/**\n * Make a cancellable version of an async callback.\n *\n * @param {Function} fn\n * @return {Function}\n */\n\nfunction cancellable(fn) {\n  var cb = function cb() {\n    if (!cb.cancelled) {\n      return fn.apply(this, arguments);\n    }\n  };\n  cb.cancel = function () {\n    cb.cancelled = true;\n  };\n  return cb;\n}\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n *\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n */\n\nfunction looseEqual(a, b) {\n  /* eslint-disable eqeqeq */\n  return a == b || (isObject(a) && isObject(b) ? JSON.stringify(a) === JSON.stringify(b) : false);\n  /* eslint-enable eqeqeq */\n}\n\nvar hasProto = ('__proto__' in {});\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined' && Object.prototype.toString.call(window) !== '[object Object]';\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n// UA sniffing for working around browser-specific quirks\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && UA.indexOf('trident') > 0;\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isAndroid = UA && UA.indexOf('android') > 0;\nvar isIos = UA && /(iphone|ipad|ipod|ios)/i.test(UA);\nvar iosVersionMatch = isIos && UA.match(/os ([\\d_]+)/);\nvar iosVersion = iosVersionMatch && iosVersionMatch[1].split('_');\n\n// detecting iOS UIWebView by indexedDB\nvar hasMutationObserverBug = iosVersion && Number(iosVersion[0]) >= 9 && Number(iosVersion[1]) >= 3 && !window.indexedDB;\n\nvar transitionProp = undefined;\nvar transitionEndEvent = undefined;\nvar animationProp = undefined;\nvar animationEndEvent = undefined;\n\n// Transition property/event sniffing\nif (inBrowser && !isIE9) {\n  var isWebkitTrans = window.ontransitionend === undefined && window.onwebkittransitionend !== undefined;\n  var isWebkitAnim = window.onanimationend === undefined && window.onwebkitanimationend !== undefined;\n  transitionProp = isWebkitTrans ? 'WebkitTransition' : 'transition';\n  transitionEndEvent = isWebkitTrans ? 'webkitTransitionEnd' : 'transitionend';\n  animationProp = isWebkitAnim ? 'WebkitAnimation' : 'animation';\n  animationEndEvent = isWebkitAnim ? 'webkitAnimationEnd' : 'animationend';\n}\n\n/**\n * Defer a task to execute it asynchronously. Ideally this\n * should be executed as a microtask, so we leverage\n * MutationObserver if it's available, and fallback to\n * setTimeout(0).\n *\n * @param {Function} cb\n * @param {Object} ctx\n */\n\nvar nextTick = (function () {\n  var callbacks = [];\n  var pending = false;\n  var timerFunc;\n  function nextTickHandler() {\n    pending = false;\n    var copies = callbacks.slice(0);\n    callbacks = [];\n    for (var i = 0; i < copies.length; i++) {\n      copies[i]();\n    }\n  }\n\n  /* istanbul ignore if */\n  if (typeof MutationObserver !== 'undefined' && !hasMutationObserverBug) {\n    var counter = 1;\n    var observer = new MutationObserver(nextTickHandler);\n    var textNode = document.createTextNode(counter);\n    observer.observe(textNode, {\n      characterData: true\n    });\n    timerFunc = function () {\n      counter = (counter + 1) % 2;\n      textNode.data = counter;\n    };\n  } else {\n    // webpack attempts to inject a shim for setImmediate\n    // if it is used as a global, so we have to work around that to\n    // avoid bundling unnecessary code.\n    var context = inBrowser ? window : typeof global !== 'undefined' ? global : {};\n    timerFunc = context.setImmediate || setTimeout;\n  }\n  return function (cb, ctx) {\n    var func = ctx ? function () {\n      cb.call(ctx);\n    } : cb;\n    callbacks.push(func);\n    if (pending) return;\n    pending = true;\n    timerFunc(nextTickHandler, 0);\n  };\n})();\n\nvar _Set = undefined;\n/* istanbul ignore if */\nif (typeof Set !== 'undefined' && Set.toString().match(/native code/)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = function () {\n    this.set = Object.create(null);\n  };\n  _Set.prototype.has = function (key) {\n    return this.set[key] !== undefined;\n  };\n  _Set.prototype.add = function (key) {\n    this.set[key] = 1;\n  };\n  _Set.prototype.clear = function () {\n    this.set = Object.create(null);\n  };\n}\n\nfunction Cache(limit) {\n  this.size = 0;\n  this.limit = limit;\n  this.head = this.tail = undefined;\n  this._keymap = Object.create(null);\n}\n\nvar p = Cache.prototype;\n\n/**\n * Put <value> into the cache associated with <key>.\n * Returns the entry which was removed to make room for\n * the new entry. Otherwise undefined is returned.\n * (i.e. if there was enough room already).\n *\n * @param {String} key\n * @param {*} value\n * @return {Entry|undefined}\n */\n\np.put = function (key, value) {\n  var removed;\n\n  var entry = this.get(key, true);\n  if (!entry) {\n    if (this.size === this.limit) {\n      removed = this.shift();\n    }\n    entry = {\n      key: key\n    };\n    this._keymap[key] = entry;\n    if (this.tail) {\n      this.tail.newer = entry;\n      entry.older = this.tail;\n    } else {\n      this.head = entry;\n    }\n    this.tail = entry;\n    this.size++;\n  }\n  entry.value = value;\n\n  return removed;\n};\n\n/**\n * Purge the least recently used (oldest) entry from the\n * cache. Returns the removed entry or undefined if the\n * cache was empty.\n */\n\np.shift = function () {\n  var entry = this.head;\n  if (entry) {\n    this.head = this.head.newer;\n    this.head.older = undefined;\n    entry.newer = entry.older = undefined;\n    this._keymap[entry.key] = undefined;\n    this.size--;\n  }\n  return entry;\n};\n\n/**\n * Get and register recent use of <key>. Returns the value\n * associated with <key> or undefined if not in cache.\n *\n * @param {String} key\n * @param {Boolean} returnEntry\n * @return {Entry|*}\n */\n\np.get = function (key, returnEntry) {\n  var entry = this._keymap[key];\n  if (entry === undefined) return;\n  if (entry === this.tail) {\n    return returnEntry ? entry : entry.value;\n  }\n  // HEAD--------------TAIL\n  //   <.older   .newer>\n  //  <--- add direction --\n  //   A  B  C  <D>  E\n  if (entry.newer) {\n    if (entry === this.head) {\n      this.head = entry.newer;\n    }\n    entry.newer.older = entry.older; // C <-- E.\n  }\n  if (entry.older) {\n    entry.older.newer = entry.newer; // C. --> E\n  }\n  entry.newer = undefined; // D --x\n  entry.older = this.tail; // D. --> E\n  if (this.tail) {\n    this.tail.newer = entry; // E. <-- D\n  }\n  this.tail = entry;\n  return returnEntry ? entry : entry.value;\n};\n\nvar cache$1 = new Cache(1000);\nvar filterTokenRE = /[^\\s'\"]+|'[^']*'|\"[^\"]*\"/g;\nvar reservedArgRE = /^in$|^-?\\d+/;\n\n/**\n * Parser state\n */\n\nvar str;\nvar dir;\nvar c;\nvar prev;\nvar i;\nvar l;\nvar lastFilterIndex;\nvar inSingle;\nvar inDouble;\nvar curly;\nvar square;\nvar paren;\n/**\n * Push a filter to the current directive object\n */\n\nfunction pushFilter() {\n  var exp = str.slice(lastFilterIndex, i).trim();\n  var filter;\n  if (exp) {\n    filter = {};\n    var tokens = exp.match(filterTokenRE);\n    filter.name = tokens[0];\n    if (tokens.length > 1) {\n      filter.args = tokens.slice(1).map(processFilterArg);\n    }\n  }\n  if (filter) {\n    (dir.filters = dir.filters || []).push(filter);\n  }\n  lastFilterIndex = i + 1;\n}\n\n/**\n * Check if an argument is dynamic and strip quotes.\n *\n * @param {String} arg\n * @return {Object}\n */\n\nfunction processFilterArg(arg) {\n  if (reservedArgRE.test(arg)) {\n    return {\n      value: toNumber(arg),\n      dynamic: false\n    };\n  } else {\n    var stripped = stripQuotes(arg);\n    var dynamic = stripped === arg;\n    return {\n      value: dynamic ? arg : stripped,\n      dynamic: dynamic\n    };\n  }\n}\n\n/**\n * Parse a directive value and extract the expression\n * and its filters into a descriptor.\n *\n * Example:\n *\n * \"a + 1 | uppercase\" will yield:\n * {\n *   expression: 'a + 1',\n *   filters: [\n *     { name: 'uppercase', args: null }\n *   ]\n * }\n *\n * @param {String} s\n * @return {Object}\n */\n\nfunction parseDirective(s) {\n  var hit = cache$1.get(s);\n  if (hit) {\n    return hit;\n  }\n\n  // reset parser state\n  str = s;\n  inSingle = inDouble = false;\n  curly = square = paren = 0;\n  lastFilterIndex = 0;\n  dir = {};\n\n  for (i = 0, l = str.length; i < l; i++) {\n    prev = c;\n    c = str.charCodeAt(i);\n    if (inSingle) {\n      // check single quote\n      if (c === 0x27 && prev !== 0x5C) inSingle = !inSingle;\n    } else if (inDouble) {\n      // check double quote\n      if (c === 0x22 && prev !== 0x5C) inDouble = !inDouble;\n    } else if (c === 0x7C && // pipe\n    str.charCodeAt(i + 1) !== 0x7C && str.charCodeAt(i - 1) !== 0x7C) {\n      if (dir.expression == null) {\n        // first filter, end of expression\n        lastFilterIndex = i + 1;\n        dir.expression = str.slice(0, i).trim();\n      } else {\n        // already has filter\n        pushFilter();\n      }\n    } else {\n      switch (c) {\n        case 0x22:\n          inDouble = true;break; // \"\n        case 0x27:\n          inSingle = true;break; // '\n        case 0x28:\n          paren++;break; // (\n        case 0x29:\n          paren--;break; // )\n        case 0x5B:\n          square++;break; // [\n        case 0x5D:\n          square--;break; // ]\n        case 0x7B:\n          curly++;break; // {\n        case 0x7D:\n          curly--;break; // }\n      }\n    }\n  }\n\n  if (dir.expression == null) {\n    dir.expression = str.slice(0, i).trim();\n  } else if (lastFilterIndex !== 0) {\n    pushFilter();\n  }\n\n  cache$1.put(s, dir);\n  return dir;\n}\n\nvar directive = Object.freeze({\n  parseDirective: parseDirective\n});\n\nvar regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\nvar cache = undefined;\nvar tagRE = undefined;\nvar htmlRE = undefined;\n/**\n * Escape a string so it can be used in a RegExp\n * constructor.\n *\n * @param {String} str\n */\n\nfunction escapeRegex(str) {\n  return str.replace(regexEscapeRE, '\\\\$&');\n}\n\nfunction compileRegex() {\n  var open = escapeRegex(config.delimiters[0]);\n  var close = escapeRegex(config.delimiters[1]);\n  var unsafeOpen = escapeRegex(config.unsafeDelimiters[0]);\n  var unsafeClose = escapeRegex(config.unsafeDelimiters[1]);\n  tagRE = new RegExp(unsafeOpen + '((?:.|\\\\n)+?)' + unsafeClose + '|' + open + '((?:.|\\\\n)+?)' + close, 'g');\n  htmlRE = new RegExp('^' + unsafeOpen + '((?:.|\\\\n)+?)' + unsafeClose + '$');\n  // reset cache\n  cache = new Cache(1000);\n}\n\n/**\n * Parse a template text string into an array of tokens.\n *\n * @param {String} text\n * @return {Array<Object> | null}\n *               - {String} type\n *               - {String} value\n *               - {Boolean} [html]\n *               - {Boolean} [oneTime]\n */\n\nfunction parseText(text) {\n  if (!cache) {\n    compileRegex();\n  }\n  var hit = cache.get(text);\n  if (hit) {\n    return hit;\n  }\n  if (!tagRE.test(text)) {\n    return null;\n  }\n  var tokens = [];\n  var lastIndex = tagRE.lastIndex = 0;\n  var match, index, html, value, first, oneTime;\n  /* eslint-disable no-cond-assign */\n  while (match = tagRE.exec(text)) {\n    /* eslint-enable no-cond-assign */\n    index = match.index;\n    // push text token\n    if (index > lastIndex) {\n      tokens.push({\n        value: text.slice(lastIndex, index)\n      });\n    }\n    // tag token\n    html = htmlRE.test(match[0]);\n    value = html ? match[1] : match[2];\n    first = value.charCodeAt(0);\n    oneTime = first === 42; // *\n    value = oneTime ? value.slice(1) : value;\n    tokens.push({\n      tag: true,\n      value: value.trim(),\n      html: html,\n      oneTime: oneTime\n    });\n    lastIndex = index + match[0].length;\n  }\n  if (lastIndex < text.length) {\n    tokens.push({\n      value: text.slice(lastIndex)\n    });\n  }\n  cache.put(text, tokens);\n  return tokens;\n}\n\n/**\n * Format a list of tokens into an expression.\n * e.g. tokens parsed from 'a {{b}} c' can be serialized\n * into one single expression as '\"a \" + b + \" c\"'.\n *\n * @param {Array} tokens\n * @param {Vue} [vm]\n * @return {String}\n */\n\nfunction tokensToExp(tokens, vm) {\n  if (tokens.length > 1) {\n    return tokens.map(function (token) {\n      return formatToken(token, vm);\n    }).join('+');\n  } else {\n    return formatToken(tokens[0], vm, true);\n  }\n}\n\n/**\n * Format a single token.\n *\n * @param {Object} token\n * @param {Vue} [vm]\n * @param {Boolean} [single]\n * @return {String}\n */\n\nfunction formatToken(token, vm, single) {\n  return token.tag ? token.oneTime && vm ? '\"' + vm.$eval(token.value) + '\"' : inlineFilters(token.value, single) : '\"' + token.value + '\"';\n}\n\n/**\n * For an attribute with multiple interpolation tags,\n * e.g. attr=\"some-{{thing | filter}}\", in order to combine\n * the whole thing into a single watchable expression, we\n * have to inline those filters. This function does exactly\n * that. This is a bit hacky but it avoids heavy changes\n * to directive parser and watcher mechanism.\n *\n * @param {String} exp\n * @param {Boolean} single\n * @return {String}\n */\n\nvar filterRE = /[^|]\\|[^|]/;\nfunction inlineFilters(exp, single) {\n  if (!filterRE.test(exp)) {\n    return single ? exp : '(' + exp + ')';\n  } else {\n    var dir = parseDirective(exp);\n    if (!dir.filters) {\n      return '(' + exp + ')';\n    } else {\n      return 'this._applyFilters(' + dir.expression + // value\n      ',null,' + // oldValue (null for read)\n      JSON.stringify(dir.filters) + // filter descriptors\n      ',false)'; // write?\n    }\n  }\n}\n\nvar text = Object.freeze({\n  compileRegex: compileRegex,\n  parseText: parseText,\n  tokensToExp: tokensToExp\n});\n\nvar delimiters = ['{{', '}}'];\nvar unsafeDelimiters = ['{{{', '}}}'];\n\nvar config = Object.defineProperties({\n\n  /**\n   * Whether to print debug messages.\n   * Also enables stack trace for warnings.\n   *\n   * @type {Boolean}\n   */\n\n  debug: false,\n\n  /**\n   * Whether to suppress warnings.\n   *\n   * @type {Boolean}\n   */\n\n  silent: false,\n\n  /**\n   * Whether to use async rendering.\n   */\n\n  async: true,\n\n  /**\n   * Whether to warn against errors caught when evaluating\n   * expressions.\n   */\n\n  warnExpressionErrors: true,\n\n  /**\n   * Whether to allow devtools inspection.\n   * Disabled by default in production builds.\n   */\n\n  devtools: process.env.NODE_ENV !== 'production',\n\n  /**\n   * Internal flag to indicate the delimiters have been\n   * changed.\n   *\n   * @type {Boolean}\n   */\n\n  _delimitersChanged: true,\n\n  /**\n   * List of asset types that a component can own.\n   *\n   * @type {Array}\n   */\n\n  _assetTypes: ['component', 'directive', 'elementDirective', 'filter', 'transition', 'partial'],\n\n  /**\n   * prop binding modes\n   */\n\n  _propBindingModes: {\n    ONE_WAY: 0,\n    TWO_WAY: 1,\n    ONE_TIME: 2\n  },\n\n  /**\n   * Max circular updates allowed in a batcher flush cycle.\n   */\n\n  _maxUpdateCount: 100\n\n}, {\n  delimiters: { /**\n                 * Interpolation delimiters. Changing these would trigger\n                 * the text parser to re-compile the regular expressions.\n                 *\n                 * @type {Array<String>}\n                 */\n\n    get: function get() {\n      return delimiters;\n    },\n    set: function set(val) {\n      delimiters = val;\n      compileRegex();\n    },\n    configurable: true,\n    enumerable: true\n  },\n  unsafeDelimiters: {\n    get: function get() {\n      return unsafeDelimiters;\n    },\n    set: function set(val) {\n      unsafeDelimiters = val;\n      compileRegex();\n    },\n    configurable: true,\n    enumerable: true\n  }\n});\n\nvar warn = undefined;\nvar formatComponentName = undefined;\n\nif (process.env.NODE_ENV !== 'production') {\n  (function () {\n    var hasConsole = typeof console !== 'undefined';\n\n    warn = function (msg, vm) {\n      if (hasConsole && !config.silent) {\n        console.error('[Vue warn]: ' + msg + (vm ? formatComponentName(vm) : ''));\n      }\n    };\n\n    formatComponentName = function (vm) {\n      var name = vm._isVue ? vm.$options.name : vm.name;\n      return name ? ' (found in component: <' + hyphenate(name) + '>)' : '';\n    };\n  })();\n}\n\n/**\n * Append with transition.\n *\n * @param {Element} el\n * @param {Element} target\n * @param {Vue} vm\n * @param {Function} [cb]\n */\n\nfunction appendWithTransition(el, target, vm, cb) {\n  applyTransition(el, 1, function () {\n    target.appendChild(el);\n  }, vm, cb);\n}\n\n/**\n * InsertBefore with transition.\n *\n * @param {Element} el\n * @param {Element} target\n * @param {Vue} vm\n * @param {Function} [cb]\n */\n\nfunction beforeWithTransition(el, target, vm, cb) {\n  applyTransition(el, 1, function () {\n    before(el, target);\n  }, vm, cb);\n}\n\n/**\n * Remove with transition.\n *\n * @param {Element} el\n * @param {Vue} vm\n * @param {Function} [cb]\n */\n\nfunction removeWithTransition(el, vm, cb) {\n  applyTransition(el, -1, function () {\n    remove(el);\n  }, vm, cb);\n}\n\n/**\n * Apply transitions with an operation callback.\n *\n * @param {Element} el\n * @param {Number} direction\n *                  1: enter\n *                 -1: leave\n * @param {Function} op - the actual DOM operation\n * @param {Vue} vm\n * @param {Function} [cb]\n */\n\nfunction applyTransition(el, direction, op, vm, cb) {\n  var transition = el.__v_trans;\n  if (!transition ||\n  // skip if there are no js hooks and CSS transition is\n  // not supported\n  !transition.hooks && !transitionEndEvent ||\n  // skip transitions for initial compile\n  !vm._isCompiled ||\n  // if the vm is being manipulated by a parent directive\n  // during the parent's compilation phase, skip the\n  // animation.\n  vm.$parent && !vm.$parent._isCompiled) {\n    op();\n    if (cb) cb();\n    return;\n  }\n  var action = direction > 0 ? 'enter' : 'leave';\n  transition[action](op, cb);\n}\n\nvar transition = Object.freeze({\n  appendWithTransition: appendWithTransition,\n  beforeWithTransition: beforeWithTransition,\n  removeWithTransition: removeWithTransition,\n  applyTransition: applyTransition\n});\n\n/**\n * Query an element selector if it's not an element already.\n *\n * @param {String|Element} el\n * @return {Element}\n */\n\nfunction query(el) {\n  if (typeof el === 'string') {\n    var selector = el;\n    el = document.querySelector(el);\n    if (!el) {\n      process.env.NODE_ENV !== 'production' && warn('Cannot find element: ' + selector);\n    }\n  }\n  return el;\n}\n\n/**\n * Check if a node is in the document.\n * Note: document.documentElement.contains should work here\n * but always returns false for comment nodes in phantomjs,\n * making unit tests difficult. This is fixed by doing the\n * contains() check on the node's parentNode instead of\n * the node itself.\n *\n * @param {Node} node\n * @return {Boolean}\n */\n\nfunction inDoc(node) {\n  if (!node) return false;\n  var doc = node.ownerDocument.documentElement;\n  var parent = node.parentNode;\n  return doc === node || doc === parent || !!(parent && parent.nodeType === 1 && doc.contains(parent));\n}\n\n/**\n * Get and remove an attribute from a node.\n *\n * @param {Node} node\n * @param {String} _attr\n */\n\nfunction getAttr(node, _attr) {\n  var val = node.getAttribute(_attr);\n  if (val !== null) {\n    node.removeAttribute(_attr);\n  }\n  return val;\n}\n\n/**\n * Get an attribute with colon or v-bind: prefix.\n *\n * @param {Node} node\n * @param {String} name\n * @return {String|null}\n */\n\nfunction getBindAttr(node, name) {\n  var val = getAttr(node, ':' + name);\n  if (val === null) {\n    val = getAttr(node, 'v-bind:' + name);\n  }\n  return val;\n}\n\n/**\n * Check the presence of a bind attribute.\n *\n * @param {Node} node\n * @param {String} name\n * @return {Boolean}\n */\n\nfunction hasBindAttr(node, name) {\n  return node.hasAttribute(name) || node.hasAttribute(':' + name) || node.hasAttribute('v-bind:' + name);\n}\n\n/**\n * Insert el before target\n *\n * @param {Element} el\n * @param {Element} target\n */\n\nfunction before(el, target) {\n  target.parentNode.insertBefore(el, target);\n}\n\n/**\n * Insert el after target\n *\n * @param {Element} el\n * @param {Element} target\n */\n\nfunction after(el, target) {\n  if (target.nextSibling) {\n    before(el, target.nextSibling);\n  } else {\n    target.parentNode.appendChild(el);\n  }\n}\n\n/**\n * Remove el from DOM\n *\n * @param {Element} el\n */\n\nfunction remove(el) {\n  el.parentNode.removeChild(el);\n}\n\n/**\n * Prepend el to target\n *\n * @param {Element} el\n * @param {Element} target\n */\n\nfunction prepend(el, target) {\n  if (target.firstChild) {\n    before(el, target.firstChild);\n  } else {\n    target.appendChild(el);\n  }\n}\n\n/**\n * Replace target with el\n *\n * @param {Element} target\n * @param {Element} el\n */\n\nfunction replace(target, el) {\n  var parent = target.parentNode;\n  if (parent) {\n    parent.replaceChild(el, target);\n  }\n}\n\n/**\n * Add event listener shorthand.\n *\n * @param {Element} el\n * @param {String} event\n * @param {Function} cb\n * @param {Boolean} [useCapture]\n */\n\nfunction on(el, event, cb, useCapture) {\n  el.addEventListener(event, cb, useCapture);\n}\n\n/**\n * Remove event listener shorthand.\n *\n * @param {Element} el\n * @param {String} event\n * @param {Function} cb\n */\n\nfunction off(el, event, cb) {\n  el.removeEventListener(event, cb);\n}\n\n/**\n * For IE9 compat: when both class and :class are present\n * getAttribute('class') returns wrong value...\n *\n * @param {Element} el\n * @return {String}\n */\n\nfunction getClass(el) {\n  var classname = el.className;\n  if (typeof classname === 'object') {\n    classname = classname.baseVal || '';\n  }\n  return classname;\n}\n\n/**\n * In IE9, setAttribute('class') will result in empty class\n * if the element also has the :class attribute; However in\n * PhantomJS, setting `className` does not work on SVG elements...\n * So we have to do a conditional check here.\n *\n * @param {Element} el\n * @param {String} cls\n */\n\nfunction setClass(el, cls) {\n  /* istanbul ignore if */\n  if (isIE9 && !/svg$/.test(el.namespaceURI)) {\n    el.className = cls;\n  } else {\n    el.setAttribute('class', cls);\n  }\n}\n\n/**\n * Add class with compatibility for IE & SVG\n *\n * @param {Element} el\n * @param {String} cls\n */\n\nfunction addClass(el, cls) {\n  if (el.classList) {\n    el.classList.add(cls);\n  } else {\n    var cur = ' ' + getClass(el) + ' ';\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      setClass(el, (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for IE & SVG\n *\n * @param {Element} el\n * @param {String} cls\n */\n\nfunction removeClass(el, cls) {\n  if (el.classList) {\n    el.classList.remove(cls);\n  } else {\n    var cur = ' ' + getClass(el) + ' ';\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    setClass(el, cur.trim());\n  }\n  if (!el.className) {\n    el.removeAttribute('class');\n  }\n}\n\n/**\n * Extract raw content inside an element into a temporary\n * container div\n *\n * @param {Element} el\n * @param {Boolean} asFragment\n * @return {Element|DocumentFragment}\n */\n\nfunction extractContent(el, asFragment) {\n  var child;\n  var rawContent;\n  /* istanbul ignore if */\n  if (isTemplate(el) && isFragment(el.content)) {\n    el = el.content;\n  }\n  if (el.hasChildNodes()) {\n    trimNode(el);\n    rawContent = asFragment ? document.createDocumentFragment() : document.createElement('div');\n    /* eslint-disable no-cond-assign */\n    while (child = el.firstChild) {\n      /* eslint-enable no-cond-assign */\n      rawContent.appendChild(child);\n    }\n  }\n  return rawContent;\n}\n\n/**\n * Trim possible empty head/tail text and comment\n * nodes inside a parent.\n *\n * @param {Node} node\n */\n\nfunction trimNode(node) {\n  var child;\n  /* eslint-disable no-sequences */\n  while ((child = node.firstChild, isTrimmable(child))) {\n    node.removeChild(child);\n  }\n  while ((child = node.lastChild, isTrimmable(child))) {\n    node.removeChild(child);\n  }\n  /* eslint-enable no-sequences */\n}\n\nfunction isTrimmable(node) {\n  return node && (node.nodeType === 3 && !node.data.trim() || node.nodeType === 8);\n}\n\n/**\n * Check if an element is a template tag.\n * Note if the template appears inside an SVG its tagName\n * will be in lowercase.\n *\n * @param {Element} el\n */\n\nfunction isTemplate(el) {\n  return el.tagName && el.tagName.toLowerCase() === 'template';\n}\n\n/**\n * Create an \"anchor\" for performing dom insertion/removals.\n * This is used in a number of scenarios:\n * - fragment instance\n * - v-html\n * - v-if\n * - v-for\n * - component\n *\n * @param {String} content\n * @param {Boolean} persist - IE trashes empty textNodes on\n *                            cloneNode(true), so in certain\n *                            cases the anchor needs to be\n *                            non-empty to be persisted in\n *                            templates.\n * @return {Comment|Text}\n */\n\nfunction createAnchor(content, persist) {\n  var anchor = config.debug ? document.createComment(content) : document.createTextNode(persist ? ' ' : '');\n  anchor.__v_anchor = true;\n  return anchor;\n}\n\n/**\n * Find a component ref attribute that starts with $.\n *\n * @param {Element} node\n * @return {String|undefined}\n */\n\nvar refRE = /^v-ref:/;\n\nfunction findRef(node) {\n  if (node.hasAttributes()) {\n    var attrs = node.attributes;\n    for (var i = 0, l = attrs.length; i < l; i++) {\n      var name = attrs[i].name;\n      if (refRE.test(name)) {\n        return camelize(name.replace(refRE, ''));\n      }\n    }\n  }\n}\n\n/**\n * Map a function to a range of nodes .\n *\n * @param {Node} node\n * @param {Node} end\n * @param {Function} op\n */\n\nfunction mapNodeRange(node, end, op) {\n  var next;\n  while (node !== end) {\n    next = node.nextSibling;\n    op(node);\n    node = next;\n  }\n  op(end);\n}\n\n/**\n * Remove a range of nodes with transition, store\n * the nodes in a fragment with correct ordering,\n * and call callback when done.\n *\n * @param {Node} start\n * @param {Node} end\n * @param {Vue} vm\n * @param {DocumentFragment} frag\n * @param {Function} cb\n */\n\nfunction removeNodeRange(start, end, vm, frag, cb) {\n  var done = false;\n  var removed = 0;\n  var nodes = [];\n  mapNodeRange(start, end, function (node) {\n    if (node === end) done = true;\n    nodes.push(node);\n    removeWithTransition(node, vm, onRemoved);\n  });\n  function onRemoved() {\n    removed++;\n    if (done && removed >= nodes.length) {\n      for (var i = 0; i < nodes.length; i++) {\n        frag.appendChild(nodes[i]);\n      }\n      cb && cb();\n    }\n  }\n}\n\n/**\n * Check if a node is a DocumentFragment.\n *\n * @param {Node} node\n * @return {Boolean}\n */\n\nfunction isFragment(node) {\n  return node && node.nodeType === 11;\n}\n\n/**\n * Get outerHTML of elements, taking care\n * of SVG elements in IE as well.\n *\n * @param {Element} el\n * @return {String}\n */\n\nfunction getOuterHTML(el) {\n  if (el.outerHTML) {\n    return el.outerHTML;\n  } else {\n    var container = document.createElement('div');\n    container.appendChild(el.cloneNode(true));\n    return container.innerHTML;\n  }\n}\n\nvar commonTagRE = /^(div|p|span|img|a|b|i|br|ul|ol|li|h1|h2|h3|h4|h5|h6|code|pre|table|th|td|tr|form|label|input|select|option|nav|article|section|header|footer)$/i;\nvar reservedTagRE = /^(slot|partial|component)$/i;\n\nvar isUnknownElement = undefined;\nif (process.env.NODE_ENV !== 'production') {\n  isUnknownElement = function (el, tag) {\n    if (tag.indexOf('-') > -1) {\n      // http://stackoverflow.com/a/28210364/1070244\n      return el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;\n    } else {\n      return (/HTMLUnknownElement/.test(el.toString()) &&\n        // Chrome returns unknown for several HTML5 elements.\n        // https://code.google.com/p/chromium/issues/detail?id=540526\n        // Firefox returns unknown for some \"Interactive elements.\"\n        !/^(data|time|rtc|rb|details|dialog|summary)$/.test(tag)\n      );\n    }\n  };\n}\n\n/**\n * Check if an element is a component, if yes return its\n * component id.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Object|undefined}\n */\n\nfunction checkComponentAttr(el, options) {\n  var tag = el.tagName.toLowerCase();\n  var hasAttrs = el.hasAttributes();\n  if (!commonTagRE.test(tag) && !reservedTagRE.test(tag)) {\n    if (resolveAsset(options, 'components', tag)) {\n      return { id: tag };\n    } else {\n      var is = hasAttrs && getIsBinding(el, options);\n      if (is) {\n        return is;\n      } else if (process.env.NODE_ENV !== 'production') {\n        var expectedTag = options._componentNameMap && options._componentNameMap[tag];\n        if (expectedTag) {\n          warn('Unknown custom element: <' + tag + '> - ' + 'did you mean <' + expectedTag + '>? ' + 'HTML is case-insensitive, remember to use kebab-case in templates.');\n        } else if (isUnknownElement(el, tag)) {\n          warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the \"name\" option.');\n        }\n      }\n    }\n  } else if (hasAttrs) {\n    return getIsBinding(el, options);\n  }\n}\n\n/**\n * Get \"is\" binding from an element.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Object|undefined}\n */\n\nfunction getIsBinding(el, options) {\n  // dynamic syntax\n  var exp = el.getAttribute('is');\n  if (exp != null) {\n    if (resolveAsset(options, 'components', exp)) {\n      el.removeAttribute('is');\n      return { id: exp };\n    }\n  } else {\n    exp = getBindAttr(el, 'is');\n    if (exp != null) {\n      return { id: exp, dynamic: true };\n    }\n  }\n}\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n *\n * All strategy functions follow the same signature:\n *\n * @param {*} parentVal\n * @param {*} childVal\n * @param {Vue} [vm]\n */\n\nvar strats = config.optionMergeStrategies = Object.create(null);\n\n/**\n * Helper that recursively merges two data objects together.\n */\n\nfunction mergeData(to, from) {\n  var key, toVal, fromVal;\n  for (key in from) {\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (isObject(toVal) && isObject(fromVal)) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to;\n}\n\n/**\n * Data\n */\n\nstrats.data = function (parentVal, childVal, vm) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal;\n    }\n    if (typeof childVal !== 'function') {\n      process.env.NODE_ENV !== 'production' && warn('The \"data\" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);\n      return parentVal;\n    }\n    if (!parentVal) {\n      return childVal;\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn() {\n      return mergeData(childVal.call(this), parentVal.call(this));\n    };\n  } else if (parentVal || childVal) {\n    return function mergedInstanceDataFn() {\n      // instance merge\n      var instanceData = typeof childVal === 'function' ? childVal.call(vm) : childVal;\n      var defaultData = typeof parentVal === 'function' ? parentVal.call(vm) : undefined;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData);\n      } else {\n        return defaultData;\n      }\n    };\n  }\n};\n\n/**\n * El\n */\n\nstrats.el = function (parentVal, childVal, vm) {\n  if (!vm && childVal && typeof childVal !== 'function') {\n    process.env.NODE_ENV !== 'production' && warn('The \"el\" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);\n    return;\n  }\n  var ret = childVal || parentVal;\n  // invoke the element factory if this is instance merge\n  return vm && typeof ret === 'function' ? ret.call(vm) : ret;\n};\n\n/**\n * Hooks and param attributes are merged as arrays.\n */\n\nstrats.init = strats.created = strats.ready = strats.attached = strats.detached = strats.beforeCompile = strats.compiled = strats.beforeDestroy = strats.destroyed = strats.activate = function (parentVal, childVal) {\n  return childVal ? parentVal ? parentVal.concat(childVal) : isArray(childVal) ? childVal : [childVal] : parentVal;\n};\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\n\nfunction mergeAssets(parentVal, childVal) {\n  var res = Object.create(parentVal || null);\n  return childVal ? extend(res, guardArrayAssets(childVal)) : res;\n}\n\nconfig._assetTypes.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Events & Watchers.\n *\n * Events & watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\n\nstrats.watch = strats.events = function (parentVal, childVal) {\n  if (!childVal) return parentVal;\n  if (!parentVal) return childVal;\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key in childVal) {\n    var parent = ret[key];\n    var child = childVal[key];\n    if (parent && !isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key] = parent ? parent.concat(child) : [child];\n  }\n  return ret;\n};\n\n/**\n * Other object hashes.\n */\n\nstrats.props = strats.methods = strats.computed = function (parentVal, childVal) {\n  if (!childVal) return parentVal;\n  if (!parentVal) return childVal;\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  extend(ret, childVal);\n  return ret;\n};\n\n/**\n * Default strategy.\n */\n\nvar defaultStrat = function defaultStrat(parentVal, childVal) {\n  return childVal === undefined ? parentVal : childVal;\n};\n\n/**\n * Make sure component options get converted to actual\n * constructors.\n *\n * @param {Object} options\n */\n\nfunction guardComponents(options) {\n  if (options.components) {\n    var components = options.components = guardArrayAssets(options.components);\n    var ids = Object.keys(components);\n    var def;\n    if (process.env.NODE_ENV !== 'production') {\n      var map = options._componentNameMap = {};\n    }\n    for (var i = 0, l = ids.length; i < l; i++) {\n      var key = ids[i];\n      if (commonTagRE.test(key) || reservedTagRE.test(key)) {\n        process.env.NODE_ENV !== 'production' && warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + key);\n        continue;\n      }\n      // record a all lowercase <-> kebab-case mapping for\n      // possible custom element case error warning\n      if (process.env.NODE_ENV !== 'production') {\n        map[key.replace(/-/g, '').toLowerCase()] = hyphenate(key);\n      }\n      def = components[key];\n      if (isPlainObject(def)) {\n        components[key] = Vue.extend(def);\n      }\n    }\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n *\n * @param {Object} options\n */\n\nfunction guardProps(options) {\n  var props = options.props;\n  var i, val;\n  if (isArray(props)) {\n    options.props = {};\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        options.props[val] = null;\n      } else if (val.name) {\n        options.props[val.name] = val;\n      }\n    }\n  } else if (isPlainObject(props)) {\n    var keys = Object.keys(props);\n    i = keys.length;\n    while (i--) {\n      val = props[keys[i]];\n      if (typeof val === 'function') {\n        props[keys[i]] = { type: val };\n      }\n    }\n  }\n}\n\n/**\n * Guard an Array-format assets option and converted it\n * into the key-value Object format.\n *\n * @param {Object|Array} assets\n * @return {Object}\n */\n\nfunction guardArrayAssets(assets) {\n  if (isArray(assets)) {\n    var res = {};\n    var i = assets.length;\n    var asset;\n    while (i--) {\n      asset = assets[i];\n      var id = typeof asset === 'function' ? asset.options && asset.options.name || asset.id : asset.name || asset.id;\n      if (!id) {\n        process.env.NODE_ENV !== 'production' && warn('Array-syntax assets must provide a \"name\" or \"id\" field.');\n      } else {\n        res[id] = asset;\n      }\n    }\n    return res;\n  }\n  return assets;\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n *\n * @param {Object} parent\n * @param {Object} child\n * @param {Vue} [vm] - if vm is present, indicates this is\n *                     an instantiation merge.\n */\n\nfunction mergeOptions(parent, child, vm) {\n  guardComponents(child);\n  guardProps(child);\n  if (process.env.NODE_ENV !== 'production') {\n    if (child.propsData && !vm) {\n      warn('propsData can only be used as an instantiation option.');\n    }\n  }\n  var options = {};\n  var key;\n  if (child['extends']) {\n    parent = typeof child['extends'] === 'function' ? mergeOptions(parent, child['extends'].options, vm) : mergeOptions(parent, child['extends'], vm);\n  }\n  if (child.mixins) {\n    for (var i = 0, l = child.mixins.length; i < l; i++) {\n      var mixin = child.mixins[i];\n      var mixinOptions = mixin.prototype instanceof Vue ? mixin.options : mixin;\n      parent = mergeOptions(parent, mixinOptions, vm);\n    }\n  }\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField(key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options;\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n *\n * @param {Object} options\n * @param {String} type\n * @param {String} id\n * @param {Boolean} warnMissing\n * @return {Object|Function}\n */\n\nfunction resolveAsset(options, type, id, warnMissing) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return;\n  }\n  var assets = options[type];\n  var camelizedId;\n  var res = assets[id] ||\n  // camelCase ID\n  assets[camelizedId = camelize(id)] ||\n  // Pascal Case ID\n  assets[camelizedId.charAt(0).toUpperCase() + camelizedId.slice(1)];\n  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {\n    warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);\n  }\n  return res;\n}\n\nvar uid$1 = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n *\n * @constructor\n */\nfunction Dep() {\n  this.id = uid$1++;\n  this.subs = [];\n}\n\n// the current target watcher being evaluated.\n// this is globally unique because there could be only one\n// watcher being evaluated at any time.\nDep.target = null;\n\n/**\n * Add a directive subscriber.\n *\n * @param {Directive} sub\n */\n\nDep.prototype.addSub = function (sub) {\n  this.subs.push(sub);\n};\n\n/**\n * Remove a directive subscriber.\n *\n * @param {Directive} sub\n */\n\nDep.prototype.removeSub = function (sub) {\n  this.subs.$remove(sub);\n};\n\n/**\n * Add self as a dependency to the target watcher.\n */\n\nDep.prototype.depend = function () {\n  Dep.target.addDep(this);\n};\n\n/**\n * Notify all subscribers of a new value.\n */\n\nDep.prototype.notify = function () {\n  // stablize the subscriber list first\n  var subs = toArray(this.subs);\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto)\n\n/**\n * Intercept mutating methods and emit events\n */\n\n;['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'].forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator() {\n    // avoid leaking arguments:\n    // http://jsperf.com/closure-with-arguments\n    var i = arguments.length;\n    var args = new Array(i);\n    while (i--) {\n      args[i] = arguments[i];\n    }\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n        inserted = args;\n        break;\n      case 'unshift':\n        inserted = args;\n        break;\n      case 'splice':\n        inserted = args.slice(2);\n        break;\n    }\n    if (inserted) ob.observeArray(inserted);\n    // notify change\n    ob.dep.notify();\n    return result;\n  });\n});\n\n/**\n * Swap the element at the given index with a new value\n * and emits corresponding event.\n *\n * @param {Number} index\n * @param {*} val\n * @return {*} - replaced element\n */\n\ndef(arrayProto, '$set', function $set(index, val) {\n  if (index >= this.length) {\n    this.length = Number(index) + 1;\n  }\n  return this.splice(index, 1, val)[0];\n});\n\n/**\n * Convenience method to remove the element at given index or target element reference.\n *\n * @param {*} item\n */\n\ndef(arrayProto, '$remove', function $remove(item) {\n  /* istanbul ignore if */\n  if (!this.length) return;\n  var index = indexOf(this, item);\n  if (index > -1) {\n    return this.splice(index, 1);\n  }\n});\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * By default, when a reactive property is set, the new value is\n * also converted to become reactive. However in certain cases, e.g.\n * v-for scope alias and props, we don't want to force conversion\n * because the value may be a nested value under a frozen data structure.\n *\n * So whenever we want to set a reactive property without forcing\n * conversion on the new value, we wrap that call inside this function.\n */\n\nvar shouldConvert = true;\n\nfunction withoutConversion(fn) {\n  shouldConvert = false;\n  fn();\n  shouldConvert = true;\n}\n\n/**\n * Observer class that are attached to each observed\n * object. Once attached, the observer converts target\n * object's property keys into getter/setters that\n * collect dependencies and dispatches updates.\n *\n * @param {Array|Object} value\n * @constructor\n */\n\nfunction Observer(value) {\n  this.value = value;\n  this.dep = new Dep();\n  def(value, '__ob__', this);\n  if (isArray(value)) {\n    var augment = hasProto ? protoAugment : copyAugment;\n    augment(value, arrayMethods, arrayKeys);\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n}\n\n// Instance methods\n\n/**\n * Walk through each property and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n *\n * @param {Object} obj\n */\n\nObserver.prototype.walk = function (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0, l = keys.length; i < l; i++) {\n    this.convert(keys[i], obj[keys[i]]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n *\n * @param {Array} items\n */\n\nObserver.prototype.observeArray = function (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n/**\n * Convert a property into getter/setter so we can emit\n * the events when the property is accessed/changed.\n *\n * @param {String} key\n * @param {*} val\n */\n\nObserver.prototype.convert = function (key, val) {\n  defineReactive(this.value, key, val);\n};\n\n/**\n * Add an owner vm, so that when $set/$delete mutations\n * happen we can notify owner vms to proxy the keys and\n * digest the watchers. This is only called when the object\n * is observed as an instance's root $data.\n *\n * @param {Vue} vm\n */\n\nObserver.prototype.addVm = function (vm) {\n  (this.vms || (this.vms = [])).push(vm);\n};\n\n/**\n * Remove an owner vm. This is called when the object is\n * swapped out as an instance's $data object.\n *\n * @param {Vue} vm\n */\n\nObserver.prototype.removeVm = function (vm) {\n  this.vms.$remove(vm);\n};\n\n// helpers\n\n/**\n * Augment an target Object or Array by intercepting\n * the prototype chain using __proto__\n *\n * @param {Object|Array} target\n * @param {Object} src\n */\n\nfunction protoAugment(target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment an target Object or Array by defining\n * hidden properties.\n *\n * @param {Object|Array} target\n * @param {Object} proto\n */\n\nfunction copyAugment(target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n *\n * @param {*} value\n * @param {Vue} [vm]\n * @return {Observer|undefined}\n * @static\n */\n\nfunction observe(value, vm) {\n  if (!value || typeof value !== 'object') {\n    return;\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (shouldConvert && (isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {\n    ob = new Observer(value);\n  }\n  if (ob && vm) {\n    ob.addVm(vm);\n  }\n  return ob;\n}\n\n/**\n * Define a reactive property on an Object.\n *\n * @param {Object} obj\n * @param {String} key\n * @param {*} val\n */\n\nfunction defineReactive(obj, key, val) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return;\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n\n  var childOb = observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter() {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n        }\n        if (isArray(value)) {\n          for (var e, i = 0, l = value.length; i < l; i++) {\n            e = value[i];\n            e && e.__ob__ && e.__ob__.dep.depend();\n          }\n        }\n      }\n      return value;\n    },\n    set: function reactiveSetter(newVal) {\n      var value = getter ? getter.call(obj) : val;\n      if (newVal === value) {\n        return;\n      }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n\n\nvar util = Object.freeze({\n\tdefineReactive: defineReactive,\n\tset: set,\n\tdel: del,\n\thasOwn: hasOwn,\n\tisLiteral: isLiteral,\n\tisReserved: isReserved,\n\t_toString: _toString,\n\ttoNumber: toNumber,\n\ttoBoolean: toBoolean,\n\tstripQuotes: stripQuotes,\n\tcamelize: camelize,\n\thyphenate: hyphenate,\n\tclassify: classify,\n\tbind: bind,\n\ttoArray: toArray,\n\textend: extend,\n\tisObject: isObject,\n\tisPlainObject: isPlainObject,\n\tdef: def,\n\tdebounce: _debounce,\n\tindexOf: indexOf,\n\tcancellable: cancellable,\n\tlooseEqual: looseEqual,\n\tisArray: isArray,\n\thasProto: hasProto,\n\tinBrowser: inBrowser,\n\tdevtools: devtools,\n\tisIE: isIE,\n\tisIE9: isIE9,\n\tisAndroid: isAndroid,\n\tisIos: isIos,\n\tiosVersionMatch: iosVersionMatch,\n\tiosVersion: iosVersion,\n\thasMutationObserverBug: hasMutationObserverBug,\n\tget transitionProp () { return transitionProp; },\n\tget transitionEndEvent () { return transitionEndEvent; },\n\tget animationProp () { return animationProp; },\n\tget animationEndEvent () { return animationEndEvent; },\n\tnextTick: nextTick,\n\tget _Set () { return _Set; },\n\tquery: query,\n\tinDoc: inDoc,\n\tgetAttr: getAttr,\n\tgetBindAttr: getBindAttr,\n\thasBindAttr: hasBindAttr,\n\tbefore: before,\n\tafter: after,\n\tremove: remove,\n\tprepend: prepend,\n\treplace: replace,\n\ton: on,\n\toff: off,\n\tsetClass: setClass,\n\taddClass: addClass,\n\tremoveClass: removeClass,\n\textractContent: extractContent,\n\ttrimNode: trimNode,\n\tisTemplate: isTemplate,\n\tcreateAnchor: createAnchor,\n\tfindRef: findRef,\n\tmapNodeRange: mapNodeRange,\n\tremoveNodeRange: removeNodeRange,\n\tisFragment: isFragment,\n\tgetOuterHTML: getOuterHTML,\n\tmergeOptions: mergeOptions,\n\tresolveAsset: resolveAsset,\n\tcheckComponentAttr: checkComponentAttr,\n\tcommonTagRE: commonTagRE,\n\treservedTagRE: reservedTagRE,\n\tget warn () { return warn; }\n});\n\nvar uid = 0;\n\nfunction initMixin (Vue) {\n  /**\n   * The main init sequence. This is called for every\n   * instance, including ones that are created from extended\n   * constructors.\n   *\n   * @param {Object} options - this options object should be\n   *                           the result of merging class\n   *                           options and the options passed\n   *                           in to the constructor.\n   */\n\n  Vue.prototype._init = function (options) {\n    options = options || {};\n\n    this.$el = null;\n    this.$parent = options.parent;\n    this.$root = this.$parent ? this.$parent.$root : this;\n    this.$children = [];\n    this.$refs = {}; // child vm references\n    this.$els = {}; // element references\n    this._watchers = []; // all watchers as an array\n    this._directives = []; // all directives\n\n    // a uid\n    this._uid = uid++;\n\n    // a flag to avoid this being observed\n    this._isVue = true;\n\n    // events bookkeeping\n    this._events = {}; // registered callbacks\n    this._eventsCount = {}; // for $broadcast optimization\n\n    // fragment instance properties\n    this._isFragment = false;\n    this._fragment = // @type {DocumentFragment}\n    this._fragmentStart = // @type {Text|Comment}\n    this._fragmentEnd = null; // @type {Text|Comment}\n\n    // lifecycle state\n    this._isCompiled = this._isDestroyed = this._isReady = this._isAttached = this._isBeingDestroyed = this._vForRemoving = false;\n    this._unlinkFn = null;\n\n    // context:\n    // if this is a transcluded component, context\n    // will be the common parent vm of this instance\n    // and its host.\n    this._context = options._context || this.$parent;\n\n    // scope:\n    // if this is inside an inline v-for, the scope\n    // will be the intermediate scope created for this\n    // repeat fragment. this is used for linking props\n    // and container directives.\n    this._scope = options._scope;\n\n    // fragment:\n    // if this instance is compiled inside a Fragment, it\n    // needs to reigster itself as a child of that fragment\n    // for attach/detach to work properly.\n    this._frag = options._frag;\n    if (this._frag) {\n      this._frag.children.push(this);\n    }\n\n    // push self into parent / transclusion host\n    if (this.$parent) {\n      this.$parent.$children.push(this);\n    }\n\n    // merge options.\n    options = this.$options = mergeOptions(this.constructor.options, options, this);\n\n    // set ref\n    this._updateRef();\n\n    // initialize data as empty object.\n    // it will be filled up in _initData().\n    this._data = {};\n\n    // call init hook\n    this._callHook('init');\n\n    // initialize data observation and scope inheritance.\n    this._initState();\n\n    // setup event system and option events.\n    this._initEvents();\n\n    // call created hook\n    this._callHook('created');\n\n    // if `el` option is passed, start compilation.\n    if (options.el) {\n      this.$mount(options.el);\n    }\n  };\n}\n\nvar pathCache = new Cache(1000);\n\n// actions\nvar APPEND = 0;\nvar PUSH = 1;\nvar INC_SUB_PATH_DEPTH = 2;\nvar PUSH_SUB_PATH = 3;\n\n// states\nvar BEFORE_PATH = 0;\nvar IN_PATH = 1;\nvar BEFORE_IDENT = 2;\nvar IN_IDENT = 3;\nvar IN_SUB_PATH = 4;\nvar IN_SINGLE_QUOTE = 5;\nvar IN_DOUBLE_QUOTE = 6;\nvar AFTER_PATH = 7;\nvar ERROR = 8;\n\nvar pathStateMachine = [];\n\npathStateMachine[BEFORE_PATH] = {\n  'ws': [BEFORE_PATH],\n  'ident': [IN_IDENT, APPEND],\n  '[': [IN_SUB_PATH],\n  'eof': [AFTER_PATH]\n};\n\npathStateMachine[IN_PATH] = {\n  'ws': [IN_PATH],\n  '.': [BEFORE_IDENT],\n  '[': [IN_SUB_PATH],\n  'eof': [AFTER_PATH]\n};\n\npathStateMachine[BEFORE_IDENT] = {\n  'ws': [BEFORE_IDENT],\n  'ident': [IN_IDENT, APPEND]\n};\n\npathStateMachine[IN_IDENT] = {\n  'ident': [IN_IDENT, APPEND],\n  '0': [IN_IDENT, APPEND],\n  'number': [IN_IDENT, APPEND],\n  'ws': [IN_PATH, PUSH],\n  '.': [BEFORE_IDENT, PUSH],\n  '[': [IN_SUB_PATH, PUSH],\n  'eof': [AFTER_PATH, PUSH]\n};\n\npathStateMachine[IN_SUB_PATH] = {\n  \"'\": [IN_SINGLE_QUOTE, APPEND],\n  '\"': [IN_DOUBLE_QUOTE, APPEND],\n  '[': [IN_SUB_PATH, INC_SUB_PATH_DEPTH],\n  ']': [IN_PATH, PUSH_SUB_PATH],\n  'eof': ERROR,\n  'else': [IN_SUB_PATH, APPEND]\n};\n\npathStateMachine[IN_SINGLE_QUOTE] = {\n  \"'\": [IN_SUB_PATH, APPEND],\n  'eof': ERROR,\n  'else': [IN_SINGLE_QUOTE, APPEND]\n};\n\npathStateMachine[IN_DOUBLE_QUOTE] = {\n  '\"': [IN_SUB_PATH, APPEND],\n  'eof': ERROR,\n  'else': [IN_DOUBLE_QUOTE, APPEND]\n};\n\n/**\n * Determine the type of a character in a keypath.\n *\n * @param {Char} ch\n * @return {String} type\n */\n\nfunction getPathCharType(ch) {\n  if (ch === undefined) {\n    return 'eof';\n  }\n\n  var code = ch.charCodeAt(0);\n\n  switch (code) {\n    case 0x5B: // [\n    case 0x5D: // ]\n    case 0x2E: // .\n    case 0x22: // \"\n    case 0x27: // '\n    case 0x30:\n      // 0\n      return ch;\n\n    case 0x5F: // _\n    case 0x24:\n      // $\n      return 'ident';\n\n    case 0x20: // Space\n    case 0x09: // Tab\n    case 0x0A: // Newline\n    case 0x0D: // Return\n    case 0xA0: // No-break space\n    case 0xFEFF: // Byte Order Mark\n    case 0x2028: // Line Separator\n    case 0x2029:\n      // Paragraph Separator\n      return 'ws';\n  }\n\n  // a-z, A-Z\n  if (code >= 0x61 && code <= 0x7A || code >= 0x41 && code <= 0x5A) {\n    return 'ident';\n  }\n\n  // 1-9\n  if (code >= 0x31 && code <= 0x39) {\n    return 'number';\n  }\n\n  return 'else';\n}\n\n/**\n * Format a subPath, return its plain form if it is\n * a literal string or number. Otherwise prepend the\n * dynamic indicator (*).\n *\n * @param {String} path\n * @return {String}\n */\n\nfunction formatSubPath(path) {\n  var trimmed = path.trim();\n  // invalid leading 0\n  if (path.charAt(0) === '0' && isNaN(path)) {\n    return false;\n  }\n  return isLiteral(trimmed) ? stripQuotes(trimmed) : '*' + trimmed;\n}\n\n/**\n * Parse a string path into an array of segments\n *\n * @param {String} path\n * @return {Array|undefined}\n */\n\nfunction parse(path) {\n  var keys = [];\n  var index = -1;\n  var mode = BEFORE_PATH;\n  var subPathDepth = 0;\n  var c, newChar, key, type, transition, action, typeMap;\n\n  var actions = [];\n\n  actions[PUSH] = function () {\n    if (key !== undefined) {\n      keys.push(key);\n      key = undefined;\n    }\n  };\n\n  actions[APPEND] = function () {\n    if (key === undefined) {\n      key = newChar;\n    } else {\n      key += newChar;\n    }\n  };\n\n  actions[INC_SUB_PATH_DEPTH] = function () {\n    actions[APPEND]();\n    subPathDepth++;\n  };\n\n  actions[PUSH_SUB_PATH] = function () {\n    if (subPathDepth > 0) {\n      subPathDepth--;\n      mode = IN_SUB_PATH;\n      actions[APPEND]();\n    } else {\n      subPathDepth = 0;\n      key = formatSubPath(key);\n      if (key === false) {\n        return false;\n      } else {\n        actions[PUSH]();\n      }\n    }\n  };\n\n  function maybeUnescapeQuote() {\n    var nextChar = path[index + 1];\n    if (mode === IN_SINGLE_QUOTE && nextChar === \"'\" || mode === IN_DOUBLE_QUOTE && nextChar === '\"') {\n      index++;\n      newChar = '\\\\' + nextChar;\n      actions[APPEND]();\n      return true;\n    }\n  }\n\n  while (mode != null) {\n    index++;\n    c = path[index];\n\n    if (c === '\\\\' && maybeUnescapeQuote()) {\n      continue;\n    }\n\n    type = getPathCharType(c);\n    typeMap = pathStateMachine[mode];\n    transition = typeMap[type] || typeMap['else'] || ERROR;\n\n    if (transition === ERROR) {\n      return; // parse error\n    }\n\n    mode = transition[0];\n    action = actions[transition[1]];\n    if (action) {\n      newChar = transition[2];\n      newChar = newChar === undefined ? c : newChar;\n      if (action() === false) {\n        return;\n      }\n    }\n\n    if (mode === AFTER_PATH) {\n      keys.raw = path;\n      return keys;\n    }\n  }\n}\n\n/**\n * External parse that check for a cache hit first\n *\n * @param {String} path\n * @return {Array|undefined}\n */\n\nfunction parsePath(path) {\n  var hit = pathCache.get(path);\n  if (!hit) {\n    hit = parse(path);\n    if (hit) {\n      pathCache.put(path, hit);\n    }\n  }\n  return hit;\n}\n\n/**\n * Get from an object from a path string\n *\n * @param {Object} obj\n * @param {String} path\n */\n\nfunction getPath(obj, path) {\n  return parseExpression(path).get(obj);\n}\n\n/**\n * Warn against setting non-existent root path on a vm.\n */\n\nvar warnNonExistent;\nif (process.env.NODE_ENV !== 'production') {\n  warnNonExistent = function (path, vm) {\n    warn('You are setting a non-existent path \"' + path.raw + '\" ' + 'on a vm instance. Consider pre-initializing the property ' + 'with the \"data\" option for more reliable reactivity ' + 'and better performance.', vm);\n  };\n}\n\n/**\n * Set on an object from a path\n *\n * @param {Object} obj\n * @param {String | Array} path\n * @param {*} val\n */\n\nfunction setPath(obj, path, val) {\n  var original = obj;\n  if (typeof path === 'string') {\n    path = parse(path);\n  }\n  if (!path || !isObject(obj)) {\n    return false;\n  }\n  var last, key;\n  for (var i = 0, l = path.length; i < l; i++) {\n    last = obj;\n    key = path[i];\n    if (key.charAt(0) === '*') {\n      key = parseExpression(key.slice(1)).get.call(original, original);\n    }\n    if (i < l - 1) {\n      obj = obj[key];\n      if (!isObject(obj)) {\n        obj = {};\n        if (process.env.NODE_ENV !== 'production' && last._isVue) {\n          warnNonExistent(path, last);\n        }\n        set(last, key, obj);\n      }\n    } else {\n      if (isArray(obj)) {\n        obj.$set(key, val);\n      } else if (key in obj) {\n        obj[key] = val;\n      } else {\n        if (process.env.NODE_ENV !== 'production' && obj._isVue) {\n          warnNonExistent(path, obj);\n        }\n        set(obj, key, val);\n      }\n    }\n  }\n  return true;\n}\n\nvar path = Object.freeze({\n  parsePath: parsePath,\n  getPath: getPath,\n  setPath: setPath\n});\n\nvar expressionCache = new Cache(1000);\n\nvar allowedKeywords = 'Math,Date,this,true,false,null,undefined,Infinity,NaN,' + 'isNaN,isFinite,decodeURI,decodeURIComponent,encodeURI,' + 'encodeURIComponent,parseInt,parseFloat';\nvar allowedKeywordsRE = new RegExp('^(' + allowedKeywords.replace(/,/g, '\\\\b|') + '\\\\b)');\n\n// keywords that don't make sense inside expressions\nvar improperKeywords = 'break,case,class,catch,const,continue,debugger,default,' + 'delete,do,else,export,extends,finally,for,function,if,' + 'import,in,instanceof,let,return,super,switch,throw,try,' + 'var,while,with,yield,enum,await,implements,package,' + 'protected,static,interface,private,public';\nvar improperKeywordsRE = new RegExp('^(' + improperKeywords.replace(/,/g, '\\\\b|') + '\\\\b)');\n\nvar wsRE = /\\s/g;\nvar newlineRE = /\\n/g;\nvar saveRE = /[\\{,]\\s*[\\w\\$_]+\\s*:|('(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`)|new |typeof |void /g;\nvar restoreRE = /\"(\\d+)\"/g;\nvar pathTestRE = /^[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['.*?'\\]|\\[\".*?\"\\]|\\[\\d+\\]|\\[[A-Za-z_$][\\w$]*\\])*$/;\nvar identRE = /[^\\w$\\.](?:[A-Za-z_$][\\w$]*)/g;\nvar literalValueRE$1 = /^(?:true|false|null|undefined|Infinity|NaN)$/;\n\nfunction noop() {}\n\n/**\n * Save / Rewrite / Restore\n *\n * When rewriting paths found in an expression, it is\n * possible for the same letter sequences to be found in\n * strings and Object literal property keys. Therefore we\n * remove and store these parts in a temporary array, and\n * restore them after the path rewrite.\n */\n\nvar saved = [];\n\n/**\n * Save replacer\n *\n * The save regex can match two possible cases:\n * 1. An opening object literal\n * 2. A string\n * If matched as a plain string, we need to escape its\n * newlines, since the string needs to be preserved when\n * generating the function body.\n *\n * @param {String} str\n * @param {String} isString - str if matched as a string\n * @return {String} - placeholder with index\n */\n\nfunction save(str, isString) {\n  var i = saved.length;\n  saved[i] = isString ? str.replace(newlineRE, '\\\\n') : str;\n  return '\"' + i + '\"';\n}\n\n/**\n * Path rewrite replacer\n *\n * @param {String} raw\n * @return {String}\n */\n\nfunction rewrite(raw) {\n  var c = raw.charAt(0);\n  var path = raw.slice(1);\n  if (allowedKeywordsRE.test(path)) {\n    return raw;\n  } else {\n    path = path.indexOf('\"') > -1 ? path.replace(restoreRE, restore) : path;\n    return c + 'scope.' + path;\n  }\n}\n\n/**\n * Restore replacer\n *\n * @param {String} str\n * @param {String} i - matched save index\n * @return {String}\n */\n\nfunction restore(str, i) {\n  return saved[i];\n}\n\n/**\n * Rewrite an expression, prefixing all path accessors with\n * `scope.` and generate getter/setter functions.\n *\n * @param {String} exp\n * @return {Function}\n */\n\nfunction compileGetter(exp) {\n  if (improperKeywordsRE.test(exp)) {\n    process.env.NODE_ENV !== 'production' && warn('Avoid using reserved keywords in expression: ' + exp);\n  }\n  // reset state\n  saved.length = 0;\n  // save strings and object literal keys\n  var body = exp.replace(saveRE, save).replace(wsRE, '');\n  // rewrite all paths\n  // pad 1 space here because the regex matches 1 extra char\n  body = (' ' + body).replace(identRE, rewrite).replace(restoreRE, restore);\n  return makeGetterFn(body);\n}\n\n/**\n * Build a getter function. Requires eval.\n *\n * We isolate the try/catch so it doesn't affect the\n * optimization of the parse function when it is not called.\n *\n * @param {String} body\n * @return {Function|undefined}\n */\n\nfunction makeGetterFn(body) {\n  try {\n    /* eslint-disable no-new-func */\n    return new Function('scope', 'return ' + body + ';');\n    /* eslint-enable no-new-func */\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      /* istanbul ignore if */\n      if (e.toString().match(/unsafe-eval|CSP/)) {\n        warn('It seems you are using the default build of Vue.js in an environment ' + 'with Content Security Policy that prohibits unsafe-eval. ' + 'Use the CSP-compliant build instead: ' + 'http://vuejs.org/guide/installation.html#CSP-compliant-build');\n      } else {\n        warn('Invalid expression. ' + 'Generated function body: ' + body);\n      }\n    }\n    return noop;\n  }\n}\n\n/**\n * Compile a setter function for the expression.\n *\n * @param {String} exp\n * @return {Function|undefined}\n */\n\nfunction compileSetter(exp) {\n  var path = parsePath(exp);\n  if (path) {\n    return function (scope, val) {\n      setPath(scope, path, val);\n    };\n  } else {\n    process.env.NODE_ENV !== 'production' && warn('Invalid setter expression: ' + exp);\n  }\n}\n\n/**\n * Parse an expression into re-written getter/setters.\n *\n * @param {String} exp\n * @param {Boolean} needSet\n * @return {Function}\n */\n\nfunction parseExpression(exp, needSet) {\n  exp = exp.trim();\n  // try cache\n  var hit = expressionCache.get(exp);\n  if (hit) {\n    if (needSet && !hit.set) {\n      hit.set = compileSetter(hit.exp);\n    }\n    return hit;\n  }\n  var res = { exp: exp };\n  res.get = isSimplePath(exp) && exp.indexOf('[') < 0\n  // optimized super simple getter\n  ? makeGetterFn('scope.' + exp)\n  // dynamic getter\n  : compileGetter(exp);\n  if (needSet) {\n    res.set = compileSetter(exp);\n  }\n  expressionCache.put(exp, res);\n  return res;\n}\n\n/**\n * Check if an expression is a simple path.\n *\n * @param {String} exp\n * @return {Boolean}\n */\n\nfunction isSimplePath(exp) {\n  return pathTestRE.test(exp) &&\n  // don't treat literal values as paths\n  !literalValueRE$1.test(exp) &&\n  // Math constants e.g. Math.PI, Math.E etc.\n  exp.slice(0, 5) !== 'Math.';\n}\n\nvar expression = Object.freeze({\n  parseExpression: parseExpression,\n  isSimplePath: isSimplePath\n});\n\n// we have two separate queues: one for directive updates\n// and one for user watcher registered via $watch().\n// we want to guarantee directive updates to be called\n// before user watchers so that when user watchers are\n// triggered, the DOM would have already been in updated\n// state.\n\nvar queue = [];\nvar userQueue = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\n\n/**\n * Reset the batcher's state.\n */\n\nfunction resetBatcherState() {\n  queue.length = 0;\n  userQueue.length = 0;\n  has = {};\n  circular = {};\n  waiting = false;\n}\n\n/**\n * Flush both queues and run the watchers.\n */\n\nfunction flushBatcherQueue() {\n  var _again = true;\n\n  _function: while (_again) {\n    _again = false;\n\n    runBatcherQueue(queue);\n    runBatcherQueue(userQueue);\n    // user watchers triggered more watchers,\n    // keep flushing until it depletes\n    if (queue.length) {\n      _again = true;\n      continue _function;\n    }\n    // dev tool hook\n    /* istanbul ignore if */\n    if (devtools && config.devtools) {\n      devtools.emit('flush');\n    }\n    resetBatcherState();\n  }\n}\n\n/**\n * Run the watchers in a single queue.\n *\n * @param {Array} queue\n */\n\nfunction runBatcherQueue(queue) {\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (var i = 0; i < queue.length; i++) {\n    var watcher = queue[i];\n    var id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if (process.env.NODE_ENV !== 'production' && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > config._maxUpdateCount) {\n        warn('You may have an infinite update loop for watcher ' + 'with expression \"' + watcher.expression + '\"', watcher.vm);\n        break;\n      }\n    }\n  }\n  queue.length = 0;\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n *\n * @param {Watcher} watcher\n *   properties:\n *   - {Number} id\n *   - {Function} run\n */\n\nfunction pushWatcher(watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    // push watcher into appropriate queue\n    var q = watcher.user ? userQueue : queue;\n    has[id] = q.length;\n    q.push(watcher);\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n      nextTick(flushBatcherQueue);\n    }\n  }\n}\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n *\n * @param {Vue} vm\n * @param {String|Function} expOrFn\n * @param {Function} cb\n * @param {Object} options\n *                 - {Array} filters\n *                 - {Boolean} twoWay\n *                 - {Boolean} deep\n *                 - {Boolean} user\n *                 - {Boolean} sync\n *                 - {Boolean} lazy\n *                 - {Function} [preProcess]\n *                 - {Function} [postProcess]\n * @constructor\n */\nfunction Watcher(vm, expOrFn, cb, options) {\n  // mix in options\n  if (options) {\n    extend(this, options);\n  }\n  var isFn = typeof expOrFn === 'function';\n  this.vm = vm;\n  vm._watchers.push(this);\n  this.expression = expOrFn;\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.prevError = null; // for async error stacks\n  // parse expression for getter/setter\n  if (isFn) {\n    this.getter = expOrFn;\n    this.setter = undefined;\n  } else {\n    var res = parseExpression(expOrFn, this.twoWay);\n    this.getter = res.get;\n    this.setter = res.set;\n  }\n  this.value = this.lazy ? undefined : this.get();\n  // state for avoiding false triggers for deep and Array\n  // watchers during vm._digest()\n  this.queued = this.shallow = false;\n}\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\n\nWatcher.prototype.get = function () {\n  this.beforeGet();\n  var scope = this.scope || this.vm;\n  var value;\n  try {\n    value = this.getter.call(scope, scope);\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production' && config.warnExpressionErrors) {\n      warn('Error when evaluating expression ' + '\"' + this.expression + '\": ' + e.toString(), this.vm);\n    }\n  }\n  // \"touch\" every property so they are all tracked as\n  // dependencies for deep watching\n  if (this.deep) {\n    traverse(value);\n  }\n  if (this.preProcess) {\n    value = this.preProcess(value);\n  }\n  if (this.filters) {\n    value = scope._applyFilters(value, null, this.filters, false);\n  }\n  if (this.postProcess) {\n    value = this.postProcess(value);\n  }\n  this.afterGet();\n  return value;\n};\n\n/**\n * Set the corresponding value with the setter.\n *\n * @param {*} value\n */\n\nWatcher.prototype.set = function (value) {\n  var scope = this.scope || this.vm;\n  if (this.filters) {\n    value = scope._applyFilters(value, this.value, this.filters, true);\n  }\n  try {\n    this.setter.call(scope, scope, value);\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production' && config.warnExpressionErrors) {\n      warn('Error when evaluating setter ' + '\"' + this.expression + '\": ' + e.toString(), this.vm);\n    }\n  }\n  // two-way sync for v-for alias\n  var forContext = scope.$forContext;\n  if (forContext && forContext.alias === this.expression) {\n    if (forContext.filters) {\n      process.env.NODE_ENV !== 'production' && warn('It seems you are using two-way binding on ' + 'a v-for alias (' + this.expression + '), and the ' + 'v-for has filters. This will not work properly. ' + 'Either remove the filters or use an array of ' + 'objects and bind to object properties instead.', this.vm);\n      return;\n    }\n    forContext._withLock(function () {\n      if (scope.$key) {\n        // original is an object\n        forContext.rawValue[scope.$key] = value;\n      } else {\n        forContext.rawValue.$set(scope.$index, value);\n      }\n    });\n  }\n};\n\n/**\n * Prepare for dependency collection.\n */\n\nWatcher.prototype.beforeGet = function () {\n  Dep.target = this;\n};\n\n/**\n * Add a dependency to this directive.\n *\n * @param {Dep} dep\n */\n\nWatcher.prototype.addDep = function (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\n\nWatcher.prototype.afterGet = function () {\n  Dep.target = null;\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this.deps[i];\n    if (!this.newDepIds.has(dep.id)) {\n      dep.removeSub(this);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n *\n * @param {Boolean} shallow\n */\n\nWatcher.prototype.update = function (shallow) {\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync || !config.async) {\n    this.run();\n  } else {\n    // if queued, only overwrite shallow with non-shallow,\n    // but not the other way around.\n    this.shallow = this.queued ? shallow ? this.shallow : false : !!shallow;\n    this.queued = true;\n    // record before-push error stack in debug mode\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.debug) {\n      this.prevError = new Error('[vue] async stack trace');\n    }\n    pushWatcher(this);\n  }\n};\n\n/**\n * Batcher job interface.\n * Will be called by the batcher.\n */\n\nWatcher.prototype.run = function () {\n  if (this.active) {\n    var value = this.get();\n    if (value !== this.value ||\n    // Deep watchers and watchers on Object/Arrays should fire even\n    // when the value is the same, because the value may\n    // have mutated; but only do so if this is a\n    // non-shallow update (caused by a vm digest).\n    (isObject(value) || this.deep) && !this.shallow) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      // in debug + async mode, when a watcher callbacks\n      // throws, we also throw the saved before-push error\n      // so the full cross-tick stack trace is available.\n      var prevError = this.prevError;\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && config.debug && prevError) {\n        this.prevError = null;\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          nextTick(function () {\n            throw prevError;\n          }, 0);\n          throw e;\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n    this.queued = this.shallow = false;\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\n\nWatcher.prototype.evaluate = function () {\n  // avoid overwriting another watcher that is being\n  // collected.\n  var current = Dep.target;\n  this.value = this.get();\n  this.dirty = false;\n  Dep.target = current;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\n\nWatcher.prototype.depend = function () {\n  var i = this.deps.length;\n  while (i--) {\n    this.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subcriber list.\n */\n\nWatcher.prototype.teardown = function () {\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed or is performing a v-for\n    // re-render (the watcher list is then filtered by v-for).\n    if (!this.vm._isBeingDestroyed && !this.vm._vForRemoving) {\n      this.vm._watchers.$remove(this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this.deps[i].removeSub(this);\n    }\n    this.active = false;\n    this.vm = this.cb = this.value = null;\n  }\n};\n\n/**\n * Recrusively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n *\n * @param {*} val\n */\n\nvar seenObjects = new _Set();\nfunction traverse(val, seen) {\n  var i = undefined,\n      keys = undefined;\n  if (!seen) {\n    seen = seenObjects;\n    seen.clear();\n  }\n  var isA = isArray(val);\n  var isO = isObject(val);\n  if ((isA || isO) && Object.isExtensible(val)) {\n    if (val.__ob__) {\n      var depId = val.__ob__.dep.id;\n      if (seen.has(depId)) {\n        return;\n      } else {\n        seen.add(depId);\n      }\n    }\n    if (isA) {\n      i = val.length;\n      while (i--) traverse(val[i], seen);\n    } else if (isO) {\n      keys = Object.keys(val);\n      i = keys.length;\n      while (i--) traverse(val[keys[i]], seen);\n    }\n  }\n}\n\nvar text$1 = {\n\n  bind: function bind() {\n    this.attr = this.el.nodeType === 3 ? 'data' : 'textContent';\n  },\n\n  update: function update(value) {\n    this.el[this.attr] = _toString(value);\n  }\n};\n\nvar templateCache = new Cache(1000);\nvar idSelectorCache = new Cache(1000);\n\nvar map = {\n  efault: [0, '', ''],\n  legend: [1, '<fieldset>', '</fieldset>'],\n  tr: [2, '<table><tbody>', '</tbody></table>'],\n  col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>']\n};\n\nmap.td = map.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];\n\nmap.option = map.optgroup = [1, '<select multiple=\"multiple\">', '</select>'];\n\nmap.thead = map.tbody = map.colgroup = map.caption = map.tfoot = [1, '<table>', '</table>'];\n\nmap.g = map.defs = map.symbol = map.use = map.image = map.text = map.circle = map.ellipse = map.line = map.path = map.polygon = map.polyline = map.rect = [1, '<svg ' + 'xmlns=\"http://www.w3.org/2000/svg\" ' + 'xmlns:xlink=\"http://www.w3.org/1999/xlink\" ' + 'xmlns:ev=\"http://www.w3.org/2001/xml-events\"' + 'version=\"1.1\">', '</svg>'];\n\n/**\n * Check if a node is a supported template node with a\n * DocumentFragment content.\n *\n * @param {Node} node\n * @return {Boolean}\n */\n\nfunction isRealTemplate(node) {\n  return isTemplate(node) && isFragment(node.content);\n}\n\nvar tagRE$1 = /<([\\w:-]+)/;\nvar entityRE = /&#?\\w+?;/;\nvar commentRE = /<!--/;\n\n/**\n * Convert a string template to a DocumentFragment.\n * Determines correct wrapping by tag types. Wrapping\n * strategy found in jQuery & component/domify.\n *\n * @param {String} templateString\n * @param {Boolean} raw\n * @return {DocumentFragment}\n */\n\nfunction stringToFragment(templateString, raw) {\n  // try a cache hit first\n  var cacheKey = raw ? templateString : templateString.trim();\n  var hit = templateCache.get(cacheKey);\n  if (hit) {\n    return hit;\n  }\n\n  var frag = document.createDocumentFragment();\n  var tagMatch = templateString.match(tagRE$1);\n  var entityMatch = entityRE.test(templateString);\n  var commentMatch = commentRE.test(templateString);\n\n  if (!tagMatch && !entityMatch && !commentMatch) {\n    // text only, return a single text node.\n    frag.appendChild(document.createTextNode(templateString));\n  } else {\n    var tag = tagMatch && tagMatch[1];\n    var wrap = map[tag] || map.efault;\n    var depth = wrap[0];\n    var prefix = wrap[1];\n    var suffix = wrap[2];\n    var node = document.createElement('div');\n\n    node.innerHTML = prefix + templateString + suffix;\n    while (depth--) {\n      node = node.lastChild;\n    }\n\n    var child;\n    /* eslint-disable no-cond-assign */\n    while (child = node.firstChild) {\n      /* eslint-enable no-cond-assign */\n      frag.appendChild(child);\n    }\n  }\n  if (!raw) {\n    trimNode(frag);\n  }\n  templateCache.put(cacheKey, frag);\n  return frag;\n}\n\n/**\n * Convert a template node to a DocumentFragment.\n *\n * @param {Node} node\n * @return {DocumentFragment}\n */\n\nfunction nodeToFragment(node) {\n  // if its a template tag and the browser supports it,\n  // its content is already a document fragment. However, iOS Safari has\n  // bug when using directly cloned template content with touch\n  // events and can cause crashes when the nodes are removed from DOM, so we\n  // have to treat template elements as string templates. (#2805)\n  /* istanbul ignore if */\n  if (isRealTemplate(node)) {\n    return stringToFragment(node.innerHTML);\n  }\n  // script template\n  if (node.tagName === 'SCRIPT') {\n    return stringToFragment(node.textContent);\n  }\n  // normal node, clone it to avoid mutating the original\n  var clonedNode = cloneNode(node);\n  var frag = document.createDocumentFragment();\n  var child;\n  /* eslint-disable no-cond-assign */\n  while (child = clonedNode.firstChild) {\n    /* eslint-enable no-cond-assign */\n    frag.appendChild(child);\n  }\n  trimNode(frag);\n  return frag;\n}\n\n// Test for the presence of the Safari template cloning bug\n// https://bugs.webkit.org/showug.cgi?id=137755\nvar hasBrokenTemplate = (function () {\n  /* istanbul ignore else */\n  if (inBrowser) {\n    var a = document.createElement('div');\n    a.innerHTML = '<template>1</template>';\n    return !a.cloneNode(true).firstChild.innerHTML;\n  } else {\n    return false;\n  }\n})();\n\n// Test for IE10/11 textarea placeholder clone bug\nvar hasTextareaCloneBug = (function () {\n  /* istanbul ignore else */\n  if (inBrowser) {\n    var t = document.createElement('textarea');\n    t.placeholder = 't';\n    return t.cloneNode(true).value === 't';\n  } else {\n    return false;\n  }\n})();\n\n/**\n * 1. Deal with Safari cloning nested <template> bug by\n *    manually cloning all template instances.\n * 2. Deal with IE10/11 textarea placeholder bug by setting\n *    the correct value after cloning.\n *\n * @param {Element|DocumentFragment} node\n * @return {Element|DocumentFragment}\n */\n\nfunction cloneNode(node) {\n  /* istanbul ignore if */\n  if (!node.querySelectorAll) {\n    return node.cloneNode();\n  }\n  var res = node.cloneNode(true);\n  var i, original, cloned;\n  /* istanbul ignore if */\n  if (hasBrokenTemplate) {\n    var tempClone = res;\n    if (isRealTemplate(node)) {\n      node = node.content;\n      tempClone = res.content;\n    }\n    original = node.querySelectorAll('template');\n    if (original.length) {\n      cloned = tempClone.querySelectorAll('template');\n      i = cloned.length;\n      while (i--) {\n        cloned[i].parentNode.replaceChild(cloneNode(original[i]), cloned[i]);\n      }\n    }\n  }\n  /* istanbul ignore if */\n  if (hasTextareaCloneBug) {\n    if (node.tagName === 'TEXTAREA') {\n      res.value = node.value;\n    } else {\n      original = node.querySelectorAll('textarea');\n      if (original.length) {\n        cloned = res.querySelectorAll('textarea');\n        i = cloned.length;\n        while (i--) {\n          cloned[i].value = original[i].value;\n        }\n      }\n    }\n  }\n  return res;\n}\n\n/**\n * Process the template option and normalizes it into a\n * a DocumentFragment that can be used as a partial or a\n * instance template.\n *\n * @param {*} template\n *        Possible values include:\n *        - DocumentFragment object\n *        - Node object of type Template\n *        - id selector: '#some-template-id'\n *        - template string: '<div><span>{{msg}}</span></div>'\n * @param {Boolean} shouldClone\n * @param {Boolean} raw\n *        inline HTML interpolation. Do not check for id\n *        selector and keep whitespace in the string.\n * @return {DocumentFragment|undefined}\n */\n\nfunction parseTemplate(template, shouldClone, raw) {\n  var node, frag;\n\n  // if the template is already a document fragment,\n  // do nothing\n  if (isFragment(template)) {\n    trimNode(template);\n    return shouldClone ? cloneNode(template) : template;\n  }\n\n  if (typeof template === 'string') {\n    // id selector\n    if (!raw && template.charAt(0) === '#') {\n      // id selector can be cached too\n      frag = idSelectorCache.get(template);\n      if (!frag) {\n        node = document.getElementById(template.slice(1));\n        if (node) {\n          frag = nodeToFragment(node);\n          // save selector to cache\n          idSelectorCache.put(template, frag);\n        }\n      }\n    } else {\n      // normal string template\n      frag = stringToFragment(template, raw);\n    }\n  } else if (template.nodeType) {\n    // a direct node\n    frag = nodeToFragment(template);\n  }\n\n  return frag && shouldClone ? cloneNode(frag) : frag;\n}\n\nvar template = Object.freeze({\n  cloneNode: cloneNode,\n  parseTemplate: parseTemplate\n});\n\nvar html = {\n\n  bind: function bind() {\n    // a comment node means this is a binding for\n    // {{{ inline unescaped html }}}\n    if (this.el.nodeType === 8) {\n      // hold nodes\n      this.nodes = [];\n      // replace the placeholder with proper anchor\n      this.anchor = createAnchor('v-html');\n      replace(this.el, this.anchor);\n    }\n  },\n\n  update: function update(value) {\n    value = _toString(value);\n    if (this.nodes) {\n      this.swap(value);\n    } else {\n      this.el.innerHTML = value;\n    }\n  },\n\n  swap: function swap(value) {\n    // remove old nodes\n    var i = this.nodes.length;\n    while (i--) {\n      remove(this.nodes[i]);\n    }\n    // convert new value to a fragment\n    // do not attempt to retrieve from id selector\n    var frag = parseTemplate(value, true, true);\n    // save a reference to these nodes so we can remove later\n    this.nodes = toArray(frag.childNodes);\n    before(frag, this.anchor);\n  }\n};\n\n/**\n * Abstraction for a partially-compiled fragment.\n * Can optionally compile content with a child scope.\n *\n * @param {Function} linker\n * @param {Vue} vm\n * @param {DocumentFragment} frag\n * @param {Vue} [host]\n * @param {Object} [scope]\n * @param {Fragment} [parentFrag]\n */\nfunction Fragment(linker, vm, frag, host, scope, parentFrag) {\n  this.children = [];\n  this.childFrags = [];\n  this.vm = vm;\n  this.scope = scope;\n  this.inserted = false;\n  this.parentFrag = parentFrag;\n  if (parentFrag) {\n    parentFrag.childFrags.push(this);\n  }\n  this.unlink = linker(vm, frag, host, scope, this);\n  var single = this.single = frag.childNodes.length === 1 &&\n  // do not go single mode if the only node is an anchor\n  !frag.childNodes[0].__v_anchor;\n  if (single) {\n    this.node = frag.childNodes[0];\n    this.before = singleBefore;\n    this.remove = singleRemove;\n  } else {\n    this.node = createAnchor('fragment-start');\n    this.end = createAnchor('fragment-end');\n    this.frag = frag;\n    prepend(this.node, frag);\n    frag.appendChild(this.end);\n    this.before = multiBefore;\n    this.remove = multiRemove;\n  }\n  this.node.__v_frag = this;\n}\n\n/**\n * Call attach/detach for all components contained within\n * this fragment. Also do so recursively for all child\n * fragments.\n *\n * @param {Function} hook\n */\n\nFragment.prototype.callHook = function (hook) {\n  var i, l;\n  for (i = 0, l = this.childFrags.length; i < l; i++) {\n    this.childFrags[i].callHook(hook);\n  }\n  for (i = 0, l = this.children.length; i < l; i++) {\n    hook(this.children[i]);\n  }\n};\n\n/**\n * Insert fragment before target, single node version\n *\n * @param {Node} target\n * @param {Boolean} withTransition\n */\n\nfunction singleBefore(target, withTransition) {\n  this.inserted = true;\n  var method = withTransition !== false ? beforeWithTransition : before;\n  method(this.node, target, this.vm);\n  if (inDoc(this.node)) {\n    this.callHook(attach);\n  }\n}\n\n/**\n * Remove fragment, single node version\n */\n\nfunction singleRemove() {\n  this.inserted = false;\n  var shouldCallRemove = inDoc(this.node);\n  var self = this;\n  this.beforeRemove();\n  removeWithTransition(this.node, this.vm, function () {\n    if (shouldCallRemove) {\n      self.callHook(detach);\n    }\n    self.destroy();\n  });\n}\n\n/**\n * Insert fragment before target, multi-nodes version\n *\n * @param {Node} target\n * @param {Boolean} withTransition\n */\n\nfunction multiBefore(target, withTransition) {\n  this.inserted = true;\n  var vm = this.vm;\n  var method = withTransition !== false ? beforeWithTransition : before;\n  mapNodeRange(this.node, this.end, function (node) {\n    method(node, target, vm);\n  });\n  if (inDoc(this.node)) {\n    this.callHook(attach);\n  }\n}\n\n/**\n * Remove fragment, multi-nodes version\n */\n\nfunction multiRemove() {\n  this.inserted = false;\n  var self = this;\n  var shouldCallRemove = inDoc(this.node);\n  this.beforeRemove();\n  removeNodeRange(this.node, this.end, this.vm, this.frag, function () {\n    if (shouldCallRemove) {\n      self.callHook(detach);\n    }\n    self.destroy();\n  });\n}\n\n/**\n * Prepare the fragment for removal.\n */\n\nFragment.prototype.beforeRemove = function () {\n  var i, l;\n  for (i = 0, l = this.childFrags.length; i < l; i++) {\n    // call the same method recursively on child\n    // fragments, depth-first\n    this.childFrags[i].beforeRemove(false);\n  }\n  for (i = 0, l = this.children.length; i < l; i++) {\n    // Call destroy for all contained instances,\n    // with remove:false and defer:true.\n    // Defer is necessary because we need to\n    // keep the children to call detach hooks\n    // on them.\n    this.children[i].$destroy(false, true);\n  }\n  var dirs = this.unlink.dirs;\n  for (i = 0, l = dirs.length; i < l; i++) {\n    // disable the watchers on all the directives\n    // so that the rendered content stays the same\n    // during removal.\n    dirs[i]._watcher && dirs[i]._watcher.teardown();\n  }\n};\n\n/**\n * Destroy the fragment.\n */\n\nFragment.prototype.destroy = function () {\n  if (this.parentFrag) {\n    this.parentFrag.childFrags.$remove(this);\n  }\n  this.node.__v_frag = null;\n  this.unlink();\n};\n\n/**\n * Call attach hook for a Vue instance.\n *\n * @param {Vue} child\n */\n\nfunction attach(child) {\n  if (!child._isAttached && inDoc(child.$el)) {\n    child._callHook('attached');\n  }\n}\n\n/**\n * Call detach hook for a Vue instance.\n *\n * @param {Vue} child\n */\n\nfunction detach(child) {\n  if (child._isAttached && !inDoc(child.$el)) {\n    child._callHook('detached');\n  }\n}\n\nvar linkerCache = new Cache(5000);\n\n/**\n * A factory that can be used to create instances of a\n * fragment. Caches the compiled linker if possible.\n *\n * @param {Vue} vm\n * @param {Element|String} el\n */\nfunction FragmentFactory(vm, el) {\n  this.vm = vm;\n  var template;\n  var isString = typeof el === 'string';\n  if (isString || isTemplate(el) && !el.hasAttribute('v-if')) {\n    template = parseTemplate(el, true);\n  } else {\n    template = document.createDocumentFragment();\n    template.appendChild(el);\n  }\n  this.template = template;\n  // linker can be cached, but only for components\n  var linker;\n  var cid = vm.constructor.cid;\n  if (cid > 0) {\n    var cacheId = cid + (isString ? el : getOuterHTML(el));\n    linker = linkerCache.get(cacheId);\n    if (!linker) {\n      linker = compile(template, vm.$options, true);\n      linkerCache.put(cacheId, linker);\n    }\n  } else {\n    linker = compile(template, vm.$options, true);\n  }\n  this.linker = linker;\n}\n\n/**\n * Create a fragment instance with given host and scope.\n *\n * @param {Vue} host\n * @param {Object} scope\n * @param {Fragment} parentFrag\n */\n\nFragmentFactory.prototype.create = function (host, scope, parentFrag) {\n  var frag = cloneNode(this.template);\n  return new Fragment(this.linker, this.vm, frag, host, scope, parentFrag);\n};\n\nvar ON = 700;\nvar MODEL = 800;\nvar BIND = 850;\nvar TRANSITION = 1100;\nvar EL = 1500;\nvar COMPONENT = 1500;\nvar PARTIAL = 1750;\nvar IF = 2100;\nvar FOR = 2200;\nvar SLOT = 2300;\n\nvar uid$3 = 0;\n\nvar vFor = {\n\n  priority: FOR,\n  terminal: true,\n\n  params: ['track-by', 'stagger', 'enter-stagger', 'leave-stagger'],\n\n  bind: function bind() {\n    // support \"item in/of items\" syntax\n    var inMatch = this.expression.match(/(.*) (?:in|of) (.*)/);\n    if (inMatch) {\n      var itMatch = inMatch[1].match(/\\((.*),(.*)\\)/);\n      if (itMatch) {\n        this.iterator = itMatch[1].trim();\n        this.alias = itMatch[2].trim();\n      } else {\n        this.alias = inMatch[1].trim();\n      }\n      this.expression = inMatch[2];\n    }\n\n    if (!this.alias) {\n      process.env.NODE_ENV !== 'production' && warn('Invalid v-for expression \"' + this.descriptor.raw + '\": ' + 'alias is required.', this.vm);\n      return;\n    }\n\n    // uid as a cache identifier\n    this.id = '__v-for__' + ++uid$3;\n\n    // check if this is an option list,\n    // so that we know if we need to update the <select>'s\n    // v-model when the option list has changed.\n    // because v-model has a lower priority than v-for,\n    // the v-model is not bound here yet, so we have to\n    // retrive it in the actual updateModel() function.\n    var tag = this.el.tagName;\n    this.isOption = (tag === 'OPTION' || tag === 'OPTGROUP') && this.el.parentNode.tagName === 'SELECT';\n\n    // setup anchor nodes\n    this.start = createAnchor('v-for-start');\n    this.end = createAnchor('v-for-end');\n    replace(this.el, this.end);\n    before(this.start, this.end);\n\n    // cache\n    this.cache = Object.create(null);\n\n    // fragment factory\n    this.factory = new FragmentFactory(this.vm, this.el);\n  },\n\n  update: function update(data) {\n    this.diff(data);\n    this.updateRef();\n    this.updateModel();\n  },\n\n  /**\n   * Diff, based on new data and old data, determine the\n   * minimum amount of DOM manipulations needed to make the\n   * DOM reflect the new data Array.\n   *\n   * The algorithm diffs the new data Array by storing a\n   * hidden reference to an owner vm instance on previously\n   * seen data. This allows us to achieve O(n) which is\n   * better than a levenshtein distance based algorithm,\n   * which is O(m * n).\n   *\n   * @param {Array} data\n   */\n\n  diff: function diff(data) {\n    // check if the Array was converted from an Object\n    var item = data[0];\n    var convertedFromObject = this.fromObject = isObject(item) && hasOwn(item, '$key') && hasOwn(item, '$value');\n\n    var trackByKey = this.params.trackBy;\n    var oldFrags = this.frags;\n    var frags = this.frags = new Array(data.length);\n    var alias = this.alias;\n    var iterator = this.iterator;\n    var start = this.start;\n    var end = this.end;\n    var inDocument = inDoc(start);\n    var init = !oldFrags;\n    var i, l, frag, key, value, primitive;\n\n    // First pass, go through the new Array and fill up\n    // the new frags array. If a piece of data has a cached\n    // instance for it, we reuse it. Otherwise build a new\n    // instance.\n    for (i = 0, l = data.length; i < l; i++) {\n      item = data[i];\n      key = convertedFromObject ? item.$key : null;\n      value = convertedFromObject ? item.$value : item;\n      primitive = !isObject(value);\n      frag = !init && this.getCachedFrag(value, i, key);\n      if (frag) {\n        // reusable fragment\n        frag.reused = true;\n        // update $index\n        frag.scope.$index = i;\n        // update $key\n        if (key) {\n          frag.scope.$key = key;\n        }\n        // update iterator\n        if (iterator) {\n          frag.scope[iterator] = key !== null ? key : i;\n        }\n        // update data for track-by, object repeat &\n        // primitive values.\n        if (trackByKey || convertedFromObject || primitive) {\n          withoutConversion(function () {\n            frag.scope[alias] = value;\n          });\n        }\n      } else {\n        // new isntance\n        frag = this.create(value, alias, i, key);\n        frag.fresh = !init;\n      }\n      frags[i] = frag;\n      if (init) {\n        frag.before(end);\n      }\n    }\n\n    // we're done for the initial render.\n    if (init) {\n      return;\n    }\n\n    // Second pass, go through the old fragments and\n    // destroy those who are not reused (and remove them\n    // from cache)\n    var removalIndex = 0;\n    var totalRemoved = oldFrags.length - frags.length;\n    // when removing a large number of fragments, watcher removal\n    // turns out to be a perf bottleneck, so we batch the watcher\n    // removals into a single filter call!\n    this.vm._vForRemoving = true;\n    for (i = 0, l = oldFrags.length; i < l; i++) {\n      frag = oldFrags[i];\n      if (!frag.reused) {\n        this.deleteCachedFrag(frag);\n        this.remove(frag, removalIndex++, totalRemoved, inDocument);\n      }\n    }\n    this.vm._vForRemoving = false;\n    if (removalIndex) {\n      this.vm._watchers = this.vm._watchers.filter(function (w) {\n        return w.active;\n      });\n    }\n\n    // Final pass, move/insert new fragments into the\n    // right place.\n    var targetPrev, prevEl, currentPrev;\n    var insertionIndex = 0;\n    for (i = 0, l = frags.length; i < l; i++) {\n      frag = frags[i];\n      // this is the frag that we should be after\n      targetPrev = frags[i - 1];\n      prevEl = targetPrev ? targetPrev.staggerCb ? targetPrev.staggerAnchor : targetPrev.end || targetPrev.node : start;\n      if (frag.reused && !frag.staggerCb) {\n        currentPrev = findPrevFrag(frag, start, this.id);\n        if (currentPrev !== targetPrev && (!currentPrev ||\n        // optimization for moving a single item.\n        // thanks to suggestions by @livoras in #1807\n        findPrevFrag(currentPrev, start, this.id) !== targetPrev)) {\n          this.move(frag, prevEl);\n        }\n      } else {\n        // new instance, or still in stagger.\n        // insert with updated stagger index.\n        this.insert(frag, insertionIndex++, prevEl, inDocument);\n      }\n      frag.reused = frag.fresh = false;\n    }\n  },\n\n  /**\n   * Create a new fragment instance.\n   *\n   * @param {*} value\n   * @param {String} alias\n   * @param {Number} index\n   * @param {String} [key]\n   * @return {Fragment}\n   */\n\n  create: function create(value, alias, index, key) {\n    var host = this._host;\n    // create iteration scope\n    var parentScope = this._scope || this.vm;\n    var scope = Object.create(parentScope);\n    // ref holder for the scope\n    scope.$refs = Object.create(parentScope.$refs);\n    scope.$els = Object.create(parentScope.$els);\n    // make sure point $parent to parent scope\n    scope.$parent = parentScope;\n    // for two-way binding on alias\n    scope.$forContext = this;\n    // define scope properties\n    // important: define the scope alias without forced conversion\n    // so that frozen data structures remain non-reactive.\n    withoutConversion(function () {\n      defineReactive(scope, alias, value);\n    });\n    defineReactive(scope, '$index', index);\n    if (key) {\n      defineReactive(scope, '$key', key);\n    } else if (scope.$key) {\n      // avoid accidental fallback\n      def(scope, '$key', null);\n    }\n    if (this.iterator) {\n      defineReactive(scope, this.iterator, key !== null ? key : index);\n    }\n    var frag = this.factory.create(host, scope, this._frag);\n    frag.forId = this.id;\n    this.cacheFrag(value, frag, index, key);\n    return frag;\n  },\n\n  /**\n   * Update the v-ref on owner vm.\n   */\n\n  updateRef: function updateRef() {\n    var ref = this.descriptor.ref;\n    if (!ref) return;\n    var hash = (this._scope || this.vm).$refs;\n    var refs;\n    if (!this.fromObject) {\n      refs = this.frags.map(findVmFromFrag);\n    } else {\n      refs = {};\n      this.frags.forEach(function (frag) {\n        refs[frag.scope.$key] = findVmFromFrag(frag);\n      });\n    }\n    hash[ref] = refs;\n  },\n\n  /**\n   * For option lists, update the containing v-model on\n   * parent <select>.\n   */\n\n  updateModel: function updateModel() {\n    if (this.isOption) {\n      var parent = this.start.parentNode;\n      var model = parent && parent.__v_model;\n      if (model) {\n        model.forceUpdate();\n      }\n    }\n  },\n\n  /**\n   * Insert a fragment. Handles staggering.\n   *\n   * @param {Fragment} frag\n   * @param {Number} index\n   * @param {Node} prevEl\n   * @param {Boolean} inDocument\n   */\n\n  insert: function insert(frag, index, prevEl, inDocument) {\n    if (frag.staggerCb) {\n      frag.staggerCb.cancel();\n      frag.staggerCb = null;\n    }\n    var staggerAmount = this.getStagger(frag, index, null, 'enter');\n    if (inDocument && staggerAmount) {\n      // create an anchor and insert it synchronously,\n      // so that we can resolve the correct order without\n      // worrying about some elements not inserted yet\n      var anchor = frag.staggerAnchor;\n      if (!anchor) {\n        anchor = frag.staggerAnchor = createAnchor('stagger-anchor');\n        anchor.__v_frag = frag;\n      }\n      after(anchor, prevEl);\n      var op = frag.staggerCb = cancellable(function () {\n        frag.staggerCb = null;\n        frag.before(anchor);\n        remove(anchor);\n      });\n      setTimeout(op, staggerAmount);\n    } else {\n      var target = prevEl.nextSibling;\n      /* istanbul ignore if */\n      if (!target) {\n        // reset end anchor position in case the position was messed up\n        // by an external drag-n-drop library.\n        after(this.end, prevEl);\n        target = this.end;\n      }\n      frag.before(target);\n    }\n  },\n\n  /**\n   * Remove a fragment. Handles staggering.\n   *\n   * @param {Fragment} frag\n   * @param {Number} index\n   * @param {Number} total\n   * @param {Boolean} inDocument\n   */\n\n  remove: function remove(frag, index, total, inDocument) {\n    if (frag.staggerCb) {\n      frag.staggerCb.cancel();\n      frag.staggerCb = null;\n      // it's not possible for the same frag to be removed\n      // twice, so if we have a pending stagger callback,\n      // it means this frag is queued for enter but removed\n      // before its transition started. Since it is already\n      // destroyed, we can just leave it in detached state.\n      return;\n    }\n    var staggerAmount = this.getStagger(frag, index, total, 'leave');\n    if (inDocument && staggerAmount) {\n      var op = frag.staggerCb = cancellable(function () {\n        frag.staggerCb = null;\n        frag.remove();\n      });\n      setTimeout(op, staggerAmount);\n    } else {\n      frag.remove();\n    }\n  },\n\n  /**\n   * Move a fragment to a new position.\n   * Force no transition.\n   *\n   * @param {Fragment} frag\n   * @param {Node} prevEl\n   */\n\n  move: function move(frag, prevEl) {\n    // fix a common issue with Sortable:\n    // if prevEl doesn't have nextSibling, this means it's\n    // been dragged after the end anchor. Just re-position\n    // the end anchor to the end of the container.\n    /* istanbul ignore if */\n    if (!prevEl.nextSibling) {\n      this.end.parentNode.appendChild(this.end);\n    }\n    frag.before(prevEl.nextSibling, false);\n  },\n\n  /**\n   * Cache a fragment using track-by or the object key.\n   *\n   * @param {*} value\n   * @param {Fragment} frag\n   * @param {Number} index\n   * @param {String} [key]\n   */\n\n  cacheFrag: function cacheFrag(value, frag, index, key) {\n    var trackByKey = this.params.trackBy;\n    var cache = this.cache;\n    var primitive = !isObject(value);\n    var id;\n    if (key || trackByKey || primitive) {\n      id = getTrackByKey(index, key, value, trackByKey);\n      if (!cache[id]) {\n        cache[id] = frag;\n      } else if (trackByKey !== '$index') {\n        process.env.NODE_ENV !== 'production' && this.warnDuplicate(value);\n      }\n    } else {\n      id = this.id;\n      if (hasOwn(value, id)) {\n        if (value[id] === null) {\n          value[id] = frag;\n        } else {\n          process.env.NODE_ENV !== 'production' && this.warnDuplicate(value);\n        }\n      } else if (Object.isExtensible(value)) {\n        def(value, id, frag);\n      } else if (process.env.NODE_ENV !== 'production') {\n        warn('Frozen v-for objects cannot be automatically tracked, make sure to ' + 'provide a track-by key.');\n      }\n    }\n    frag.raw = value;\n  },\n\n  /**\n   * Get a cached fragment from the value/index/key\n   *\n   * @param {*} value\n   * @param {Number} index\n   * @param {String} key\n   * @return {Fragment}\n   */\n\n  getCachedFrag: function getCachedFrag(value, index, key) {\n    var trackByKey = this.params.trackBy;\n    var primitive = !isObject(value);\n    var frag;\n    if (key || trackByKey || primitive) {\n      var id = getTrackByKey(index, key, value, trackByKey);\n      frag = this.cache[id];\n    } else {\n      frag = value[this.id];\n    }\n    if (frag && (frag.reused || frag.fresh)) {\n      process.env.NODE_ENV !== 'production' && this.warnDuplicate(value);\n    }\n    return frag;\n  },\n\n  /**\n   * Delete a fragment from cache.\n   *\n   * @param {Fragment} frag\n   */\n\n  deleteCachedFrag: function deleteCachedFrag(frag) {\n    var value = frag.raw;\n    var trackByKey = this.params.trackBy;\n    var scope = frag.scope;\n    var index = scope.$index;\n    // fix #948: avoid accidentally fall through to\n    // a parent repeater which happens to have $key.\n    var key = hasOwn(scope, '$key') && scope.$key;\n    var primitive = !isObject(value);\n    if (trackByKey || key || primitive) {\n      var id = getTrackByKey(index, key, value, trackByKey);\n      this.cache[id] = null;\n    } else {\n      value[this.id] = null;\n      frag.raw = null;\n    }\n  },\n\n  /**\n   * Get the stagger amount for an insertion/removal.\n   *\n   * @param {Fragment} frag\n   * @param {Number} index\n   * @param {Number} total\n   * @param {String} type\n   */\n\n  getStagger: function getStagger(frag, index, total, type) {\n    type = type + 'Stagger';\n    var trans = frag.node.__v_trans;\n    var hooks = trans && trans.hooks;\n    var hook = hooks && (hooks[type] || hooks.stagger);\n    return hook ? hook.call(frag, index, total) : index * parseInt(this.params[type] || this.params.stagger, 10);\n  },\n\n  /**\n   * Pre-process the value before piping it through the\n   * filters. This is passed to and called by the watcher.\n   */\n\n  _preProcess: function _preProcess(value) {\n    // regardless of type, store the un-filtered raw value.\n    this.rawValue = value;\n    return value;\n  },\n\n  /**\n   * Post-process the value after it has been piped through\n   * the filters. This is passed to and called by the watcher.\n   *\n   * It is necessary for this to be called during the\n   * watcher's dependency collection phase because we want\n   * the v-for to update when the source Object is mutated.\n   */\n\n  _postProcess: function _postProcess(value) {\n    if (isArray(value)) {\n      return value;\n    } else if (isPlainObject(value)) {\n      // convert plain object to array.\n      var keys = Object.keys(value);\n      var i = keys.length;\n      var res = new Array(i);\n      var key;\n      while (i--) {\n        key = keys[i];\n        res[i] = {\n          $key: key,\n          $value: value[key]\n        };\n      }\n      return res;\n    } else {\n      if (typeof value === 'number' && !isNaN(value)) {\n        value = range(value);\n      }\n      return value || [];\n    }\n  },\n\n  unbind: function unbind() {\n    if (this.descriptor.ref) {\n      (this._scope || this.vm).$refs[this.descriptor.ref] = null;\n    }\n    if (this.frags) {\n      var i = this.frags.length;\n      var frag;\n      while (i--) {\n        frag = this.frags[i];\n        this.deleteCachedFrag(frag);\n        frag.destroy();\n      }\n    }\n  }\n};\n\n/**\n * Helper to find the previous element that is a fragment\n * anchor. This is necessary because a destroyed frag's\n * element could still be lingering in the DOM before its\n * leaving transition finishes, but its inserted flag\n * should have been set to false so we can skip them.\n *\n * If this is a block repeat, we want to make sure we only\n * return frag that is bound to this v-for. (see #929)\n *\n * @param {Fragment} frag\n * @param {Comment|Text} anchor\n * @param {String} id\n * @return {Fragment}\n */\n\nfunction findPrevFrag(frag, anchor, id) {\n  var el = frag.node.previousSibling;\n  /* istanbul ignore if */\n  if (!el) return;\n  frag = el.__v_frag;\n  while ((!frag || frag.forId !== id || !frag.inserted) && el !== anchor) {\n    el = el.previousSibling;\n    /* istanbul ignore if */\n    if (!el) return;\n    frag = el.__v_frag;\n  }\n  return frag;\n}\n\n/**\n * Find a vm from a fragment.\n *\n * @param {Fragment} frag\n * @return {Vue|undefined}\n */\n\nfunction findVmFromFrag(frag) {\n  var node = frag.node;\n  // handle multi-node frag\n  if (frag.end) {\n    while (!node.__vue__ && node !== frag.end && node.nextSibling) {\n      node = node.nextSibling;\n    }\n  }\n  return node.__vue__;\n}\n\n/**\n * Create a range array from given number.\n *\n * @param {Number} n\n * @return {Array}\n */\n\nfunction range(n) {\n  var i = -1;\n  var ret = new Array(Math.floor(n));\n  while (++i < n) {\n    ret[i] = i;\n  }\n  return ret;\n}\n\n/**\n * Get the track by key for an item.\n *\n * @param {Number} index\n * @param {String} key\n * @param {*} value\n * @param {String} [trackByKey]\n */\n\nfunction getTrackByKey(index, key, value, trackByKey) {\n  return trackByKey ? trackByKey === '$index' ? index : trackByKey.charAt(0).match(/\\w/) ? getPath(value, trackByKey) : value[trackByKey] : key || value;\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  vFor.warnDuplicate = function (value) {\n    warn('Duplicate value found in v-for=\"' + this.descriptor.raw + '\": ' + JSON.stringify(value) + '. Use track-by=\"$index\" if ' + 'you are expecting duplicate values.', this.vm);\n  };\n}\n\nvar vIf = {\n\n  priority: IF,\n  terminal: true,\n\n  bind: function bind() {\n    var el = this.el;\n    if (!el.__vue__) {\n      // check else block\n      var next = el.nextElementSibling;\n      if (next && getAttr(next, 'v-else') !== null) {\n        remove(next);\n        this.elseEl = next;\n      }\n      // check main block\n      this.anchor = createAnchor('v-if');\n      replace(el, this.anchor);\n    } else {\n      process.env.NODE_ENV !== 'production' && warn('v-if=\"' + this.expression + '\" cannot be ' + 'used on an instance root element.', this.vm);\n      this.invalid = true;\n    }\n  },\n\n  update: function update(value) {\n    if (this.invalid) return;\n    if (value) {\n      if (!this.frag) {\n        this.insert();\n      }\n    } else {\n      this.remove();\n    }\n  },\n\n  insert: function insert() {\n    if (this.elseFrag) {\n      this.elseFrag.remove();\n      this.elseFrag = null;\n    }\n    // lazy init factory\n    if (!this.factory) {\n      this.factory = new FragmentFactory(this.vm, this.el);\n    }\n    this.frag = this.factory.create(this._host, this._scope, this._frag);\n    this.frag.before(this.anchor);\n  },\n\n  remove: function remove() {\n    if (this.frag) {\n      this.frag.remove();\n      this.frag = null;\n    }\n    if (this.elseEl && !this.elseFrag) {\n      if (!this.elseFactory) {\n        this.elseFactory = new FragmentFactory(this.elseEl._context || this.vm, this.elseEl);\n      }\n      this.elseFrag = this.elseFactory.create(this._host, this._scope, this._frag);\n      this.elseFrag.before(this.anchor);\n    }\n  },\n\n  unbind: function unbind() {\n    if (this.frag) {\n      this.frag.destroy();\n    }\n    if (this.elseFrag) {\n      this.elseFrag.destroy();\n    }\n  }\n};\n\nvar show = {\n\n  bind: function bind() {\n    // check else block\n    var next = this.el.nextElementSibling;\n    if (next && getAttr(next, 'v-else') !== null) {\n      this.elseEl = next;\n    }\n  },\n\n  update: function update(value) {\n    this.apply(this.el, value);\n    if (this.elseEl) {\n      this.apply(this.elseEl, !value);\n    }\n  },\n\n  apply: function apply(el, value) {\n    if (inDoc(el)) {\n      applyTransition(el, value ? 1 : -1, toggle, this.vm);\n    } else {\n      toggle();\n    }\n    function toggle() {\n      el.style.display = value ? '' : 'none';\n    }\n  }\n};\n\nvar text$2 = {\n\n  bind: function bind() {\n    var self = this;\n    var el = this.el;\n    var isRange = el.type === 'range';\n    var lazy = this.params.lazy;\n    var number = this.params.number;\n    var debounce = this.params.debounce;\n\n    // handle composition events.\n    //   http://blog.evanyou.me/2014/01/03/composition-event/\n    // skip this for Android because it handles composition\n    // events quite differently. Android doesn't trigger\n    // composition events for language input methods e.g.\n    // Chinese, but instead triggers them for spelling\n    // suggestions... (see Discussion/#162)\n    var composing = false;\n    if (!isAndroid && !isRange) {\n      this.on('compositionstart', function () {\n        composing = true;\n      });\n      this.on('compositionend', function () {\n        composing = false;\n        // in IE11 the \"compositionend\" event fires AFTER\n        // the \"input\" event, so the input handler is blocked\n        // at the end... have to call it here.\n        //\n        // #1327: in lazy mode this is unecessary.\n        if (!lazy) {\n          self.listener();\n        }\n      });\n    }\n\n    // prevent messing with the input when user is typing,\n    // and force update on blur.\n    this.focused = false;\n    if (!isRange && !lazy) {\n      this.on('focus', function () {\n        self.focused = true;\n      });\n      this.on('blur', function () {\n        self.focused = false;\n        // do not sync value after fragment removal (#2017)\n        if (!self._frag || self._frag.inserted) {\n          self.rawListener();\n        }\n      });\n    }\n\n    // Now attach the main listener\n    this.listener = this.rawListener = function () {\n      if (composing || !self._bound) {\n        return;\n      }\n      var val = number || isRange ? toNumber(el.value) : el.value;\n      self.set(val);\n      // force update on next tick to avoid lock & same value\n      // also only update when user is not typing\n      nextTick(function () {\n        if (self._bound && !self.focused) {\n          self.update(self._watcher.value);\n        }\n      });\n    };\n\n    // apply debounce\n    if (debounce) {\n      this.listener = _debounce(this.listener, debounce);\n    }\n\n    // Support jQuery events, since jQuery.trigger() doesn't\n    // trigger native events in some cases and some plugins\n    // rely on $.trigger()\n    //\n    // We want to make sure if a listener is attached using\n    // jQuery, it is also removed with jQuery, that's why\n    // we do the check for each directive instance and\n    // store that check result on itself. This also allows\n    // easier test coverage control by unsetting the global\n    // jQuery variable in tests.\n    this.hasjQuery = typeof jQuery === 'function';\n    if (this.hasjQuery) {\n      var method = jQuery.fn.on ? 'on' : 'bind';\n      jQuery(el)[method]('change', this.rawListener);\n      if (!lazy) {\n        jQuery(el)[method]('input', this.listener);\n      }\n    } else {\n      this.on('change', this.rawListener);\n      if (!lazy) {\n        this.on('input', this.listener);\n      }\n    }\n\n    // IE9 doesn't fire input event on backspace/del/cut\n    if (!lazy && isIE9) {\n      this.on('cut', function () {\n        nextTick(self.listener);\n      });\n      this.on('keyup', function (e) {\n        if (e.keyCode === 46 || e.keyCode === 8) {\n          self.listener();\n        }\n      });\n    }\n\n    // set initial value if present\n    if (el.hasAttribute('value') || el.tagName === 'TEXTAREA' && el.value.trim()) {\n      this.afterBind = this.listener;\n    }\n  },\n\n  update: function update(value) {\n    // #3029 only update when the value changes. This prevent\n    // browsers from overwriting values like selectionStart\n    value = _toString(value);\n    if (value !== this.el.value) this.el.value = value;\n  },\n\n  unbind: function unbind() {\n    var el = this.el;\n    if (this.hasjQuery) {\n      var method = jQuery.fn.off ? 'off' : 'unbind';\n      jQuery(el)[method]('change', this.listener);\n      jQuery(el)[method]('input', this.listener);\n    }\n  }\n};\n\nvar radio = {\n\n  bind: function bind() {\n    var self = this;\n    var el = this.el;\n\n    this.getValue = function () {\n      // value overwrite via v-bind:value\n      if (el.hasOwnProperty('_value')) {\n        return el._value;\n      }\n      var val = el.value;\n      if (self.params.number) {\n        val = toNumber(val);\n      }\n      return val;\n    };\n\n    this.listener = function () {\n      self.set(self.getValue());\n    };\n    this.on('change', this.listener);\n\n    if (el.hasAttribute('checked')) {\n      this.afterBind = this.listener;\n    }\n  },\n\n  update: function update(value) {\n    this.el.checked = looseEqual(value, this.getValue());\n  }\n};\n\nvar select = {\n\n  bind: function bind() {\n    var _this = this;\n\n    var self = this;\n    var el = this.el;\n\n    // method to force update DOM using latest value.\n    this.forceUpdate = function () {\n      if (self._watcher) {\n        self.update(self._watcher.get());\n      }\n    };\n\n    // check if this is a multiple select\n    var multiple = this.multiple = el.hasAttribute('multiple');\n\n    // attach listener\n    this.listener = function () {\n      var value = getValue(el, multiple);\n      value = self.params.number ? isArray(value) ? value.map(toNumber) : toNumber(value) : value;\n      self.set(value);\n    };\n    this.on('change', this.listener);\n\n    // if has initial value, set afterBind\n    var initValue = getValue(el, multiple, true);\n    if (multiple && initValue.length || !multiple && initValue !== null) {\n      this.afterBind = this.listener;\n    }\n\n    // All major browsers except Firefox resets\n    // selectedIndex with value -1 to 0 when the element\n    // is appended to a new parent, therefore we have to\n    // force a DOM update whenever that happens...\n    this.vm.$on('hook:attached', function () {\n      nextTick(_this.forceUpdate);\n    });\n    if (!inDoc(el)) {\n      nextTick(this.forceUpdate);\n    }\n  },\n\n  update: function update(value) {\n    var el = this.el;\n    el.selectedIndex = -1;\n    var multi = this.multiple && isArray(value);\n    var options = el.options;\n    var i = options.length;\n    var op, val;\n    while (i--) {\n      op = options[i];\n      val = op.hasOwnProperty('_value') ? op._value : op.value;\n      /* eslint-disable eqeqeq */\n      op.selected = multi ? indexOf$1(value, val) > -1 : looseEqual(value, val);\n      /* eslint-enable eqeqeq */\n    }\n  },\n\n  unbind: function unbind() {\n    /* istanbul ignore next */\n    this.vm.$off('hook:attached', this.forceUpdate);\n  }\n};\n\n/**\n * Get select value\n *\n * @param {SelectElement} el\n * @param {Boolean} multi\n * @param {Boolean} init\n * @return {Array|*}\n */\n\nfunction getValue(el, multi, init) {\n  var res = multi ? [] : null;\n  var op, val, selected;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    op = el.options[i];\n    selected = init ? op.hasAttribute('selected') : op.selected;\n    if (selected) {\n      val = op.hasOwnProperty('_value') ? op._value : op.value;\n      if (multi) {\n        res.push(val);\n      } else {\n        return val;\n      }\n    }\n  }\n  return res;\n}\n\n/**\n * Native Array.indexOf uses strict equal, but in this\n * case we need to match string/numbers with custom equal.\n *\n * @param {Array} arr\n * @param {*} val\n */\n\nfunction indexOf$1(arr, val) {\n  var i = arr.length;\n  while (i--) {\n    if (looseEqual(arr[i], val)) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nvar checkbox = {\n\n  bind: function bind() {\n    var self = this;\n    var el = this.el;\n\n    this.getValue = function () {\n      return el.hasOwnProperty('_value') ? el._value : self.params.number ? toNumber(el.value) : el.value;\n    };\n\n    function getBooleanValue() {\n      var val = el.checked;\n      if (val && el.hasOwnProperty('_trueValue')) {\n        return el._trueValue;\n      }\n      if (!val && el.hasOwnProperty('_falseValue')) {\n        return el._falseValue;\n      }\n      return val;\n    }\n\n    this.listener = function () {\n      var model = self._watcher.value;\n      if (isArray(model)) {\n        var val = self.getValue();\n        if (el.checked) {\n          if (indexOf(model, val) < 0) {\n            model.push(val);\n          }\n        } else {\n          model.$remove(val);\n        }\n      } else {\n        self.set(getBooleanValue());\n      }\n    };\n\n    this.on('change', this.listener);\n    if (el.hasAttribute('checked')) {\n      this.afterBind = this.listener;\n    }\n  },\n\n  update: function update(value) {\n    var el = this.el;\n    if (isArray(value)) {\n      el.checked = indexOf(value, this.getValue()) > -1;\n    } else {\n      if (el.hasOwnProperty('_trueValue')) {\n        el.checked = looseEqual(value, el._trueValue);\n      } else {\n        el.checked = !!value;\n      }\n    }\n  }\n};\n\nvar handlers = {\n  text: text$2,\n  radio: radio,\n  select: select,\n  checkbox: checkbox\n};\n\nvar model = {\n\n  priority: MODEL,\n  twoWay: true,\n  handlers: handlers,\n  params: ['lazy', 'number', 'debounce'],\n\n  /**\n   * Possible elements:\n   *   <select>\n   *   <textarea>\n   *   <input type=\"*\">\n   *     - text\n   *     - checkbox\n   *     - radio\n   *     - number\n   */\n\n  bind: function bind() {\n    // friendly warning...\n    this.checkFilters();\n    if (this.hasRead && !this.hasWrite) {\n      process.env.NODE_ENV !== 'production' && warn('It seems you are using a read-only filter with ' + 'v-model=\"' + this.descriptor.raw + '\". ' + 'You might want to use a two-way filter to ensure correct behavior.', this.vm);\n    }\n    var el = this.el;\n    var tag = el.tagName;\n    var handler;\n    if (tag === 'INPUT') {\n      handler = handlers[el.type] || handlers.text;\n    } else if (tag === 'SELECT') {\n      handler = handlers.select;\n    } else if (tag === 'TEXTAREA') {\n      handler = handlers.text;\n    } else {\n      process.env.NODE_ENV !== 'production' && warn('v-model does not support element type: ' + tag, this.vm);\n      return;\n    }\n    el.__v_model = this;\n    handler.bind.call(this);\n    this.update = handler.update;\n    this._unbind = handler.unbind;\n  },\n\n  /**\n   * Check read/write filter stats.\n   */\n\n  checkFilters: function checkFilters() {\n    var filters = this.filters;\n    if (!filters) return;\n    var i = filters.length;\n    while (i--) {\n      var filter = resolveAsset(this.vm.$options, 'filters', filters[i].name);\n      if (typeof filter === 'function' || filter.read) {\n        this.hasRead = true;\n      }\n      if (filter.write) {\n        this.hasWrite = true;\n      }\n    }\n  },\n\n  unbind: function unbind() {\n    this.el.__v_model = null;\n    this._unbind && this._unbind();\n  }\n};\n\n// keyCode aliases\nvar keyCodes = {\n  esc: 27,\n  tab: 9,\n  enter: 13,\n  space: 32,\n  'delete': [8, 46],\n  up: 38,\n  left: 37,\n  right: 39,\n  down: 40\n};\n\nfunction keyFilter(handler, keys) {\n  var codes = keys.map(function (key) {\n    var charCode = key.charCodeAt(0);\n    if (charCode > 47 && charCode < 58) {\n      return parseInt(key, 10);\n    }\n    if (key.length === 1) {\n      charCode = key.toUpperCase().charCodeAt(0);\n      if (charCode > 64 && charCode < 91) {\n        return charCode;\n      }\n    }\n    return keyCodes[key];\n  });\n  codes = [].concat.apply([], codes);\n  return function keyHandler(e) {\n    if (codes.indexOf(e.keyCode) > -1) {\n      return handler.call(this, e);\n    }\n  };\n}\n\nfunction stopFilter(handler) {\n  return function stopHandler(e) {\n    e.stopPropagation();\n    return handler.call(this, e);\n  };\n}\n\nfunction preventFilter(handler) {\n  return function preventHandler(e) {\n    e.preventDefault();\n    return handler.call(this, e);\n  };\n}\n\nfunction selfFilter(handler) {\n  return function selfHandler(e) {\n    if (e.target === e.currentTarget) {\n      return handler.call(this, e);\n    }\n  };\n}\n\nvar on$1 = {\n\n  priority: ON,\n  acceptStatement: true,\n  keyCodes: keyCodes,\n\n  bind: function bind() {\n    // deal with iframes\n    if (this.el.tagName === 'IFRAME' && this.arg !== 'load') {\n      var self = this;\n      this.iframeBind = function () {\n        on(self.el.contentWindow, self.arg, self.handler, self.modifiers.capture);\n      };\n      this.on('load', this.iframeBind);\n    }\n  },\n\n  update: function update(handler) {\n    // stub a noop for v-on with no value,\n    // e.g. @mousedown.prevent\n    if (!this.descriptor.raw) {\n      handler = function () {};\n    }\n\n    if (typeof handler !== 'function') {\n      process.env.NODE_ENV !== 'production' && warn('v-on:' + this.arg + '=\"' + this.expression + '\" expects a function value, ' + 'got ' + handler, this.vm);\n      return;\n    }\n\n    // apply modifiers\n    if (this.modifiers.stop) {\n      handler = stopFilter(handler);\n    }\n    if (this.modifiers.prevent) {\n      handler = preventFilter(handler);\n    }\n    if (this.modifiers.self) {\n      handler = selfFilter(handler);\n    }\n    // key filter\n    var keys = Object.keys(this.modifiers).filter(function (key) {\n      return key !== 'stop' && key !== 'prevent' && key !== 'self' && key !== 'capture';\n    });\n    if (keys.length) {\n      handler = keyFilter(handler, keys);\n    }\n\n    this.reset();\n    this.handler = handler;\n\n    if (this.iframeBind) {\n      this.iframeBind();\n    } else {\n      on(this.el, this.arg, this.handler, this.modifiers.capture);\n    }\n  },\n\n  reset: function reset() {\n    var el = this.iframeBind ? this.el.contentWindow : this.el;\n    if (this.handler) {\n      off(el, this.arg, this.handler);\n    }\n  },\n\n  unbind: function unbind() {\n    this.reset();\n  }\n};\n\nvar prefixes = ['-webkit-', '-moz-', '-ms-'];\nvar camelPrefixes = ['Webkit', 'Moz', 'ms'];\nvar importantRE = /!important;?$/;\nvar propCache = Object.create(null);\n\nvar testEl = null;\n\nvar style = {\n\n  deep: true,\n\n  update: function update(value) {\n    if (typeof value === 'string') {\n      this.el.style.cssText = value;\n    } else if (isArray(value)) {\n      this.handleObject(value.reduce(extend, {}));\n    } else {\n      this.handleObject(value || {});\n    }\n  },\n\n  handleObject: function handleObject(value) {\n    // cache object styles so that only changed props\n    // are actually updated.\n    var cache = this.cache || (this.cache = {});\n    var name, val;\n    for (name in cache) {\n      if (!(name in value)) {\n        this.handleSingle(name, null);\n        delete cache[name];\n      }\n    }\n    for (name in value) {\n      val = value[name];\n      if (val !== cache[name]) {\n        cache[name] = val;\n        this.handleSingle(name, val);\n      }\n    }\n  },\n\n  handleSingle: function handleSingle(prop, value) {\n    prop = normalize(prop);\n    if (!prop) return; // unsupported prop\n    // cast possible numbers/booleans into strings\n    if (value != null) value += '';\n    if (value) {\n      var isImportant = importantRE.test(value) ? 'important' : '';\n      if (isImportant) {\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV !== 'production') {\n          warn('It\\'s probably a bad idea to use !important with inline rules. ' + 'This feature will be deprecated in a future version of Vue.');\n        }\n        value = value.replace(importantRE, '').trim();\n        this.el.style.setProperty(prop.kebab, value, isImportant);\n      } else {\n        this.el.style[prop.camel] = value;\n      }\n    } else {\n      this.el.style[prop.camel] = '';\n    }\n  }\n\n};\n\n/**\n * Normalize a CSS property name.\n * - cache result\n * - auto prefix\n * - camelCase -> dash-case\n *\n * @param {String} prop\n * @return {String}\n */\n\nfunction normalize(prop) {\n  if (propCache[prop]) {\n    return propCache[prop];\n  }\n  var res = prefix(prop);\n  propCache[prop] = propCache[res] = res;\n  return res;\n}\n\n/**\n * Auto detect the appropriate prefix for a CSS property.\n * https://gist.github.com/paulirish/523692\n *\n * @param {String} prop\n * @return {String}\n */\n\nfunction prefix(prop) {\n  prop = hyphenate(prop);\n  var camel = camelize(prop);\n  var upper = camel.charAt(0).toUpperCase() + camel.slice(1);\n  if (!testEl) {\n    testEl = document.createElement('div');\n  }\n  var i = prefixes.length;\n  var prefixed;\n  if (camel !== 'filter' && camel in testEl.style) {\n    return {\n      kebab: prop,\n      camel: camel\n    };\n  }\n  while (i--) {\n    prefixed = camelPrefixes[i] + upper;\n    if (prefixed in testEl.style) {\n      return {\n        kebab: prefixes[i] + prop,\n        camel: prefixed\n      };\n    }\n  }\n}\n\n// xlink\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\nvar xlinkRE = /^xlink:/;\n\n// check for attributes that prohibit interpolations\nvar disallowedInterpAttrRE = /^v-|^:|^@|^(?:is|transition|transition-mode|debounce|track-by|stagger|enter-stagger|leave-stagger)$/;\n// these attributes should also set their corresponding properties\n// because they only affect the initial state of the element\nvar attrWithPropsRE = /^(?:value|checked|selected|muted)$/;\n// these attributes expect enumrated values of \"true\" or \"false\"\n// but are not boolean attributes\nvar enumeratedAttrRE = /^(?:draggable|contenteditable|spellcheck)$/;\n\n// these attributes should set a hidden property for\n// binding v-model to object values\nvar modelProps = {\n  value: '_value',\n  'true-value': '_trueValue',\n  'false-value': '_falseValue'\n};\n\nvar bind$1 = {\n\n  priority: BIND,\n\n  bind: function bind() {\n    var attr = this.arg;\n    var tag = this.el.tagName;\n    // should be deep watch on object mode\n    if (!attr) {\n      this.deep = true;\n    }\n    // handle interpolation bindings\n    var descriptor = this.descriptor;\n    var tokens = descriptor.interp;\n    if (tokens) {\n      // handle interpolations with one-time tokens\n      if (descriptor.hasOneTime) {\n        this.expression = tokensToExp(tokens, this._scope || this.vm);\n      }\n\n      // only allow binding on native attributes\n      if (disallowedInterpAttrRE.test(attr) || attr === 'name' && (tag === 'PARTIAL' || tag === 'SLOT')) {\n        process.env.NODE_ENV !== 'production' && warn(attr + '=\"' + descriptor.raw + '\": ' + 'attribute interpolation is not allowed in Vue.js ' + 'directives and special attributes.', this.vm);\n        this.el.removeAttribute(attr);\n        this.invalid = true;\n      }\n\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production') {\n        var raw = attr + '=\"' + descriptor.raw + '\": ';\n        // warn src\n        if (attr === 'src') {\n          warn(raw + 'interpolation in \"src\" attribute will cause ' + 'a 404 request. Use v-bind:src instead.', this.vm);\n        }\n\n        // warn style\n        if (attr === 'style') {\n          warn(raw + 'interpolation in \"style\" attribute will cause ' + 'the attribute to be discarded in Internet Explorer. ' + 'Use v-bind:style instead.', this.vm);\n        }\n      }\n    }\n  },\n\n  update: function update(value) {\n    if (this.invalid) {\n      return;\n    }\n    var attr = this.arg;\n    if (this.arg) {\n      this.handleSingle(attr, value);\n    } else {\n      this.handleObject(value || {});\n    }\n  },\n\n  // share object handler with v-bind:class\n  handleObject: style.handleObject,\n\n  handleSingle: function handleSingle(attr, value) {\n    var el = this.el;\n    var interp = this.descriptor.interp;\n    if (this.modifiers.camel) {\n      attr = camelize(attr);\n    }\n    if (!interp && attrWithPropsRE.test(attr) && attr in el) {\n      var attrValue = attr === 'value' ? value == null // IE9 will set input.value to \"null\" for null...\n      ? '' : value : value;\n\n      if (el[attr] !== attrValue) {\n        el[attr] = attrValue;\n      }\n    }\n    // set model props\n    var modelProp = modelProps[attr];\n    if (!interp && modelProp) {\n      el[modelProp] = value;\n      // update v-model if present\n      var model = el.__v_model;\n      if (model) {\n        model.listener();\n      }\n    }\n    // do not set value attribute for textarea\n    if (attr === 'value' && el.tagName === 'TEXTAREA') {\n      el.removeAttribute(attr);\n      return;\n    }\n    // update attribute\n    if (enumeratedAttrRE.test(attr)) {\n      el.setAttribute(attr, value ? 'true' : 'false');\n    } else if (value != null && value !== false) {\n      if (attr === 'class') {\n        // handle edge case #1960:\n        // class interpolation should not overwrite Vue transition class\n        if (el.__v_trans) {\n          value += ' ' + el.__v_trans.id + '-transition';\n        }\n        setClass(el, value);\n      } else if (xlinkRE.test(attr)) {\n        el.setAttributeNS(xlinkNS, attr, value === true ? '' : value);\n      } else {\n        el.setAttribute(attr, value === true ? '' : value);\n      }\n    } else {\n      el.removeAttribute(attr);\n    }\n  }\n};\n\nvar el = {\n\n  priority: EL,\n\n  bind: function bind() {\n    /* istanbul ignore if */\n    if (!this.arg) {\n      return;\n    }\n    var id = this.id = camelize(this.arg);\n    var refs = (this._scope || this.vm).$els;\n    if (hasOwn(refs, id)) {\n      refs[id] = this.el;\n    } else {\n      defineReactive(refs, id, this.el);\n    }\n  },\n\n  unbind: function unbind() {\n    var refs = (this._scope || this.vm).$els;\n    if (refs[this.id] === this.el) {\n      refs[this.id] = null;\n    }\n  }\n};\n\nvar ref = {\n  bind: function bind() {\n    process.env.NODE_ENV !== 'production' && warn('v-ref:' + this.arg + ' must be used on a child ' + 'component. Found on <' + this.el.tagName.toLowerCase() + '>.', this.vm);\n  }\n};\n\nvar cloak = {\n  bind: function bind() {\n    var el = this.el;\n    this.vm.$once('pre-hook:compiled', function () {\n      el.removeAttribute('v-cloak');\n    });\n  }\n};\n\n// must export plain object\nvar directives = {\n  text: text$1,\n  html: html,\n  'for': vFor,\n  'if': vIf,\n  show: show,\n  model: model,\n  on: on$1,\n  bind: bind$1,\n  el: el,\n  ref: ref,\n  cloak: cloak\n};\n\nvar vClass = {\n\n  deep: true,\n\n  update: function update(value) {\n    if (!value) {\n      this.cleanup();\n    } else if (typeof value === 'string') {\n      this.setClass(value.trim().split(/\\s+/));\n    } else {\n      this.setClass(normalize$1(value));\n    }\n  },\n\n  setClass: function setClass(value) {\n    this.cleanup(value);\n    for (var i = 0, l = value.length; i < l; i++) {\n      var val = value[i];\n      if (val) {\n        apply(this.el, val, addClass);\n      }\n    }\n    this.prevKeys = value;\n  },\n\n  cleanup: function cleanup(value) {\n    var prevKeys = this.prevKeys;\n    if (!prevKeys) return;\n    var i = prevKeys.length;\n    while (i--) {\n      var key = prevKeys[i];\n      if (!value || value.indexOf(key) < 0) {\n        apply(this.el, key, removeClass);\n      }\n    }\n  }\n};\n\n/**\n * Normalize objects and arrays (potentially containing objects)\n * into array of strings.\n *\n * @param {Object|Array<String|Object>} value\n * @return {Array<String>}\n */\n\nfunction normalize$1(value) {\n  var res = [];\n  if (isArray(value)) {\n    for (var i = 0, l = value.length; i < l; i++) {\n      var _key = value[i];\n      if (_key) {\n        if (typeof _key === 'string') {\n          res.push(_key);\n        } else {\n          for (var k in _key) {\n            if (_key[k]) res.push(k);\n          }\n        }\n      }\n    }\n  } else if (isObject(value)) {\n    for (var key in value) {\n      if (value[key]) res.push(key);\n    }\n  }\n  return res;\n}\n\n/**\n * Add or remove a class/classes on an element\n *\n * @param {Element} el\n * @param {String} key The class name. This may or may not\n *                     contain a space character, in such a\n *                     case we'll deal with multiple class\n *                     names at once.\n * @param {Function} fn\n */\n\nfunction apply(el, key, fn) {\n  key = key.trim();\n  if (key.indexOf(' ') === -1) {\n    fn(el, key);\n    return;\n  }\n  // The key contains one or more space characters.\n  // Since a class name doesn't accept such characters, we\n  // treat it as multiple classes.\n  var keys = key.split(/\\s+/);\n  for (var i = 0, l = keys.length; i < l; i++) {\n    fn(el, keys[i]);\n  }\n}\n\nvar component = {\n\n  priority: COMPONENT,\n\n  params: ['keep-alive', 'transition-mode', 'inline-template'],\n\n  /**\n   * Setup. Two possible usages:\n   *\n   * - static:\n   *   <comp> or <div v-component=\"comp\">\n   *\n   * - dynamic:\n   *   <component :is=\"view\">\n   */\n\n  bind: function bind() {\n    if (!this.el.__vue__) {\n      // keep-alive cache\n      this.keepAlive = this.params.keepAlive;\n      if (this.keepAlive) {\n        this.cache = {};\n      }\n      // check inline-template\n      if (this.params.inlineTemplate) {\n        // extract inline template as a DocumentFragment\n        this.inlineTemplate = extractContent(this.el, true);\n      }\n      // component resolution related state\n      this.pendingComponentCb = this.Component = null;\n      // transition related state\n      this.pendingRemovals = 0;\n      this.pendingRemovalCb = null;\n      // create a ref anchor\n      this.anchor = createAnchor('v-component');\n      replace(this.el, this.anchor);\n      // remove is attribute.\n      // this is removed during compilation, but because compilation is\n      // cached, when the component is used elsewhere this attribute\n      // will remain at link time.\n      this.el.removeAttribute('is');\n      this.el.removeAttribute(':is');\n      // remove ref, same as above\n      if (this.descriptor.ref) {\n        this.el.removeAttribute('v-ref:' + hyphenate(this.descriptor.ref));\n      }\n      // if static, build right now.\n      if (this.literal) {\n        this.setComponent(this.expression);\n      }\n    } else {\n      process.env.NODE_ENV !== 'production' && warn('cannot mount component \"' + this.expression + '\" ' + 'on already mounted element: ' + this.el);\n    }\n  },\n\n  /**\n   * Public update, called by the watcher in the dynamic\n   * literal scenario, e.g. <component :is=\"view\">\n   */\n\n  update: function update(value) {\n    if (!this.literal) {\n      this.setComponent(value);\n    }\n  },\n\n  /**\n   * Switch dynamic components. May resolve the component\n   * asynchronously, and perform transition based on\n   * specified transition mode. Accepts a few additional\n   * arguments specifically for vue-router.\n   *\n   * The callback is called when the full transition is\n   * finished.\n   *\n   * @param {String} value\n   * @param {Function} [cb]\n   */\n\n  setComponent: function setComponent(value, cb) {\n    this.invalidatePending();\n    if (!value) {\n      // just remove current\n      this.unbuild(true);\n      this.remove(this.childVM, cb);\n      this.childVM = null;\n    } else {\n      var self = this;\n      this.resolveComponent(value, function () {\n        self.mountComponent(cb);\n      });\n    }\n  },\n\n  /**\n   * Resolve the component constructor to use when creating\n   * the child vm.\n   *\n   * @param {String|Function} value\n   * @param {Function} cb\n   */\n\n  resolveComponent: function resolveComponent(value, cb) {\n    var self = this;\n    this.pendingComponentCb = cancellable(function (Component) {\n      self.ComponentName = Component.options.name || (typeof value === 'string' ? value : null);\n      self.Component = Component;\n      cb();\n    });\n    this.vm._resolveComponent(value, this.pendingComponentCb);\n  },\n\n  /**\n   * Create a new instance using the current constructor and\n   * replace the existing instance. This method doesn't care\n   * whether the new component and the old one are actually\n   * the same.\n   *\n   * @param {Function} [cb]\n   */\n\n  mountComponent: function mountComponent(cb) {\n    // actual mount\n    this.unbuild(true);\n    var self = this;\n    var activateHooks = this.Component.options.activate;\n    var cached = this.getCached();\n    var newComponent = this.build();\n    if (activateHooks && !cached) {\n      this.waitingFor = newComponent;\n      callActivateHooks(activateHooks, newComponent, function () {\n        if (self.waitingFor !== newComponent) {\n          return;\n        }\n        self.waitingFor = null;\n        self.transition(newComponent, cb);\n      });\n    } else {\n      // update ref for kept-alive component\n      if (cached) {\n        newComponent._updateRef();\n      }\n      this.transition(newComponent, cb);\n    }\n  },\n\n  /**\n   * When the component changes or unbinds before an async\n   * constructor is resolved, we need to invalidate its\n   * pending callback.\n   */\n\n  invalidatePending: function invalidatePending() {\n    if (this.pendingComponentCb) {\n      this.pendingComponentCb.cancel();\n      this.pendingComponentCb = null;\n    }\n  },\n\n  /**\n   * Instantiate/insert a new child vm.\n   * If keep alive and has cached instance, insert that\n   * instance; otherwise build a new one and cache it.\n   *\n   * @param {Object} [extraOptions]\n   * @return {Vue} - the created instance\n   */\n\n  build: function build(extraOptions) {\n    var cached = this.getCached();\n    if (cached) {\n      return cached;\n    }\n    if (this.Component) {\n      // default options\n      var options = {\n        name: this.ComponentName,\n        el: cloneNode(this.el),\n        template: this.inlineTemplate,\n        // make sure to add the child with correct parent\n        // if this is a transcluded component, its parent\n        // should be the transclusion host.\n        parent: this._host || this.vm,\n        // if no inline-template, then the compiled\n        // linker can be cached for better performance.\n        _linkerCachable: !this.inlineTemplate,\n        _ref: this.descriptor.ref,\n        _asComponent: true,\n        _isRouterView: this._isRouterView,\n        // if this is a transcluded component, context\n        // will be the common parent vm of this instance\n        // and its host.\n        _context: this.vm,\n        // if this is inside an inline v-for, the scope\n        // will be the intermediate scope created for this\n        // repeat fragment. this is used for linking props\n        // and container directives.\n        _scope: this._scope,\n        // pass in the owner fragment of this component.\n        // this is necessary so that the fragment can keep\n        // track of its contained components in order to\n        // call attach/detach hooks for them.\n        _frag: this._frag\n      };\n      // extra options\n      // in 1.0.0 this is used by vue-router only\n      /* istanbul ignore if */\n      if (extraOptions) {\n        extend(options, extraOptions);\n      }\n      var child = new this.Component(options);\n      if (this.keepAlive) {\n        this.cache[this.Component.cid] = child;\n      }\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && this.el.hasAttribute('transition') && child._isFragment) {\n        warn('Transitions will not work on a fragment instance. ' + 'Template: ' + child.$options.template, child);\n      }\n      return child;\n    }\n  },\n\n  /**\n   * Try to get a cached instance of the current component.\n   *\n   * @return {Vue|undefined}\n   */\n\n  getCached: function getCached() {\n    return this.keepAlive && this.cache[this.Component.cid];\n  },\n\n  /**\n   * Teardown the current child, but defers cleanup so\n   * that we can separate the destroy and removal steps.\n   *\n   * @param {Boolean} defer\n   */\n\n  unbuild: function unbuild(defer) {\n    if (this.waitingFor) {\n      if (!this.keepAlive) {\n        this.waitingFor.$destroy();\n      }\n      this.waitingFor = null;\n    }\n    var child = this.childVM;\n    if (!child || this.keepAlive) {\n      if (child) {\n        // remove ref\n        child._inactive = true;\n        child._updateRef(true);\n      }\n      return;\n    }\n    // the sole purpose of `deferCleanup` is so that we can\n    // \"deactivate\" the vm right now and perform DOM removal\n    // later.\n    child.$destroy(false, defer);\n  },\n\n  /**\n   * Remove current destroyed child and manually do\n   * the cleanup after removal.\n   *\n   * @param {Function} cb\n   */\n\n  remove: function remove(child, cb) {\n    var keepAlive = this.keepAlive;\n    if (child) {\n      // we may have a component switch when a previous\n      // component is still being transitioned out.\n      // we want to trigger only one lastest insertion cb\n      // when the existing transition finishes. (#1119)\n      this.pendingRemovals++;\n      this.pendingRemovalCb = cb;\n      var self = this;\n      child.$remove(function () {\n        self.pendingRemovals--;\n        if (!keepAlive) child._cleanup();\n        if (!self.pendingRemovals && self.pendingRemovalCb) {\n          self.pendingRemovalCb();\n          self.pendingRemovalCb = null;\n        }\n      });\n    } else if (cb) {\n      cb();\n    }\n  },\n\n  /**\n   * Actually swap the components, depending on the\n   * transition mode. Defaults to simultaneous.\n   *\n   * @param {Vue} target\n   * @param {Function} [cb]\n   */\n\n  transition: function transition(target, cb) {\n    var self = this;\n    var current = this.childVM;\n    // for devtool inspection\n    if (current) current._inactive = true;\n    target._inactive = false;\n    this.childVM = target;\n    switch (self.params.transitionMode) {\n      case 'in-out':\n        target.$before(self.anchor, function () {\n          self.remove(current, cb);\n        });\n        break;\n      case 'out-in':\n        self.remove(current, function () {\n          target.$before(self.anchor, cb);\n        });\n        break;\n      default:\n        self.remove(current);\n        target.$before(self.anchor, cb);\n    }\n  },\n\n  /**\n   * Unbind.\n   */\n\n  unbind: function unbind() {\n    this.invalidatePending();\n    // Do not defer cleanup when unbinding\n    this.unbuild();\n    // destroy all keep-alive cached instances\n    if (this.cache) {\n      for (var key in this.cache) {\n        this.cache[key].$destroy();\n      }\n      this.cache = null;\n    }\n  }\n};\n\n/**\n * Call activate hooks in order (asynchronous)\n *\n * @param {Array} hooks\n * @param {Vue} vm\n * @param {Function} cb\n */\n\nfunction callActivateHooks(hooks, vm, cb) {\n  var total = hooks.length;\n  var called = 0;\n  hooks[0].call(vm, next);\n  function next() {\n    if (++called >= total) {\n      cb();\n    } else {\n      hooks[called].call(vm, next);\n    }\n  }\n}\n\nvar propBindingModes = config._propBindingModes;\nvar empty = {};\n\n// regexes\nvar identRE$1 = /^[$_a-zA-Z]+[\\w$]*$/;\nvar settablePathRE = /^[A-Za-z_$][\\w$]*(\\.[A-Za-z_$][\\w$]*|\\[[^\\[\\]]+\\])*$/;\n\n/**\n * Compile props on a root element and return\n * a props link function.\n *\n * @param {Element|DocumentFragment} el\n * @param {Array} propOptions\n * @param {Vue} vm\n * @return {Function} propsLinkFn\n */\n\nfunction compileProps(el, propOptions, vm) {\n  var props = [];\n  var names = Object.keys(propOptions);\n  var i = names.length;\n  var options, name, attr, value, path, parsed, prop;\n  while (i--) {\n    name = names[i];\n    options = propOptions[name] || empty;\n\n    if (process.env.NODE_ENV !== 'production' && name === '$data') {\n      warn('Do not use $data as prop.', vm);\n      continue;\n    }\n\n    // props could contain dashes, which will be\n    // interpreted as minus calculations by the parser\n    // so we need to camelize the path here\n    path = camelize(name);\n    if (!identRE$1.test(path)) {\n      process.env.NODE_ENV !== 'production' && warn('Invalid prop key: \"' + name + '\". Prop keys ' + 'must be valid identifiers.', vm);\n      continue;\n    }\n\n    prop = {\n      name: name,\n      path: path,\n      options: options,\n      mode: propBindingModes.ONE_WAY,\n      raw: null\n    };\n\n    attr = hyphenate(name);\n    // first check dynamic version\n    if ((value = getBindAttr(el, attr)) === null) {\n      if ((value = getBindAttr(el, attr + '.sync')) !== null) {\n        prop.mode = propBindingModes.TWO_WAY;\n      } else if ((value = getBindAttr(el, attr + '.once')) !== null) {\n        prop.mode = propBindingModes.ONE_TIME;\n      }\n    }\n    if (value !== null) {\n      // has dynamic binding!\n      prop.raw = value;\n      parsed = parseDirective(value);\n      value = parsed.expression;\n      prop.filters = parsed.filters;\n      // check binding type\n      if (isLiteral(value) && !parsed.filters) {\n        // for expressions containing literal numbers and\n        // booleans, there's no need to setup a prop binding,\n        // so we can optimize them as a one-time set.\n        prop.optimizedLiteral = true;\n      } else {\n        prop.dynamic = true;\n        // check non-settable path for two-way bindings\n        if (process.env.NODE_ENV !== 'production' && prop.mode === propBindingModes.TWO_WAY && !settablePathRE.test(value)) {\n          prop.mode = propBindingModes.ONE_WAY;\n          warn('Cannot bind two-way prop with non-settable ' + 'parent path: ' + value, vm);\n        }\n      }\n      prop.parentPath = value;\n\n      // warn required two-way\n      if (process.env.NODE_ENV !== 'production' && options.twoWay && prop.mode !== propBindingModes.TWO_WAY) {\n        warn('Prop \"' + name + '\" expects a two-way binding type.', vm);\n      }\n    } else if ((value = getAttr(el, attr)) !== null) {\n      // has literal binding!\n      prop.raw = value;\n    } else if (process.env.NODE_ENV !== 'production') {\n      // check possible camelCase prop usage\n      var lowerCaseName = path.toLowerCase();\n      value = /[A-Z\\-]/.test(name) && (el.getAttribute(lowerCaseName) || el.getAttribute(':' + lowerCaseName) || el.getAttribute('v-bind:' + lowerCaseName) || el.getAttribute(':' + lowerCaseName + '.once') || el.getAttribute('v-bind:' + lowerCaseName + '.once') || el.getAttribute(':' + lowerCaseName + '.sync') || el.getAttribute('v-bind:' + lowerCaseName + '.sync'));\n      if (value) {\n        warn('Possible usage error for prop `' + lowerCaseName + '` - ' + 'did you mean `' + attr + '`? HTML is case-insensitive, remember to use ' + 'kebab-case for props in templates.', vm);\n      } else if (options.required) {\n        // warn missing required\n        warn('Missing required prop: ' + name, vm);\n      }\n    }\n    // push prop\n    props.push(prop);\n  }\n  return makePropsLinkFn(props);\n}\n\n/**\n * Build a function that applies props to a vm.\n *\n * @param {Array} props\n * @return {Function} propsLinkFn\n */\n\nfunction makePropsLinkFn(props) {\n  return function propsLinkFn(vm, scope) {\n    // store resolved props info\n    vm._props = {};\n    var inlineProps = vm.$options.propsData;\n    var i = props.length;\n    var prop, path, options, value, raw;\n    while (i--) {\n      prop = props[i];\n      raw = prop.raw;\n      path = prop.path;\n      options = prop.options;\n      vm._props[path] = prop;\n      if (inlineProps && hasOwn(inlineProps, path)) {\n        initProp(vm, prop, inlineProps[path]);\n      }if (raw === null) {\n        // initialize absent prop\n        initProp(vm, prop, undefined);\n      } else if (prop.dynamic) {\n        // dynamic prop\n        if (prop.mode === propBindingModes.ONE_TIME) {\n          // one time binding\n          value = (scope || vm._context || vm).$get(prop.parentPath);\n          initProp(vm, prop, value);\n        } else {\n          if (vm._context) {\n            // dynamic binding\n            vm._bindDir({\n              name: 'prop',\n              def: propDef,\n              prop: prop\n            }, null, null, scope); // el, host, scope\n          } else {\n              // root instance\n              initProp(vm, prop, vm.$get(prop.parentPath));\n            }\n        }\n      } else if (prop.optimizedLiteral) {\n        // optimized literal, cast it and just set once\n        var stripped = stripQuotes(raw);\n        value = stripped === raw ? toBoolean(toNumber(raw)) : stripped;\n        initProp(vm, prop, value);\n      } else {\n        // string literal, but we need to cater for\n        // Boolean props with no value, or with same\n        // literal value (e.g. disabled=\"disabled\")\n        // see https://github.com/vuejs/vue-loader/issues/182\n        value = options.type === Boolean && (raw === '' || raw === hyphenate(prop.name)) ? true : raw;\n        initProp(vm, prop, value);\n      }\n    }\n  };\n}\n\n/**\n * Process a prop with a rawValue, applying necessary coersions,\n * default values & assertions and call the given callback with\n * processed value.\n *\n * @param {Vue} vm\n * @param {Object} prop\n * @param {*} rawValue\n * @param {Function} fn\n */\n\nfunction processPropValue(vm, prop, rawValue, fn) {\n  var isSimple = prop.dynamic && isSimplePath(prop.parentPath);\n  var value = rawValue;\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop);\n  }\n  value = coerceProp(prop, value, vm);\n  var coerced = value !== rawValue;\n  if (!assertProp(prop, value, vm)) {\n    value = undefined;\n  }\n  if (isSimple && !coerced) {\n    withoutConversion(function () {\n      fn(value);\n    });\n  } else {\n    fn(value);\n  }\n}\n\n/**\n * Set a prop's initial value on a vm and its data object.\n *\n * @param {Vue} vm\n * @param {Object} prop\n * @param {*} value\n */\n\nfunction initProp(vm, prop, value) {\n  processPropValue(vm, prop, value, function (value) {\n    defineReactive(vm, prop.path, value);\n  });\n}\n\n/**\n * Update a prop's value on a vm.\n *\n * @param {Vue} vm\n * @param {Object} prop\n * @param {*} value\n */\n\nfunction updateProp(vm, prop, value) {\n  processPropValue(vm, prop, value, function (value) {\n    vm[prop.path] = value;\n  });\n}\n\n/**\n * Get the default value of a prop.\n *\n * @param {Vue} vm\n * @param {Object} prop\n * @return {*}\n */\n\nfunction getPropDefaultValue(vm, prop) {\n  // no default, return undefined\n  var options = prop.options;\n  if (!hasOwn(options, 'default')) {\n    // absent boolean value defaults to false\n    return options.type === Boolean ? false : undefined;\n  }\n  var def = options['default'];\n  // warn against non-factory defaults for Object & Array\n  if (isObject(def)) {\n    process.env.NODE_ENV !== 'production' && warn('Invalid default value for prop \"' + prop.name + '\": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);\n  }\n  // call factory function for non-Function types\n  return typeof def === 'function' && options.type !== Function ? def.call(vm) : def;\n}\n\n/**\n * Assert whether a prop is valid.\n *\n * @param {Object} prop\n * @param {*} value\n * @param {Vue} vm\n */\n\nfunction assertProp(prop, value, vm) {\n  if (!prop.options.required && ( // non-required\n  prop.raw === null || // abscent\n  value == null) // null or undefined\n  ) {\n      return true;\n    }\n  var options = prop.options;\n  var type = options.type;\n  var valid = !type;\n  var expectedTypes = [];\n  if (type) {\n    if (!isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType);\n      valid = assertedType.valid;\n    }\n  }\n  if (!valid) {\n    if (process.env.NODE_ENV !== 'production') {\n      warn('Invalid prop: type check failed for prop \"' + prop.name + '\".' + ' Expected ' + expectedTypes.map(formatType).join(', ') + ', got ' + formatValue(value) + '.', vm);\n    }\n    return false;\n  }\n  var validator = options.validator;\n  if (validator) {\n    if (!validator(value)) {\n      process.env.NODE_ENV !== 'production' && warn('Invalid prop: custom validator check failed for prop \"' + prop.name + '\".', vm);\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Force parsing value with coerce option.\n *\n * @param {*} value\n * @param {Object} options\n * @return {*}\n */\n\nfunction coerceProp(prop, value, vm) {\n  var coerce = prop.options.coerce;\n  if (!coerce) {\n    return value;\n  }\n  if (typeof coerce === 'function') {\n    return coerce(value);\n  } else {\n    process.env.NODE_ENV !== 'production' && warn('Invalid coerce for prop \"' + prop.name + '\": expected function, got ' + typeof coerce + '.', vm);\n    return value;\n  }\n}\n\n/**\n * Assert the type of a value\n *\n * @param {*} value\n * @param {Function} type\n * @return {Object}\n */\n\nfunction assertType(value, type) {\n  var valid;\n  var expectedType;\n  if (type === String) {\n    expectedType = 'string';\n    valid = typeof value === expectedType;\n  } else if (type === Number) {\n    expectedType = 'number';\n    valid = typeof value === expectedType;\n  } else if (type === Boolean) {\n    expectedType = 'boolean';\n    valid = typeof value === expectedType;\n  } else if (type === Function) {\n    expectedType = 'function';\n    valid = typeof value === expectedType;\n  } else if (type === Object) {\n    expectedType = 'object';\n    valid = isPlainObject(value);\n  } else if (type === Array) {\n    expectedType = 'array';\n    valid = isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  };\n}\n\n/**\n * Format type for output\n *\n * @param {String} type\n * @return {String}\n */\n\nfunction formatType(type) {\n  return type ? type.charAt(0).toUpperCase() + type.slice(1) : 'custom type';\n}\n\n/**\n * Format value\n *\n * @param {*} value\n * @return {String}\n */\n\nfunction formatValue(val) {\n  return Object.prototype.toString.call(val).slice(8, -1);\n}\n\nvar bindingModes = config._propBindingModes;\n\nvar propDef = {\n\n  bind: function bind() {\n    var child = this.vm;\n    var parent = child._context;\n    // passed in from compiler directly\n    var prop = this.descriptor.prop;\n    var childKey = prop.path;\n    var parentKey = prop.parentPath;\n    var twoWay = prop.mode === bindingModes.TWO_WAY;\n\n    var parentWatcher = this.parentWatcher = new Watcher(parent, parentKey, function (val) {\n      updateProp(child, prop, val);\n    }, {\n      twoWay: twoWay,\n      filters: prop.filters,\n      // important: props need to be observed on the\n      // v-for scope if present\n      scope: this._scope\n    });\n\n    // set the child initial value.\n    initProp(child, prop, parentWatcher.value);\n\n    // setup two-way binding\n    if (twoWay) {\n      // important: defer the child watcher creation until\n      // the created hook (after data observation)\n      var self = this;\n      child.$once('pre-hook:created', function () {\n        self.childWatcher = new Watcher(child, childKey, function (val) {\n          parentWatcher.set(val);\n        }, {\n          // ensure sync upward before parent sync down.\n          // this is necessary in cases e.g. the child\n          // mutates a prop array, then replaces it. (#1683)\n          sync: true\n        });\n      });\n    }\n  },\n\n  unbind: function unbind() {\n    this.parentWatcher.teardown();\n    if (this.childWatcher) {\n      this.childWatcher.teardown();\n    }\n  }\n};\n\nvar queue$1 = [];\nvar queued = false;\n\n/**\n * Push a job into the queue.\n *\n * @param {Function} job\n */\n\nfunction pushJob(job) {\n  queue$1.push(job);\n  if (!queued) {\n    queued = true;\n    nextTick(flush);\n  }\n}\n\n/**\n * Flush the queue, and do one forced reflow before\n * triggering transitions.\n */\n\nfunction flush() {\n  // Force layout\n  var f = document.documentElement.offsetHeight;\n  for (var i = 0; i < queue$1.length; i++) {\n    queue$1[i]();\n  }\n  queue$1 = [];\n  queued = false;\n  // dummy return, so js linters don't complain about\n  // unused variable f\n  return f;\n}\n\nvar TYPE_TRANSITION = 'transition';\nvar TYPE_ANIMATION = 'animation';\nvar transDurationProp = transitionProp + 'Duration';\nvar animDurationProp = animationProp + 'Duration';\n\n/**\n * If a just-entered element is applied the\n * leave class while its enter transition hasn't started yet,\n * and the transitioned property has the same value for both\n * enter/leave, then the leave transition will be skipped and\n * the transitionend event never fires. This function ensures\n * its callback to be called after a transition has started\n * by waiting for double raf.\n *\n * It falls back to setTimeout on devices that support CSS\n * transitions but not raf (e.g. Android 4.2 browser) - since\n * these environments are usually slow, we are giving it a\n * relatively large timeout.\n */\n\nvar raf = inBrowser && window.requestAnimationFrame;\nvar waitForTransitionStart = raf\n/* istanbul ignore next */\n? function (fn) {\n  raf(function () {\n    raf(fn);\n  });\n} : function (fn) {\n  setTimeout(fn, 50);\n};\n\n/**\n * A Transition object that encapsulates the state and logic\n * of the transition.\n *\n * @param {Element} el\n * @param {String} id\n * @param {Object} hooks\n * @param {Vue} vm\n */\nfunction Transition(el, id, hooks, vm) {\n  this.id = id;\n  this.el = el;\n  this.enterClass = hooks && hooks.enterClass || id + '-enter';\n  this.leaveClass = hooks && hooks.leaveClass || id + '-leave';\n  this.hooks = hooks;\n  this.vm = vm;\n  // async state\n  this.pendingCssEvent = this.pendingCssCb = this.cancel = this.pendingJsCb = this.op = this.cb = null;\n  this.justEntered = false;\n  this.entered = this.left = false;\n  this.typeCache = {};\n  // check css transition type\n  this.type = hooks && hooks.type;\n  /* istanbul ignore if */\n  if (process.env.NODE_ENV !== 'production') {\n    if (this.type && this.type !== TYPE_TRANSITION && this.type !== TYPE_ANIMATION) {\n      warn('invalid CSS transition type for transition=\"' + this.id + '\": ' + this.type, vm);\n    }\n  }\n  // bind\n  var self = this;['enterNextTick', 'enterDone', 'leaveNextTick', 'leaveDone'].forEach(function (m) {\n    self[m] = bind(self[m], self);\n  });\n}\n\nvar p$1 = Transition.prototype;\n\n/**\n * Start an entering transition.\n *\n * 1. enter transition triggered\n * 2. call beforeEnter hook\n * 3. add enter class\n * 4. insert/show element\n * 5. call enter hook (with possible explicit js callback)\n * 6. reflow\n * 7. based on transition type:\n *    - transition:\n *        remove class now, wait for transitionend,\n *        then done if there's no explicit js callback.\n *    - animation:\n *        wait for animationend, remove class,\n *        then done if there's no explicit js callback.\n *    - no css transition:\n *        done now if there's no explicit js callback.\n * 8. wait for either done or js callback, then call\n *    afterEnter hook.\n *\n * @param {Function} op - insert/show the element\n * @param {Function} [cb]\n */\n\np$1.enter = function (op, cb) {\n  this.cancelPending();\n  this.callHook('beforeEnter');\n  this.cb = cb;\n  addClass(this.el, this.enterClass);\n  op();\n  this.entered = false;\n  this.callHookWithCb('enter');\n  if (this.entered) {\n    return; // user called done synchronously.\n  }\n  this.cancel = this.hooks && this.hooks.enterCancelled;\n  pushJob(this.enterNextTick);\n};\n\n/**\n * The \"nextTick\" phase of an entering transition, which is\n * to be pushed into a queue and executed after a reflow so\n * that removing the class can trigger a CSS transition.\n */\n\np$1.enterNextTick = function () {\n  var _this = this;\n\n  // prevent transition skipping\n  this.justEntered = true;\n  waitForTransitionStart(function () {\n    _this.justEntered = false;\n  });\n  var enterDone = this.enterDone;\n  var type = this.getCssTransitionType(this.enterClass);\n  if (!this.pendingJsCb) {\n    if (type === TYPE_TRANSITION) {\n      // trigger transition by removing enter class now\n      removeClass(this.el, this.enterClass);\n      this.setupCssCb(transitionEndEvent, enterDone);\n    } else if (type === TYPE_ANIMATION) {\n      this.setupCssCb(animationEndEvent, enterDone);\n    } else {\n      enterDone();\n    }\n  } else if (type === TYPE_TRANSITION) {\n    removeClass(this.el, this.enterClass);\n  }\n};\n\n/**\n * The \"cleanup\" phase of an entering transition.\n */\n\np$1.enterDone = function () {\n  this.entered = true;\n  this.cancel = this.pendingJsCb = null;\n  removeClass(this.el, this.enterClass);\n  this.callHook('afterEnter');\n  if (this.cb) this.cb();\n};\n\n/**\n * Start a leaving transition.\n *\n * 1. leave transition triggered.\n * 2. call beforeLeave hook\n * 3. add leave class (trigger css transition)\n * 4. call leave hook (with possible explicit js callback)\n * 5. reflow if no explicit js callback is provided\n * 6. based on transition type:\n *    - transition or animation:\n *        wait for end event, remove class, then done if\n *        there's no explicit js callback.\n *    - no css transition:\n *        done if there's no explicit js callback.\n * 7. wait for either done or js callback, then call\n *    afterLeave hook.\n *\n * @param {Function} op - remove/hide the element\n * @param {Function} [cb]\n */\n\np$1.leave = function (op, cb) {\n  this.cancelPending();\n  this.callHook('beforeLeave');\n  this.op = op;\n  this.cb = cb;\n  addClass(this.el, this.leaveClass);\n  this.left = false;\n  this.callHookWithCb('leave');\n  if (this.left) {\n    return; // user called done synchronously.\n  }\n  this.cancel = this.hooks && this.hooks.leaveCancelled;\n  // only need to handle leaveDone if\n  // 1. the transition is already done (synchronously called\n  //    by the user, which causes this.op set to null)\n  // 2. there's no explicit js callback\n  if (this.op && !this.pendingJsCb) {\n    // if a CSS transition leaves immediately after enter,\n    // the transitionend event never fires. therefore we\n    // detect such cases and end the leave immediately.\n    if (this.justEntered) {\n      this.leaveDone();\n    } else {\n      pushJob(this.leaveNextTick);\n    }\n  }\n};\n\n/**\n * The \"nextTick\" phase of a leaving transition.\n */\n\np$1.leaveNextTick = function () {\n  var type = this.getCssTransitionType(this.leaveClass);\n  if (type) {\n    var event = type === TYPE_TRANSITION ? transitionEndEvent : animationEndEvent;\n    this.setupCssCb(event, this.leaveDone);\n  } else {\n    this.leaveDone();\n  }\n};\n\n/**\n * The \"cleanup\" phase of a leaving transition.\n */\n\np$1.leaveDone = function () {\n  this.left = true;\n  this.cancel = this.pendingJsCb = null;\n  this.op();\n  removeClass(this.el, this.leaveClass);\n  this.callHook('afterLeave');\n  if (this.cb) this.cb();\n  this.op = null;\n};\n\n/**\n * Cancel any pending callbacks from a previously running\n * but not finished transition.\n */\n\np$1.cancelPending = function () {\n  this.op = this.cb = null;\n  var hasPending = false;\n  if (this.pendingCssCb) {\n    hasPending = true;\n    off(this.el, this.pendingCssEvent, this.pendingCssCb);\n    this.pendingCssEvent = this.pendingCssCb = null;\n  }\n  if (this.pendingJsCb) {\n    hasPending = true;\n    this.pendingJsCb.cancel();\n    this.pendingJsCb = null;\n  }\n  if (hasPending) {\n    removeClass(this.el, this.enterClass);\n    removeClass(this.el, this.leaveClass);\n  }\n  if (this.cancel) {\n    this.cancel.call(this.vm, this.el);\n    this.cancel = null;\n  }\n};\n\n/**\n * Call a user-provided synchronous hook function.\n *\n * @param {String} type\n */\n\np$1.callHook = function (type) {\n  if (this.hooks && this.hooks[type]) {\n    this.hooks[type].call(this.vm, this.el);\n  }\n};\n\n/**\n * Call a user-provided, potentially-async hook function.\n * We check for the length of arguments to see if the hook\n * expects a `done` callback. If true, the transition's end\n * will be determined by when the user calls that callback;\n * otherwise, the end is determined by the CSS transition or\n * animation.\n *\n * @param {String} type\n */\n\np$1.callHookWithCb = function (type) {\n  var hook = this.hooks && this.hooks[type];\n  if (hook) {\n    if (hook.length > 1) {\n      this.pendingJsCb = cancellable(this[type + 'Done']);\n    }\n    hook.call(this.vm, this.el, this.pendingJsCb);\n  }\n};\n\n/**\n * Get an element's transition type based on the\n * calculated styles.\n *\n * @param {String} className\n * @return {Number}\n */\n\np$1.getCssTransitionType = function (className) {\n  /* istanbul ignore if */\n  if (!transitionEndEvent ||\n  // skip CSS transitions if page is not visible -\n  // this solves the issue of transitionend events not\n  // firing until the page is visible again.\n  // pageVisibility API is supported in IE10+, same as\n  // CSS transitions.\n  document.hidden ||\n  // explicit js-only transition\n  this.hooks && this.hooks.css === false ||\n  // element is hidden\n  isHidden(this.el)) {\n    return;\n  }\n  var type = this.type || this.typeCache[className];\n  if (type) return type;\n  var inlineStyles = this.el.style;\n  var computedStyles = window.getComputedStyle(this.el);\n  var transDuration = inlineStyles[transDurationProp] || computedStyles[transDurationProp];\n  if (transDuration && transDuration !== '0s') {\n    type = TYPE_TRANSITION;\n  } else {\n    var animDuration = inlineStyles[animDurationProp] || computedStyles[animDurationProp];\n    if (animDuration && animDuration !== '0s') {\n      type = TYPE_ANIMATION;\n    }\n  }\n  if (type) {\n    this.typeCache[className] = type;\n  }\n  return type;\n};\n\n/**\n * Setup a CSS transitionend/animationend callback.\n *\n * @param {String} event\n * @param {Function} cb\n */\n\np$1.setupCssCb = function (event, cb) {\n  this.pendingCssEvent = event;\n  var self = this;\n  var el = this.el;\n  var onEnd = this.pendingCssCb = function (e) {\n    if (e.target === el) {\n      off(el, event, onEnd);\n      self.pendingCssEvent = self.pendingCssCb = null;\n      if (!self.pendingJsCb && cb) {\n        cb();\n      }\n    }\n  };\n  on(el, event, onEnd);\n};\n\n/**\n * Check if an element is hidden - in that case we can just\n * skip the transition alltogether.\n *\n * @param {Element} el\n * @return {Boolean}\n */\n\nfunction isHidden(el) {\n  if (/svg$/.test(el.namespaceURI)) {\n    // SVG elements do not have offset(Width|Height)\n    // so we need to check the client rect\n    var rect = el.getBoundingClientRect();\n    return !(rect.width || rect.height);\n  } else {\n    return !(el.offsetWidth || el.offsetHeight || el.getClientRects().length);\n  }\n}\n\nvar transition$1 = {\n\n  priority: TRANSITION,\n\n  update: function update(id, oldId) {\n    var el = this.el;\n    // resolve on owner vm\n    var hooks = resolveAsset(this.vm.$options, 'transitions', id);\n    id = id || 'v';\n    oldId = oldId || 'v';\n    el.__v_trans = new Transition(el, id, hooks, this.vm);\n    removeClass(el, oldId + '-transition');\n    addClass(el, id + '-transition');\n  }\n};\n\nvar internalDirectives = {\n  style: style,\n  'class': vClass,\n  component: component,\n  prop: propDef,\n  transition: transition$1\n};\n\n// special binding prefixes\nvar bindRE = /^v-bind:|^:/;\nvar onRE = /^v-on:|^@/;\nvar dirAttrRE = /^v-([^:]+)(?:$|:(.*)$)/;\nvar modifierRE = /\\.[^\\.]+/g;\nvar transitionRE = /^(v-bind:|:)?transition$/;\n\n// default directive priority\nvar DEFAULT_PRIORITY = 1000;\nvar DEFAULT_TERMINAL_PRIORITY = 2000;\n\n/**\n * Compile a template and return a reusable composite link\n * function, which recursively contains more link functions\n * inside. This top level compile function would normally\n * be called on instance root nodes, but can also be used\n * for partial compilation if the partial argument is true.\n *\n * The returned composite link function, when called, will\n * return an unlink function that tearsdown all directives\n * created during the linking phase.\n *\n * @param {Element|DocumentFragment} el\n * @param {Object} options\n * @param {Boolean} partial\n * @return {Function}\n */\n\nfunction compile(el, options, partial) {\n  // link function for the node itself.\n  var nodeLinkFn = partial || !options._asComponent ? compileNode(el, options) : null;\n  // link function for the childNodes\n  var childLinkFn = !(nodeLinkFn && nodeLinkFn.terminal) && !isScript(el) && el.hasChildNodes() ? compileNodeList(el.childNodes, options) : null;\n\n  /**\n   * A composite linker function to be called on a already\n   * compiled piece of DOM, which instantiates all directive\n   * instances.\n   *\n   * @param {Vue} vm\n   * @param {Element|DocumentFragment} el\n   * @param {Vue} [host] - host vm of transcluded content\n   * @param {Object} [scope] - v-for scope\n   * @param {Fragment} [frag] - link context fragment\n   * @return {Function|undefined}\n   */\n\n  return function compositeLinkFn(vm, el, host, scope, frag) {\n    // cache childNodes before linking parent, fix #657\n    var childNodes = toArray(el.childNodes);\n    // link\n    var dirs = linkAndCapture(function compositeLinkCapturer() {\n      if (nodeLinkFn) nodeLinkFn(vm, el, host, scope, frag);\n      if (childLinkFn) childLinkFn(vm, childNodes, host, scope, frag);\n    }, vm);\n    return makeUnlinkFn(vm, dirs);\n  };\n}\n\n/**\n * Apply a linker to a vm/element pair and capture the\n * directives created during the process.\n *\n * @param {Function} linker\n * @param {Vue} vm\n */\n\nfunction linkAndCapture(linker, vm) {\n  /* istanbul ignore if */\n  if (process.env.NODE_ENV === 'production') {\n    // reset directives before every capture in production\n    // mode, so that when unlinking we don't need to splice\n    // them out (which turns out to be a perf hit).\n    // they are kept in development mode because they are\n    // useful for Vue's own tests.\n    vm._directives = [];\n  }\n  var originalDirCount = vm._directives.length;\n  linker();\n  var dirs = vm._directives.slice(originalDirCount);\n  dirs.sort(directiveComparator);\n  for (var i = 0, l = dirs.length; i < l; i++) {\n    dirs[i]._bind();\n  }\n  return dirs;\n}\n\n/**\n * Directive priority sort comparator\n *\n * @param {Object} a\n * @param {Object} b\n */\n\nfunction directiveComparator(a, b) {\n  a = a.descriptor.def.priority || DEFAULT_PRIORITY;\n  b = b.descriptor.def.priority || DEFAULT_PRIORITY;\n  return a > b ? -1 : a === b ? 0 : 1;\n}\n\n/**\n * Linker functions return an unlink function that\n * tearsdown all directives instances generated during\n * the process.\n *\n * We create unlink functions with only the necessary\n * information to avoid retaining additional closures.\n *\n * @param {Vue} vm\n * @param {Array} dirs\n * @param {Vue} [context]\n * @param {Array} [contextDirs]\n * @return {Function}\n */\n\nfunction makeUnlinkFn(vm, dirs, context, contextDirs) {\n  function unlink(destroying) {\n    teardownDirs(vm, dirs, destroying);\n    if (context && contextDirs) {\n      teardownDirs(context, contextDirs);\n    }\n  }\n  // expose linked directives\n  unlink.dirs = dirs;\n  return unlink;\n}\n\n/**\n * Teardown partial linked directives.\n *\n * @param {Vue} vm\n * @param {Array} dirs\n * @param {Boolean} destroying\n */\n\nfunction teardownDirs(vm, dirs, destroying) {\n  var i = dirs.length;\n  while (i--) {\n    dirs[i]._teardown();\n    if (process.env.NODE_ENV !== 'production' && !destroying) {\n      vm._directives.$remove(dirs[i]);\n    }\n  }\n}\n\n/**\n * Compile link props on an instance.\n *\n * @param {Vue} vm\n * @param {Element} el\n * @param {Object} props\n * @param {Object} [scope]\n * @return {Function}\n */\n\nfunction compileAndLinkProps(vm, el, props, scope) {\n  var propsLinkFn = compileProps(el, props, vm);\n  var propDirs = linkAndCapture(function () {\n    propsLinkFn(vm, scope);\n  }, vm);\n  return makeUnlinkFn(vm, propDirs);\n}\n\n/**\n * Compile the root element of an instance.\n *\n * 1. attrs on context container (context scope)\n * 2. attrs on the component template root node, if\n *    replace:true (child scope)\n *\n * If this is a fragment instance, we only need to compile 1.\n *\n * @param {Element} el\n * @param {Object} options\n * @param {Object} contextOptions\n * @return {Function}\n */\n\nfunction compileRoot(el, options, contextOptions) {\n  var containerAttrs = options._containerAttrs;\n  var replacerAttrs = options._replacerAttrs;\n  var contextLinkFn, replacerLinkFn;\n\n  // only need to compile other attributes for\n  // non-fragment instances\n  if (el.nodeType !== 11) {\n    // for components, container and replacer need to be\n    // compiled separately and linked in different scopes.\n    if (options._asComponent) {\n      // 2. container attributes\n      if (containerAttrs && contextOptions) {\n        contextLinkFn = compileDirectives(containerAttrs, contextOptions);\n      }\n      if (replacerAttrs) {\n        // 3. replacer attributes\n        replacerLinkFn = compileDirectives(replacerAttrs, options);\n      }\n    } else {\n      // non-component, just compile as a normal element.\n      replacerLinkFn = compileDirectives(el.attributes, options);\n    }\n  } else if (process.env.NODE_ENV !== 'production' && containerAttrs) {\n    // warn container directives for fragment instances\n    var names = containerAttrs.filter(function (attr) {\n      // allow vue-loader/vueify scoped css attributes\n      return attr.name.indexOf('_v-') < 0 &&\n      // allow event listeners\n      !onRE.test(attr.name) &&\n      // allow slots\n      attr.name !== 'slot';\n    }).map(function (attr) {\n      return '\"' + attr.name + '\"';\n    });\n    if (names.length) {\n      var plural = names.length > 1;\n      warn('Attribute' + (plural ? 's ' : ' ') + names.join(', ') + (plural ? ' are' : ' is') + ' ignored on component ' + '<' + options.el.tagName.toLowerCase() + '> because ' + 'the component is a fragment instance: ' + 'http://vuejs.org/guide/components.html#Fragment-Instance');\n    }\n  }\n\n  options._containerAttrs = options._replacerAttrs = null;\n  return function rootLinkFn(vm, el, scope) {\n    // link context scope dirs\n    var context = vm._context;\n    var contextDirs;\n    if (context && contextLinkFn) {\n      contextDirs = linkAndCapture(function () {\n        contextLinkFn(context, el, null, scope);\n      }, context);\n    }\n\n    // link self\n    var selfDirs = linkAndCapture(function () {\n      if (replacerLinkFn) replacerLinkFn(vm, el);\n    }, vm);\n\n    // return the unlink function that tearsdown context\n    // container directives.\n    return makeUnlinkFn(vm, selfDirs, context, contextDirs);\n  };\n}\n\n/**\n * Compile a node and return a nodeLinkFn based on the\n * node type.\n *\n * @param {Node} node\n * @param {Object} options\n * @return {Function|null}\n */\n\nfunction compileNode(node, options) {\n  var type = node.nodeType;\n  if (type === 1 && !isScript(node)) {\n    return compileElement(node, options);\n  } else if (type === 3 && node.data.trim()) {\n    return compileTextNode(node, options);\n  } else {\n    return null;\n  }\n}\n\n/**\n * Compile an element and return a nodeLinkFn.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Function|null}\n */\n\nfunction compileElement(el, options) {\n  // preprocess textareas.\n  // textarea treats its text content as the initial value.\n  // just bind it as an attr directive for value.\n  if (el.tagName === 'TEXTAREA') {\n    var tokens = parseText(el.value);\n    if (tokens) {\n      el.setAttribute(':value', tokensToExp(tokens));\n      el.value = '';\n    }\n  }\n  var linkFn;\n  var hasAttrs = el.hasAttributes();\n  var attrs = hasAttrs && toArray(el.attributes);\n  // check terminal directives (for & if)\n  if (hasAttrs) {\n    linkFn = checkTerminalDirectives(el, attrs, options);\n  }\n  // check element directives\n  if (!linkFn) {\n    linkFn = checkElementDirectives(el, options);\n  }\n  // check component\n  if (!linkFn) {\n    linkFn = checkComponent(el, options);\n  }\n  // normal directives\n  if (!linkFn && hasAttrs) {\n    linkFn = compileDirectives(attrs, options);\n  }\n  return linkFn;\n}\n\n/**\n * Compile a textNode and return a nodeLinkFn.\n *\n * @param {TextNode} node\n * @param {Object} options\n * @return {Function|null} textNodeLinkFn\n */\n\nfunction compileTextNode(node, options) {\n  // skip marked text nodes\n  if (node._skip) {\n    return removeText;\n  }\n\n  var tokens = parseText(node.wholeText);\n  if (!tokens) {\n    return null;\n  }\n\n  // mark adjacent text nodes as skipped,\n  // because we are using node.wholeText to compile\n  // all adjacent text nodes together. This fixes\n  // issues in IE where sometimes it splits up a single\n  // text node into multiple ones.\n  var next = node.nextSibling;\n  while (next && next.nodeType === 3) {\n    next._skip = true;\n    next = next.nextSibling;\n  }\n\n  var frag = document.createDocumentFragment();\n  var el, token;\n  for (var i = 0, l = tokens.length; i < l; i++) {\n    token = tokens[i];\n    el = token.tag ? processTextToken(token, options) : document.createTextNode(token.value);\n    frag.appendChild(el);\n  }\n  return makeTextNodeLinkFn(tokens, frag, options);\n}\n\n/**\n * Linker for an skipped text node.\n *\n * @param {Vue} vm\n * @param {Text} node\n */\n\nfunction removeText(vm, node) {\n  remove(node);\n}\n\n/**\n * Process a single text token.\n *\n * @param {Object} token\n * @param {Object} options\n * @return {Node}\n */\n\nfunction processTextToken(token, options) {\n  var el;\n  if (token.oneTime) {\n    el = document.createTextNode(token.value);\n  } else {\n    if (token.html) {\n      el = document.createComment('v-html');\n      setTokenType('html');\n    } else {\n      // IE will clean up empty textNodes during\n      // frag.cloneNode(true), so we have to give it\n      // something here...\n      el = document.createTextNode(' ');\n      setTokenType('text');\n    }\n  }\n  function setTokenType(type) {\n    if (token.descriptor) return;\n    var parsed = parseDirective(token.value);\n    token.descriptor = {\n      name: type,\n      def: directives[type],\n      expression: parsed.expression,\n      filters: parsed.filters\n    };\n  }\n  return el;\n}\n\n/**\n * Build a function that processes a textNode.\n *\n * @param {Array<Object>} tokens\n * @param {DocumentFragment} frag\n */\n\nfunction makeTextNodeLinkFn(tokens, frag) {\n  return function textNodeLinkFn(vm, el, host, scope) {\n    var fragClone = frag.cloneNode(true);\n    var childNodes = toArray(fragClone.childNodes);\n    var token, value, node;\n    for (var i = 0, l = tokens.length; i < l; i++) {\n      token = tokens[i];\n      value = token.value;\n      if (token.tag) {\n        node = childNodes[i];\n        if (token.oneTime) {\n          value = (scope || vm).$eval(value);\n          if (token.html) {\n            replace(node, parseTemplate(value, true));\n          } else {\n            node.data = _toString(value);\n          }\n        } else {\n          vm._bindDir(token.descriptor, node, host, scope);\n        }\n      }\n    }\n    replace(el, fragClone);\n  };\n}\n\n/**\n * Compile a node list and return a childLinkFn.\n *\n * @param {NodeList} nodeList\n * @param {Object} options\n * @return {Function|undefined}\n */\n\nfunction compileNodeList(nodeList, options) {\n  var linkFns = [];\n  var nodeLinkFn, childLinkFn, node;\n  for (var i = 0, l = nodeList.length; i < l; i++) {\n    node = nodeList[i];\n    nodeLinkFn = compileNode(node, options);\n    childLinkFn = !(nodeLinkFn && nodeLinkFn.terminal) && node.tagName !== 'SCRIPT' && node.hasChildNodes() ? compileNodeList(node.childNodes, options) : null;\n    linkFns.push(nodeLinkFn, childLinkFn);\n  }\n  return linkFns.length ? makeChildLinkFn(linkFns) : null;\n}\n\n/**\n * Make a child link function for a node's childNodes.\n *\n * @param {Array<Function>} linkFns\n * @return {Function} childLinkFn\n */\n\nfunction makeChildLinkFn(linkFns) {\n  return function childLinkFn(vm, nodes, host, scope, frag) {\n    var node, nodeLinkFn, childrenLinkFn;\n    for (var i = 0, n = 0, l = linkFns.length; i < l; n++) {\n      node = nodes[n];\n      nodeLinkFn = linkFns[i++];\n      childrenLinkFn = linkFns[i++];\n      // cache childNodes before linking parent, fix #657\n      var childNodes = toArray(node.childNodes);\n      if (nodeLinkFn) {\n        nodeLinkFn(vm, node, host, scope, frag);\n      }\n      if (childrenLinkFn) {\n        childrenLinkFn(vm, childNodes, host, scope, frag);\n      }\n    }\n  };\n}\n\n/**\n * Check for element directives (custom elements that should\n * be resovled as terminal directives).\n *\n * @param {Element} el\n * @param {Object} options\n */\n\nfunction checkElementDirectives(el, options) {\n  var tag = el.tagName.toLowerCase();\n  if (commonTagRE.test(tag)) {\n    return;\n  }\n  var def = resolveAsset(options, 'elementDirectives', tag);\n  if (def) {\n    return makeTerminalNodeLinkFn(el, tag, '', options, def);\n  }\n}\n\n/**\n * Check if an element is a component. If yes, return\n * a component link function.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Function|undefined}\n */\n\nfunction checkComponent(el, options) {\n  var component = checkComponentAttr(el, options);\n  if (component) {\n    var ref = findRef(el);\n    var descriptor = {\n      name: 'component',\n      ref: ref,\n      expression: component.id,\n      def: internalDirectives.component,\n      modifiers: {\n        literal: !component.dynamic\n      }\n    };\n    var componentLinkFn = function componentLinkFn(vm, el, host, scope, frag) {\n      if (ref) {\n        defineReactive((scope || vm).$refs, ref, null);\n      }\n      vm._bindDir(descriptor, el, host, scope, frag);\n    };\n    componentLinkFn.terminal = true;\n    return componentLinkFn;\n  }\n}\n\n/**\n * Check an element for terminal directives in fixed order.\n * If it finds one, return a terminal link function.\n *\n * @param {Element} el\n * @param {Array} attrs\n * @param {Object} options\n * @return {Function} terminalLinkFn\n */\n\nfunction checkTerminalDirectives(el, attrs, options) {\n  // skip v-pre\n  if (getAttr(el, 'v-pre') !== null) {\n    return skip;\n  }\n  // skip v-else block, but only if following v-if\n  if (el.hasAttribute('v-else')) {\n    var prev = el.previousElementSibling;\n    if (prev && prev.hasAttribute('v-if')) {\n      return skip;\n    }\n  }\n\n  var attr, name, value, modifiers, matched, dirName, rawName, arg, def, termDef;\n  for (var i = 0, j = attrs.length; i < j; i++) {\n    attr = attrs[i];\n    name = attr.name.replace(modifierRE, '');\n    if (matched = name.match(dirAttrRE)) {\n      def = resolveAsset(options, 'directives', matched[1]);\n      if (def && def.terminal) {\n        if (!termDef || (def.priority || DEFAULT_TERMINAL_PRIORITY) > termDef.priority) {\n          termDef = def;\n          rawName = attr.name;\n          modifiers = parseModifiers(attr.name);\n          value = attr.value;\n          dirName = matched[1];\n          arg = matched[2];\n        }\n      }\n    }\n  }\n\n  if (termDef) {\n    return makeTerminalNodeLinkFn(el, dirName, value, options, termDef, rawName, arg, modifiers);\n  }\n}\n\nfunction skip() {}\nskip.terminal = true;\n\n/**\n * Build a node link function for a terminal directive.\n * A terminal link function terminates the current\n * compilation recursion and handles compilation of the\n * subtree in the directive.\n *\n * @param {Element} el\n * @param {String} dirName\n * @param {String} value\n * @param {Object} options\n * @param {Object} def\n * @param {String} [rawName]\n * @param {String} [arg]\n * @param {Object} [modifiers]\n * @return {Function} terminalLinkFn\n */\n\nfunction makeTerminalNodeLinkFn(el, dirName, value, options, def, rawName, arg, modifiers) {\n  var parsed = parseDirective(value);\n  var descriptor = {\n    name: dirName,\n    arg: arg,\n    expression: parsed.expression,\n    filters: parsed.filters,\n    raw: value,\n    attr: rawName,\n    modifiers: modifiers,\n    def: def\n  };\n  // check ref for v-for and router-view\n  if (dirName === 'for' || dirName === 'router-view') {\n    descriptor.ref = findRef(el);\n  }\n  var fn = function terminalNodeLinkFn(vm, el, host, scope, frag) {\n    if (descriptor.ref) {\n      defineReactive((scope || vm).$refs, descriptor.ref, null);\n    }\n    vm._bindDir(descriptor, el, host, scope, frag);\n  };\n  fn.terminal = true;\n  return fn;\n}\n\n/**\n * Compile the directives on an element and return a linker.\n *\n * @param {Array|NamedNodeMap} attrs\n * @param {Object} options\n * @return {Function}\n */\n\nfunction compileDirectives(attrs, options) {\n  var i = attrs.length;\n  var dirs = [];\n  var attr, name, value, rawName, rawValue, dirName, arg, modifiers, dirDef, tokens, matched;\n  while (i--) {\n    attr = attrs[i];\n    name = rawName = attr.name;\n    value = rawValue = attr.value;\n    tokens = parseText(value);\n    // reset arg\n    arg = null;\n    // check modifiers\n    modifiers = parseModifiers(name);\n    name = name.replace(modifierRE, '');\n\n    // attribute interpolations\n    if (tokens) {\n      value = tokensToExp(tokens);\n      arg = name;\n      pushDir('bind', directives.bind, tokens);\n      // warn against mixing mustaches with v-bind\n      if (process.env.NODE_ENV !== 'production') {\n        if (name === 'class' && Array.prototype.some.call(attrs, function (attr) {\n          return attr.name === ':class' || attr.name === 'v-bind:class';\n        })) {\n          warn('class=\"' + rawValue + '\": Do not mix mustache interpolation ' + 'and v-bind for \"class\" on the same element. Use one or the other.', options);\n        }\n      }\n    } else\n\n      // special attribute: transition\n      if (transitionRE.test(name)) {\n        modifiers.literal = !bindRE.test(name);\n        pushDir('transition', internalDirectives.transition);\n      } else\n\n        // event handlers\n        if (onRE.test(name)) {\n          arg = name.replace(onRE, '');\n          pushDir('on', directives.on);\n        } else\n\n          // attribute bindings\n          if (bindRE.test(name)) {\n            dirName = name.replace(bindRE, '');\n            if (dirName === 'style' || dirName === 'class') {\n              pushDir(dirName, internalDirectives[dirName]);\n            } else {\n              arg = dirName;\n              pushDir('bind', directives.bind);\n            }\n          } else\n\n            // normal directives\n            if (matched = name.match(dirAttrRE)) {\n              dirName = matched[1];\n              arg = matched[2];\n\n              // skip v-else (when used with v-show)\n              if (dirName === 'else') {\n                continue;\n              }\n\n              dirDef = resolveAsset(options, 'directives', dirName, true);\n              if (dirDef) {\n                pushDir(dirName, dirDef);\n              }\n            }\n  }\n\n  /**\n   * Push a directive.\n   *\n   * @param {String} dirName\n   * @param {Object|Function} def\n   * @param {Array} [interpTokens]\n   */\n\n  function pushDir(dirName, def, interpTokens) {\n    var hasOneTimeToken = interpTokens && hasOneTime(interpTokens);\n    var parsed = !hasOneTimeToken && parseDirective(value);\n    dirs.push({\n      name: dirName,\n      attr: rawName,\n      raw: rawValue,\n      def: def,\n      arg: arg,\n      modifiers: modifiers,\n      // conversion from interpolation strings with one-time token\n      // to expression is differed until directive bind time so that we\n      // have access to the actual vm context for one-time bindings.\n      expression: parsed && parsed.expression,\n      filters: parsed && parsed.filters,\n      interp: interpTokens,\n      hasOneTime: hasOneTimeToken\n    });\n  }\n\n  if (dirs.length) {\n    return makeNodeLinkFn(dirs);\n  }\n}\n\n/**\n * Parse modifiers from directive attribute name.\n *\n * @param {String} name\n * @return {Object}\n */\n\nfunction parseModifiers(name) {\n  var res = Object.create(null);\n  var match = name.match(modifierRE);\n  if (match) {\n    var i = match.length;\n    while (i--) {\n      res[match[i].slice(1)] = true;\n    }\n  }\n  return res;\n}\n\n/**\n * Build a link function for all directives on a single node.\n *\n * @param {Array} directives\n * @return {Function} directivesLinkFn\n */\n\nfunction makeNodeLinkFn(directives) {\n  return function nodeLinkFn(vm, el, host, scope, frag) {\n    // reverse apply because it's sorted low to high\n    var i = directives.length;\n    while (i--) {\n      vm._bindDir(directives[i], el, host, scope, frag);\n    }\n  };\n}\n\n/**\n * Check if an interpolation string contains one-time tokens.\n *\n * @param {Array} tokens\n * @return {Boolean}\n */\n\nfunction hasOneTime(tokens) {\n  var i = tokens.length;\n  while (i--) {\n    if (tokens[i].oneTime) return true;\n  }\n}\n\nfunction isScript(el) {\n  return el.tagName === 'SCRIPT' && (!el.hasAttribute('type') || el.getAttribute('type') === 'text/javascript');\n}\n\nvar specialCharRE = /[^\\w\\-:\\.]/;\n\n/**\n * Process an element or a DocumentFragment based on a\n * instance option object. This allows us to transclude\n * a template node/fragment before the instance is created,\n * so the processed fragment can then be cloned and reused\n * in v-for.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Element|DocumentFragment}\n */\n\nfunction transclude(el, options) {\n  // extract container attributes to pass them down\n  // to compiler, because they need to be compiled in\n  // parent scope. we are mutating the options object here\n  // assuming the same object will be used for compile\n  // right after this.\n  if (options) {\n    options._containerAttrs = extractAttrs(el);\n  }\n  // for template tags, what we want is its content as\n  // a documentFragment (for fragment instances)\n  if (isTemplate(el)) {\n    el = parseTemplate(el);\n  }\n  if (options) {\n    if (options._asComponent && !options.template) {\n      options.template = '<slot></slot>';\n    }\n    if (options.template) {\n      options._content = extractContent(el);\n      el = transcludeTemplate(el, options);\n    }\n  }\n  if (isFragment(el)) {\n    // anchors for fragment instance\n    // passing in `persist: true` to avoid them being\n    // discarded by IE during template cloning\n    prepend(createAnchor('v-start', true), el);\n    el.appendChild(createAnchor('v-end', true));\n  }\n  return el;\n}\n\n/**\n * Process the template option.\n * If the replace option is true this will swap the $el.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Element|DocumentFragment}\n */\n\nfunction transcludeTemplate(el, options) {\n  var template = options.template;\n  var frag = parseTemplate(template, true);\n  if (frag) {\n    var replacer = frag.firstChild;\n    var tag = replacer.tagName && replacer.tagName.toLowerCase();\n    if (options.replace) {\n      /* istanbul ignore if */\n      if (el === document.body) {\n        process.env.NODE_ENV !== 'production' && warn('You are mounting an instance with a template to ' + '<body>. This will replace <body> entirely. You ' + 'should probably use `replace: false` here.');\n      }\n      // there are many cases where the instance must\n      // become a fragment instance: basically anything that\n      // can create more than 1 root nodes.\n      if (\n      // multi-children template\n      frag.childNodes.length > 1 ||\n      // non-element template\n      replacer.nodeType !== 1 ||\n      // single nested component\n      tag === 'component' || resolveAsset(options, 'components', tag) || hasBindAttr(replacer, 'is') ||\n      // element directive\n      resolveAsset(options, 'elementDirectives', tag) ||\n      // for block\n      replacer.hasAttribute('v-for') ||\n      // if block\n      replacer.hasAttribute('v-if')) {\n        return frag;\n      } else {\n        options._replacerAttrs = extractAttrs(replacer);\n        mergeAttrs(el, replacer);\n        return replacer;\n      }\n    } else {\n      el.appendChild(frag);\n      return el;\n    }\n  } else {\n    process.env.NODE_ENV !== 'production' && warn('Invalid template option: ' + template);\n  }\n}\n\n/**\n * Helper to extract a component container's attributes\n * into a plain object array.\n *\n * @param {Element} el\n * @return {Array}\n */\n\nfunction extractAttrs(el) {\n  if (el.nodeType === 1 && el.hasAttributes()) {\n    return toArray(el.attributes);\n  }\n}\n\n/**\n * Merge the attributes of two elements, and make sure\n * the class names are merged properly.\n *\n * @param {Element} from\n * @param {Element} to\n */\n\nfunction mergeAttrs(from, to) {\n  var attrs = from.attributes;\n  var i = attrs.length;\n  var name, value;\n  while (i--) {\n    name = attrs[i].name;\n    value = attrs[i].value;\n    if (!to.hasAttribute(name) && !specialCharRE.test(name)) {\n      to.setAttribute(name, value);\n    } else if (name === 'class' && !parseText(value) && (value = value.trim())) {\n      value.split(/\\s+/).forEach(function (cls) {\n        addClass(to, cls);\n      });\n    }\n  }\n}\n\n/**\n * Scan and determine slot content distribution.\n * We do this during transclusion instead at compile time so that\n * the distribution is decoupled from the compilation order of\n * the slots.\n *\n * @param {Element|DocumentFragment} template\n * @param {Element} content\n * @param {Vue} vm\n */\n\nfunction resolveSlots(vm, content) {\n  if (!content) {\n    return;\n  }\n  var contents = vm._slotContents = Object.create(null);\n  var el, name;\n  for (var i = 0, l = content.children.length; i < l; i++) {\n    el = content.children[i];\n    /* eslint-disable no-cond-assign */\n    if (name = el.getAttribute('slot')) {\n      (contents[name] || (contents[name] = [])).push(el);\n    }\n    /* eslint-enable no-cond-assign */\n    if (process.env.NODE_ENV !== 'production' && getBindAttr(el, 'slot')) {\n      warn('The \"slot\" attribute must be static.', vm.$parent);\n    }\n  }\n  for (name in contents) {\n    contents[name] = extractFragment(contents[name], content);\n  }\n  if (content.hasChildNodes()) {\n    var nodes = content.childNodes;\n    if (nodes.length === 1 && nodes[0].nodeType === 3 && !nodes[0].data.trim()) {\n      return;\n    }\n    contents['default'] = extractFragment(content.childNodes, content);\n  }\n}\n\n/**\n * Extract qualified content nodes from a node list.\n *\n * @param {NodeList} nodes\n * @return {DocumentFragment}\n */\n\nfunction extractFragment(nodes, parent) {\n  var frag = document.createDocumentFragment();\n  nodes = toArray(nodes);\n  for (var i = 0, l = nodes.length; i < l; i++) {\n    var node = nodes[i];\n    if (isTemplate(node) && !node.hasAttribute('v-if') && !node.hasAttribute('v-for')) {\n      parent.removeChild(node);\n      node = parseTemplate(node, true);\n    }\n    frag.appendChild(node);\n  }\n  return frag;\n}\n\n\n\nvar compiler = Object.freeze({\n\tcompile: compile,\n\tcompileAndLinkProps: compileAndLinkProps,\n\tcompileRoot: compileRoot,\n\ttransclude: transclude,\n\tresolveSlots: resolveSlots\n});\n\nfunction stateMixin (Vue) {\n  /**\n   * Accessor for `$data` property, since setting $data\n   * requires observing the new object and updating\n   * proxied properties.\n   */\n\n  Object.defineProperty(Vue.prototype, '$data', {\n    get: function get() {\n      return this._data;\n    },\n    set: function set(newData) {\n      if (newData !== this._data) {\n        this._setData(newData);\n      }\n    }\n  });\n\n  /**\n   * Setup the scope of an instance, which contains:\n   * - observed data\n   * - computed properties\n   * - user methods\n   * - meta properties\n   */\n\n  Vue.prototype._initState = function () {\n    this._initProps();\n    this._initMeta();\n    this._initMethods();\n    this._initData();\n    this._initComputed();\n  };\n\n  /**\n   * Initialize props.\n   */\n\n  Vue.prototype._initProps = function () {\n    var options = this.$options;\n    var el = options.el;\n    var props = options.props;\n    if (props && !el) {\n      process.env.NODE_ENV !== 'production' && warn('Props will not be compiled if no `el` option is ' + 'provided at instantiation.', this);\n    }\n    // make sure to convert string selectors into element now\n    el = options.el = query(el);\n    this._propsUnlinkFn = el && el.nodeType === 1 && props\n    // props must be linked in proper scope if inside v-for\n    ? compileAndLinkProps(this, el, props, this._scope) : null;\n  };\n\n  /**\n   * Initialize the data.\n   */\n\n  Vue.prototype._initData = function () {\n    var dataFn = this.$options.data;\n    var data = this._data = dataFn ? dataFn() : {};\n    if (!isPlainObject(data)) {\n      data = {};\n      process.env.NODE_ENV !== 'production' && warn('data functions should return an object.', this);\n    }\n    var props = this._props;\n    // proxy data on instance\n    var keys = Object.keys(data);\n    var i, key;\n    i = keys.length;\n    while (i--) {\n      key = keys[i];\n      // there are two scenarios where we can proxy a data key:\n      // 1. it's not already defined as a prop\n      // 2. it's provided via a instantiation option AND there are no\n      //    template prop present\n      if (!props || !hasOwn(props, key)) {\n        this._proxy(key);\n      } else if (process.env.NODE_ENV !== 'production') {\n        warn('Data field \"' + key + '\" is already defined ' + 'as a prop. To provide default value for a prop, use the \"default\" ' + 'prop option; if you want to pass prop values to an instantiation ' + 'call, use the \"propsData\" option.', this);\n      }\n    }\n    // observe data\n    observe(data, this);\n  };\n\n  /**\n   * Swap the instance's $data. Called in $data's setter.\n   *\n   * @param {Object} newData\n   */\n\n  Vue.prototype._setData = function (newData) {\n    newData = newData || {};\n    var oldData = this._data;\n    this._data = newData;\n    var keys, key, i;\n    // unproxy keys not present in new data\n    keys = Object.keys(oldData);\n    i = keys.length;\n    while (i--) {\n      key = keys[i];\n      if (!(key in newData)) {\n        this._unproxy(key);\n      }\n    }\n    // proxy keys not already proxied,\n    // and trigger change for changed values\n    keys = Object.keys(newData);\n    i = keys.length;\n    while (i--) {\n      key = keys[i];\n      if (!hasOwn(this, key)) {\n        // new property\n        this._proxy(key);\n      }\n    }\n    oldData.__ob__.removeVm(this);\n    observe(newData, this);\n    this._digest();\n  };\n\n  /**\n   * Proxy a property, so that\n   * vm.prop === vm._data.prop\n   *\n   * @param {String} key\n   */\n\n  Vue.prototype._proxy = function (key) {\n    if (!isReserved(key)) {\n      // need to store ref to self here\n      // because these getter/setters might\n      // be called by child scopes via\n      // prototype inheritance.\n      var self = this;\n      Object.defineProperty(self, key, {\n        configurable: true,\n        enumerable: true,\n        get: function proxyGetter() {\n          return self._data[key];\n        },\n        set: function proxySetter(val) {\n          self._data[key] = val;\n        }\n      });\n    }\n  };\n\n  /**\n   * Unproxy a property.\n   *\n   * @param {String} key\n   */\n\n  Vue.prototype._unproxy = function (key) {\n    if (!isReserved(key)) {\n      delete this[key];\n    }\n  };\n\n  /**\n   * Force update on every watcher in scope.\n   */\n\n  Vue.prototype._digest = function () {\n    for (var i = 0, l = this._watchers.length; i < l; i++) {\n      this._watchers[i].update(true); // shallow updates\n    }\n  };\n\n  /**\n   * Setup computed properties. They are essentially\n   * special getter/setters\n   */\n\n  function noop() {}\n  Vue.prototype._initComputed = function () {\n    var computed = this.$options.computed;\n    if (computed) {\n      for (var key in computed) {\n        var userDef = computed[key];\n        var def = {\n          enumerable: true,\n          configurable: true\n        };\n        if (typeof userDef === 'function') {\n          def.get = makeComputedGetter(userDef, this);\n          def.set = noop;\n        } else {\n          def.get = userDef.get ? userDef.cache !== false ? makeComputedGetter(userDef.get, this) : bind(userDef.get, this) : noop;\n          def.set = userDef.set ? bind(userDef.set, this) : noop;\n        }\n        Object.defineProperty(this, key, def);\n      }\n    }\n  };\n\n  function makeComputedGetter(getter, owner) {\n    var watcher = new Watcher(owner, getter, null, {\n      lazy: true\n    });\n    return function computedGetter() {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value;\n    };\n  }\n\n  /**\n   * Setup instance methods. Methods must be bound to the\n   * instance since they might be passed down as a prop to\n   * child components.\n   */\n\n  Vue.prototype._initMethods = function () {\n    var methods = this.$options.methods;\n    if (methods) {\n      for (var key in methods) {\n        this[key] = bind(methods[key], this);\n      }\n    }\n  };\n\n  /**\n   * Initialize meta information like $index, $key & $value.\n   */\n\n  Vue.prototype._initMeta = function () {\n    var metas = this.$options._meta;\n    if (metas) {\n      for (var key in metas) {\n        defineReactive(this, key, metas[key]);\n      }\n    }\n  };\n}\n\nvar eventRE = /^v-on:|^@/;\n\nfunction eventsMixin (Vue) {\n  /**\n   * Setup the instance's option events & watchers.\n   * If the value is a string, we pull it from the\n   * instance's methods by name.\n   */\n\n  Vue.prototype._initEvents = function () {\n    var options = this.$options;\n    if (options._asComponent) {\n      registerComponentEvents(this, options.el);\n    }\n    registerCallbacks(this, '$on', options.events);\n    registerCallbacks(this, '$watch', options.watch);\n  };\n\n  /**\n   * Register v-on events on a child component\n   *\n   * @param {Vue} vm\n   * @param {Element} el\n   */\n\n  function registerComponentEvents(vm, el) {\n    var attrs = el.attributes;\n    var name, value, handler;\n    for (var i = 0, l = attrs.length; i < l; i++) {\n      name = attrs[i].name;\n      if (eventRE.test(name)) {\n        name = name.replace(eventRE, '');\n        // force the expression into a statement so that\n        // it always dynamically resolves the method to call (#2670)\n        // kinda ugly hack, but does the job.\n        value = attrs[i].value;\n        if (isSimplePath(value)) {\n          value += '.apply(this, $arguments)';\n        }\n        handler = (vm._scope || vm._context).$eval(value, true);\n        handler._fromParent = true;\n        vm.$on(name.replace(eventRE), handler);\n      }\n    }\n  }\n\n  /**\n   * Register callbacks for option events and watchers.\n   *\n   * @param {Vue} vm\n   * @param {String} action\n   * @param {Object} hash\n   */\n\n  function registerCallbacks(vm, action, hash) {\n    if (!hash) return;\n    var handlers, key, i, j;\n    for (key in hash) {\n      handlers = hash[key];\n      if (isArray(handlers)) {\n        for (i = 0, j = handlers.length; i < j; i++) {\n          register(vm, action, key, handlers[i]);\n        }\n      } else {\n        register(vm, action, key, handlers);\n      }\n    }\n  }\n\n  /**\n   * Helper to register an event/watch callback.\n   *\n   * @param {Vue} vm\n   * @param {String} action\n   * @param {String} key\n   * @param {Function|String|Object} handler\n   * @param {Object} [options]\n   */\n\n  function register(vm, action, key, handler, options) {\n    var type = typeof handler;\n    if (type === 'function') {\n      vm[action](key, handler, options);\n    } else if (type === 'string') {\n      var methods = vm.$options.methods;\n      var method = methods && methods[handler];\n      if (method) {\n        vm[action](key, method, options);\n      } else {\n        process.env.NODE_ENV !== 'production' && warn('Unknown method: \"' + handler + '\" when ' + 'registering callback for ' + action + ': \"' + key + '\".', vm);\n      }\n    } else if (handler && type === 'object') {\n      register(vm, action, key, handler.handler, handler);\n    }\n  }\n\n  /**\n   * Setup recursive attached/detached calls\n   */\n\n  Vue.prototype._initDOMHooks = function () {\n    this.$on('hook:attached', onAttached);\n    this.$on('hook:detached', onDetached);\n  };\n\n  /**\n   * Callback to recursively call attached hook on children\n   */\n\n  function onAttached() {\n    if (!this._isAttached) {\n      this._isAttached = true;\n      this.$children.forEach(callAttach);\n    }\n  }\n\n  /**\n   * Iterator to call attached hook\n   *\n   * @param {Vue} child\n   */\n\n  function callAttach(child) {\n    if (!child._isAttached && inDoc(child.$el)) {\n      child._callHook('attached');\n    }\n  }\n\n  /**\n   * Callback to recursively call detached hook on children\n   */\n\n  function onDetached() {\n    if (this._isAttached) {\n      this._isAttached = false;\n      this.$children.forEach(callDetach);\n    }\n  }\n\n  /**\n   * Iterator to call detached hook\n   *\n   * @param {Vue} child\n   */\n\n  function callDetach(child) {\n    if (child._isAttached && !inDoc(child.$el)) {\n      child._callHook('detached');\n    }\n  }\n\n  /**\n   * Trigger all handlers for a hook\n   *\n   * @param {String} hook\n   */\n\n  Vue.prototype._callHook = function (hook) {\n    this.$emit('pre-hook:' + hook);\n    var handlers = this.$options[hook];\n    if (handlers) {\n      for (var i = 0, j = handlers.length; i < j; i++) {\n        handlers[i].call(this);\n      }\n    }\n    this.$emit('hook:' + hook);\n  };\n}\n\nfunction noop$1() {}\n\n/**\n * A directive links a DOM element with a piece of data,\n * which is the result of evaluating an expression.\n * It registers a watcher with the expression and calls\n * the DOM update function when a change is triggered.\n *\n * @param {Object} descriptor\n *                 - {String} name\n *                 - {Object} def\n *                 - {String} expression\n *                 - {Array<Object>} [filters]\n *                 - {Object} [modifiers]\n *                 - {Boolean} literal\n *                 - {String} attr\n *                 - {String} arg\n *                 - {String} raw\n *                 - {String} [ref]\n *                 - {Array<Object>} [interp]\n *                 - {Boolean} [hasOneTime]\n * @param {Vue} vm\n * @param {Node} el\n * @param {Vue} [host] - transclusion host component\n * @param {Object} [scope] - v-for scope\n * @param {Fragment} [frag] - owner fragment\n * @constructor\n */\nfunction Directive(descriptor, vm, el, host, scope, frag) {\n  this.vm = vm;\n  this.el = el;\n  // copy descriptor properties\n  this.descriptor = descriptor;\n  this.name = descriptor.name;\n  this.expression = descriptor.expression;\n  this.arg = descriptor.arg;\n  this.modifiers = descriptor.modifiers;\n  this.filters = descriptor.filters;\n  this.literal = this.modifiers && this.modifiers.literal;\n  // private\n  this._locked = false;\n  this._bound = false;\n  this._listeners = null;\n  // link context\n  this._host = host;\n  this._scope = scope;\n  this._frag = frag;\n  // store directives on node in dev mode\n  if (process.env.NODE_ENV !== 'production' && this.el) {\n    this.el._vue_directives = this.el._vue_directives || [];\n    this.el._vue_directives.push(this);\n  }\n}\n\n/**\n * Initialize the directive, mixin definition properties,\n * setup the watcher, call definition bind() and update()\n * if present.\n */\n\nDirective.prototype._bind = function () {\n  var name = this.name;\n  var descriptor = this.descriptor;\n\n  // remove attribute\n  if ((name !== 'cloak' || this.vm._isCompiled) && this.el && this.el.removeAttribute) {\n    var attr = descriptor.attr || 'v-' + name;\n    this.el.removeAttribute(attr);\n  }\n\n  // copy def properties\n  var def = descriptor.def;\n  if (typeof def === 'function') {\n    this.update = def;\n  } else {\n    extend(this, def);\n  }\n\n  // setup directive params\n  this._setupParams();\n\n  // initial bind\n  if (this.bind) {\n    this.bind();\n  }\n  this._bound = true;\n\n  if (this.literal) {\n    this.update && this.update(descriptor.raw);\n  } else if ((this.expression || this.modifiers) && (this.update || this.twoWay) && !this._checkStatement()) {\n    // wrapped updater for context\n    var dir = this;\n    if (this.update) {\n      this._update = function (val, oldVal) {\n        if (!dir._locked) {\n          dir.update(val, oldVal);\n        }\n      };\n    } else {\n      this._update = noop$1;\n    }\n    var preProcess = this._preProcess ? bind(this._preProcess, this) : null;\n    var postProcess = this._postProcess ? bind(this._postProcess, this) : null;\n    var watcher = this._watcher = new Watcher(this.vm, this.expression, this._update, // callback\n    {\n      filters: this.filters,\n      twoWay: this.twoWay,\n      deep: this.deep,\n      preProcess: preProcess,\n      postProcess: postProcess,\n      scope: this._scope\n    });\n    // v-model with inital inline value need to sync back to\n    // model instead of update to DOM on init. They would\n    // set the afterBind hook to indicate that.\n    if (this.afterBind) {\n      this.afterBind();\n    } else if (this.update) {\n      this.update(watcher.value);\n    }\n  }\n};\n\n/**\n * Setup all param attributes, e.g. track-by,\n * transition-mode, etc...\n */\n\nDirective.prototype._setupParams = function () {\n  if (!this.params) {\n    return;\n  }\n  var params = this.params;\n  // swap the params array with a fresh object.\n  this.params = Object.create(null);\n  var i = params.length;\n  var key, val, mappedKey;\n  while (i--) {\n    key = hyphenate(params[i]);\n    mappedKey = camelize(key);\n    val = getBindAttr(this.el, key);\n    if (val != null) {\n      // dynamic\n      this._setupParamWatcher(mappedKey, val);\n    } else {\n      // static\n      val = getAttr(this.el, key);\n      if (val != null) {\n        this.params[mappedKey] = val === '' ? true : val;\n      }\n    }\n  }\n};\n\n/**\n * Setup a watcher for a dynamic param.\n *\n * @param {String} key\n * @param {String} expression\n */\n\nDirective.prototype._setupParamWatcher = function (key, expression) {\n  var self = this;\n  var called = false;\n  var unwatch = (this._scope || this.vm).$watch(expression, function (val, oldVal) {\n    self.params[key] = val;\n    // since we are in immediate mode,\n    // only call the param change callbacks if this is not the first update.\n    if (called) {\n      var cb = self.paramWatchers && self.paramWatchers[key];\n      if (cb) {\n        cb.call(self, val, oldVal);\n      }\n    } else {\n      called = true;\n    }\n  }, {\n    immediate: true,\n    user: false\n  });(this._paramUnwatchFns || (this._paramUnwatchFns = [])).push(unwatch);\n};\n\n/**\n * Check if the directive is a function caller\n * and if the expression is a callable one. If both true,\n * we wrap up the expression and use it as the event\n * handler.\n *\n * e.g. on-click=\"a++\"\n *\n * @return {Boolean}\n */\n\nDirective.prototype._checkStatement = function () {\n  var expression = this.expression;\n  if (expression && this.acceptStatement && !isSimplePath(expression)) {\n    var fn = parseExpression(expression).get;\n    var scope = this._scope || this.vm;\n    var handler = function handler(e) {\n      scope.$event = e;\n      fn.call(scope, scope);\n      scope.$event = null;\n    };\n    if (this.filters) {\n      handler = scope._applyFilters(handler, null, this.filters);\n    }\n    this.update(handler);\n    return true;\n  }\n};\n\n/**\n * Set the corresponding value with the setter.\n * This should only be used in two-way directives\n * e.g. v-model.\n *\n * @param {*} value\n * @public\n */\n\nDirective.prototype.set = function (value) {\n  /* istanbul ignore else */\n  if (this.twoWay) {\n    this._withLock(function () {\n      this._watcher.set(value);\n    });\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn('Directive.set() can only be used inside twoWay' + 'directives.');\n  }\n};\n\n/**\n * Execute a function while preventing that function from\n * triggering updates on this directive instance.\n *\n * @param {Function} fn\n */\n\nDirective.prototype._withLock = function (fn) {\n  var self = this;\n  self._locked = true;\n  fn.call(self);\n  nextTick(function () {\n    self._locked = false;\n  });\n};\n\n/**\n * Convenience method that attaches a DOM event listener\n * to the directive element and autometically tears it down\n * during unbind.\n *\n * @param {String} event\n * @param {Function} handler\n * @param {Boolean} [useCapture]\n */\n\nDirective.prototype.on = function (event, handler, useCapture) {\n  on(this.el, event, handler, useCapture);(this._listeners || (this._listeners = [])).push([event, handler]);\n};\n\n/**\n * Teardown the watcher and call unbind.\n */\n\nDirective.prototype._teardown = function () {\n  if (this._bound) {\n    this._bound = false;\n    if (this.unbind) {\n      this.unbind();\n    }\n    if (this._watcher) {\n      this._watcher.teardown();\n    }\n    var listeners = this._listeners;\n    var i;\n    if (listeners) {\n      i = listeners.length;\n      while (i--) {\n        off(this.el, listeners[i][0], listeners[i][1]);\n      }\n    }\n    var unwatchFns = this._paramUnwatchFns;\n    if (unwatchFns) {\n      i = unwatchFns.length;\n      while (i--) {\n        unwatchFns[i]();\n      }\n    }\n    if (process.env.NODE_ENV !== 'production' && this.el) {\n      this.el._vue_directives.$remove(this);\n    }\n    this.vm = this.el = this._watcher = this._listeners = null;\n  }\n};\n\nfunction lifecycleMixin (Vue) {\n  /**\n   * Update v-ref for component.\n   *\n   * @param {Boolean} remove\n   */\n\n  Vue.prototype._updateRef = function (remove) {\n    var ref = this.$options._ref;\n    if (ref) {\n      var refs = (this._scope || this._context).$refs;\n      if (remove) {\n        if (refs[ref] === this) {\n          refs[ref] = null;\n        }\n      } else {\n        refs[ref] = this;\n      }\n    }\n  };\n\n  /**\n   * Transclude, compile and link element.\n   *\n   * If a pre-compiled linker is available, that means the\n   * passed in element will be pre-transcluded and compiled\n   * as well - all we need to do is to call the linker.\n   *\n   * Otherwise we need to call transclude/compile/link here.\n   *\n   * @param {Element} el\n   */\n\n  Vue.prototype._compile = function (el) {\n    var options = this.$options;\n\n    // transclude and init element\n    // transclude can potentially replace original\n    // so we need to keep reference; this step also injects\n    // the template and caches the original attributes\n    // on the container node and replacer node.\n    var original = el;\n    el = transclude(el, options);\n    this._initElement(el);\n\n    // handle v-pre on root node (#2026)\n    if (el.nodeType === 1 && getAttr(el, 'v-pre') !== null) {\n      return;\n    }\n\n    // root is always compiled per-instance, because\n    // container attrs and props can be different every time.\n    var contextOptions = this._context && this._context.$options;\n    var rootLinker = compileRoot(el, options, contextOptions);\n\n    // resolve slot distribution\n    resolveSlots(this, options._content);\n\n    // compile and link the rest\n    var contentLinkFn;\n    var ctor = this.constructor;\n    // component compilation can be cached\n    // as long as it's not using inline-template\n    if (options._linkerCachable) {\n      contentLinkFn = ctor.linker;\n      if (!contentLinkFn) {\n        contentLinkFn = ctor.linker = compile(el, options);\n      }\n    }\n\n    // link phase\n    // make sure to link root with prop scope!\n    var rootUnlinkFn = rootLinker(this, el, this._scope);\n    var contentUnlinkFn = contentLinkFn ? contentLinkFn(this, el) : compile(el, options)(this, el);\n\n    // register composite unlink function\n    // to be called during instance destruction\n    this._unlinkFn = function () {\n      rootUnlinkFn();\n      // passing destroying: true to avoid searching and\n      // splicing the directives\n      contentUnlinkFn(true);\n    };\n\n    // finally replace original\n    if (options.replace) {\n      replace(original, el);\n    }\n\n    this._isCompiled = true;\n    this._callHook('compiled');\n  };\n\n  /**\n   * Initialize instance element. Called in the public\n   * $mount() method.\n   *\n   * @param {Element} el\n   */\n\n  Vue.prototype._initElement = function (el) {\n    if (isFragment(el)) {\n      this._isFragment = true;\n      this.$el = this._fragmentStart = el.firstChild;\n      this._fragmentEnd = el.lastChild;\n      // set persisted text anchors to empty\n      if (this._fragmentStart.nodeType === 3) {\n        this._fragmentStart.data = this._fragmentEnd.data = '';\n      }\n      this._fragment = el;\n    } else {\n      this.$el = el;\n    }\n    this.$el.__vue__ = this;\n    this._callHook('beforeCompile');\n  };\n\n  /**\n   * Create and bind a directive to an element.\n   *\n   * @param {Object} descriptor - parsed directive descriptor\n   * @param {Node} node   - target node\n   * @param {Vue} [host] - transclusion host component\n   * @param {Object} [scope] - v-for scope\n   * @param {Fragment} [frag] - owner fragment\n   */\n\n  Vue.prototype._bindDir = function (descriptor, node, host, scope, frag) {\n    this._directives.push(new Directive(descriptor, this, node, host, scope, frag));\n  };\n\n  /**\n   * Teardown an instance, unobserves the data, unbind all the\n   * directives, turn off all the event listeners, etc.\n   *\n   * @param {Boolean} remove - whether to remove the DOM node.\n   * @param {Boolean} deferCleanup - if true, defer cleanup to\n   *                                 be called later\n   */\n\n  Vue.prototype._destroy = function (remove, deferCleanup) {\n    if (this._isBeingDestroyed) {\n      if (!deferCleanup) {\n        this._cleanup();\n      }\n      return;\n    }\n\n    var destroyReady;\n    var pendingRemoval;\n\n    var self = this;\n    // Cleanup should be called either synchronously or asynchronoysly as\n    // callback of this.$remove(), or if remove and deferCleanup are false.\n    // In any case it should be called after all other removing, unbinding and\n    // turning of is done\n    var cleanupIfPossible = function cleanupIfPossible() {\n      if (destroyReady && !pendingRemoval && !deferCleanup) {\n        self._cleanup();\n      }\n    };\n\n    // remove DOM element\n    if (remove && this.$el) {\n      pendingRemoval = true;\n      this.$remove(function () {\n        pendingRemoval = false;\n        cleanupIfPossible();\n      });\n    }\n\n    this._callHook('beforeDestroy');\n    this._isBeingDestroyed = true;\n    var i;\n    // remove self from parent. only necessary\n    // if parent is not being destroyed as well.\n    var parent = this.$parent;\n    if (parent && !parent._isBeingDestroyed) {\n      parent.$children.$remove(this);\n      // unregister ref (remove: true)\n      this._updateRef(true);\n    }\n    // destroy all children.\n    i = this.$children.length;\n    while (i--) {\n      this.$children[i].$destroy();\n    }\n    // teardown props\n    if (this._propsUnlinkFn) {\n      this._propsUnlinkFn();\n    }\n    // teardown all directives. this also tearsdown all\n    // directive-owned watchers.\n    if (this._unlinkFn) {\n      this._unlinkFn();\n    }\n    i = this._watchers.length;\n    while (i--) {\n      this._watchers[i].teardown();\n    }\n    // remove reference to self on $el\n    if (this.$el) {\n      this.$el.__vue__ = null;\n    }\n\n    destroyReady = true;\n    cleanupIfPossible();\n  };\n\n  /**\n   * Clean up to ensure garbage collection.\n   * This is called after the leave transition if there\n   * is any.\n   */\n\n  Vue.prototype._cleanup = function () {\n    if (this._isDestroyed) {\n      return;\n    }\n    // remove self from owner fragment\n    // do it in cleanup so that we can call $destroy with\n    // defer right when a fragment is about to be removed.\n    if (this._frag) {\n      this._frag.children.$remove(this);\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (this._data && this._data.__ob__) {\n      this._data.__ob__.removeVm(this);\n    }\n    // Clean up references to private properties and other\n    // instances. preserve reference to _data so that proxy\n    // accessors still work. The only potential side effect\n    // here is that mutating the instance after it's destroyed\n    // may affect the state of other components that are still\n    // observing the same object, but that seems to be a\n    // reasonable responsibility for the user rather than\n    // always throwing an error on them.\n    this.$el = this.$parent = this.$root = this.$children = this._watchers = this._context = this._scope = this._directives = null;\n    // call the last hook...\n    this._isDestroyed = true;\n    this._callHook('destroyed');\n    // turn off all instance listeners.\n    this.$off();\n  };\n}\n\nfunction miscMixin (Vue) {\n  /**\n   * Apply a list of filter (descriptors) to a value.\n   * Using plain for loops here because this will be called in\n   * the getter of any watcher with filters so it is very\n   * performance sensitive.\n   *\n   * @param {*} value\n   * @param {*} [oldValue]\n   * @param {Array} filters\n   * @param {Boolean} write\n   * @return {*}\n   */\n\n  Vue.prototype._applyFilters = function (value, oldValue, filters, write) {\n    var filter, fn, args, arg, offset, i, l, j, k;\n    for (i = 0, l = filters.length; i < l; i++) {\n      filter = filters[write ? l - i - 1 : i];\n      fn = resolveAsset(this.$options, 'filters', filter.name, true);\n      if (!fn) continue;\n      fn = write ? fn.write : fn.read || fn;\n      if (typeof fn !== 'function') continue;\n      args = write ? [value, oldValue] : [value];\n      offset = write ? 2 : 1;\n      if (filter.args) {\n        for (j = 0, k = filter.args.length; j < k; j++) {\n          arg = filter.args[j];\n          args[j + offset] = arg.dynamic ? this.$get(arg.value) : arg.value;\n        }\n      }\n      value = fn.apply(this, args);\n    }\n    return value;\n  };\n\n  /**\n   * Resolve a component, depending on whether the component\n   * is defined normally or using an async factory function.\n   * Resolves synchronously if already resolved, otherwise\n   * resolves asynchronously and caches the resolved\n   * constructor on the factory.\n   *\n   * @param {String|Function} value\n   * @param {Function} cb\n   */\n\n  Vue.prototype._resolveComponent = function (value, cb) {\n    var factory;\n    if (typeof value === 'function') {\n      factory = value;\n    } else {\n      factory = resolveAsset(this.$options, 'components', value, true);\n    }\n    /* istanbul ignore if */\n    if (!factory) {\n      return;\n    }\n    // async component factory\n    if (!factory.options) {\n      if (factory.resolved) {\n        // cached\n        cb(factory.resolved);\n      } else if (factory.requested) {\n        // pool callbacks\n        factory.pendingCallbacks.push(cb);\n      } else {\n        factory.requested = true;\n        var cbs = factory.pendingCallbacks = [cb];\n        factory.call(this, function resolve(res) {\n          if (isPlainObject(res)) {\n            res = Vue.extend(res);\n          }\n          // cache resolved\n          factory.resolved = res;\n          // invoke callbacks\n          for (var i = 0, l = cbs.length; i < l; i++) {\n            cbs[i](res);\n          }\n        }, function reject(reason) {\n          process.env.NODE_ENV !== 'production' && warn('Failed to resolve async component' + (typeof value === 'string' ? ': ' + value : '') + '. ' + (reason ? '\\nReason: ' + reason : ''));\n        });\n      }\n    } else {\n      // normal component\n      cb(factory);\n    }\n  };\n}\n\nvar filterRE$1 = /[^|]\\|[^|]/;\n\nfunction dataAPI (Vue) {\n  /**\n   * Get the value from an expression on this vm.\n   *\n   * @param {String} exp\n   * @param {Boolean} [asStatement]\n   * @return {*}\n   */\n\n  Vue.prototype.$get = function (exp, asStatement) {\n    var res = parseExpression(exp);\n    if (res) {\n      if (asStatement) {\n        var self = this;\n        return function statementHandler() {\n          self.$arguments = toArray(arguments);\n          var result = res.get.call(self, self);\n          self.$arguments = null;\n          return result;\n        };\n      } else {\n        try {\n          return res.get.call(this, this);\n        } catch (e) {}\n      }\n    }\n  };\n\n  /**\n   * Set the value from an expression on this vm.\n   * The expression must be a valid left-hand\n   * expression in an assignment.\n   *\n   * @param {String} exp\n   * @param {*} val\n   */\n\n  Vue.prototype.$set = function (exp, val) {\n    var res = parseExpression(exp, true);\n    if (res && res.set) {\n      res.set.call(this, this, val);\n    }\n  };\n\n  /**\n   * Delete a property on the VM\n   *\n   * @param {String} key\n   */\n\n  Vue.prototype.$delete = function (key) {\n    del(this._data, key);\n  };\n\n  /**\n   * Watch an expression, trigger callback when its\n   * value changes.\n   *\n   * @param {String|Function} expOrFn\n   * @param {Function} cb\n   * @param {Object} [options]\n   *                 - {Boolean} deep\n   *                 - {Boolean} immediate\n   * @return {Function} - unwatchFn\n   */\n\n  Vue.prototype.$watch = function (expOrFn, cb, options) {\n    var vm = this;\n    var parsed;\n    if (typeof expOrFn === 'string') {\n      parsed = parseDirective(expOrFn);\n      expOrFn = parsed.expression;\n    }\n    var watcher = new Watcher(vm, expOrFn, cb, {\n      deep: options && options.deep,\n      sync: options && options.sync,\n      filters: parsed && parsed.filters,\n      user: !options || options.user !== false\n    });\n    if (options && options.immediate) {\n      cb.call(vm, watcher.value);\n    }\n    return function unwatchFn() {\n      watcher.teardown();\n    };\n  };\n\n  /**\n   * Evaluate a text directive, including filters.\n   *\n   * @param {String} text\n   * @param {Boolean} [asStatement]\n   * @return {String}\n   */\n\n  Vue.prototype.$eval = function (text, asStatement) {\n    // check for filters.\n    if (filterRE$1.test(text)) {\n      var dir = parseDirective(text);\n      // the filter regex check might give false positive\n      // for pipes inside strings, so it's possible that\n      // we don't get any filters here\n      var val = this.$get(dir.expression, asStatement);\n      return dir.filters ? this._applyFilters(val, null, dir.filters) : val;\n    } else {\n      // no filter\n      return this.$get(text, asStatement);\n    }\n  };\n\n  /**\n   * Interpolate a piece of template text.\n   *\n   * @param {String} text\n   * @return {String}\n   */\n\n  Vue.prototype.$interpolate = function (text) {\n    var tokens = parseText(text);\n    var vm = this;\n    if (tokens) {\n      if (tokens.length === 1) {\n        return vm.$eval(tokens[0].value) + '';\n      } else {\n        return tokens.map(function (token) {\n          return token.tag ? vm.$eval(token.value) : token.value;\n        }).join('');\n      }\n    } else {\n      return text;\n    }\n  };\n\n  /**\n   * Log instance data as a plain JS object\n   * so that it is easier to inspect in console.\n   * This method assumes console is available.\n   *\n   * @param {String} [path]\n   */\n\n  Vue.prototype.$log = function (path) {\n    var data = path ? getPath(this._data, path) : this._data;\n    if (data) {\n      data = clean(data);\n    }\n    // include computed fields\n    if (!path) {\n      var key;\n      for (key in this.$options.computed) {\n        data[key] = clean(this[key]);\n      }\n      if (this._props) {\n        for (key in this._props) {\n          data[key] = clean(this[key]);\n        }\n      }\n    }\n    console.log(data);\n  };\n\n  /**\n   * \"clean\" a getter/setter converted object into a plain\n   * object copy.\n   *\n   * @param {Object} - obj\n   * @return {Object}\n   */\n\n  function clean(obj) {\n    return JSON.parse(JSON.stringify(obj));\n  }\n}\n\nfunction domAPI (Vue) {\n  /**\n   * Convenience on-instance nextTick. The callback is\n   * auto-bound to the instance, and this avoids component\n   * modules having to rely on the global Vue.\n   *\n   * @param {Function} fn\n   */\n\n  Vue.prototype.$nextTick = function (fn) {\n    nextTick(fn, this);\n  };\n\n  /**\n   * Append instance to target\n   *\n   * @param {Node} target\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition] - defaults to true\n   */\n\n  Vue.prototype.$appendTo = function (target, cb, withTransition) {\n    return insert(this, target, cb, withTransition, append, appendWithTransition);\n  };\n\n  /**\n   * Prepend instance to target\n   *\n   * @param {Node} target\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition] - defaults to true\n   */\n\n  Vue.prototype.$prependTo = function (target, cb, withTransition) {\n    target = query(target);\n    if (target.hasChildNodes()) {\n      this.$before(target.firstChild, cb, withTransition);\n    } else {\n      this.$appendTo(target, cb, withTransition);\n    }\n    return this;\n  };\n\n  /**\n   * Insert instance before target\n   *\n   * @param {Node} target\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition] - defaults to true\n   */\n\n  Vue.prototype.$before = function (target, cb, withTransition) {\n    return insert(this, target, cb, withTransition, beforeWithCb, beforeWithTransition);\n  };\n\n  /**\n   * Insert instance after target\n   *\n   * @param {Node} target\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition] - defaults to true\n   */\n\n  Vue.prototype.$after = function (target, cb, withTransition) {\n    target = query(target);\n    if (target.nextSibling) {\n      this.$before(target.nextSibling, cb, withTransition);\n    } else {\n      this.$appendTo(target.parentNode, cb, withTransition);\n    }\n    return this;\n  };\n\n  /**\n   * Remove instance from DOM\n   *\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition] - defaults to true\n   */\n\n  Vue.prototype.$remove = function (cb, withTransition) {\n    if (!this.$el.parentNode) {\n      return cb && cb();\n    }\n    var inDocument = this._isAttached && inDoc(this.$el);\n    // if we are not in document, no need to check\n    // for transitions\n    if (!inDocument) withTransition = false;\n    var self = this;\n    var realCb = function realCb() {\n      if (inDocument) self._callHook('detached');\n      if (cb) cb();\n    };\n    if (this._isFragment) {\n      removeNodeRange(this._fragmentStart, this._fragmentEnd, this, this._fragment, realCb);\n    } else {\n      var op = withTransition === false ? removeWithCb : removeWithTransition;\n      op(this.$el, this, realCb);\n    }\n    return this;\n  };\n\n  /**\n   * Shared DOM insertion function.\n   *\n   * @param {Vue} vm\n   * @param {Element} target\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition]\n   * @param {Function} op1 - op for non-transition insert\n   * @param {Function} op2 - op for transition insert\n   * @return vm\n   */\n\n  function insert(vm, target, cb, withTransition, op1, op2) {\n    target = query(target);\n    var targetIsDetached = !inDoc(target);\n    var op = withTransition === false || targetIsDetached ? op1 : op2;\n    var shouldCallHook = !targetIsDetached && !vm._isAttached && !inDoc(vm.$el);\n    if (vm._isFragment) {\n      mapNodeRange(vm._fragmentStart, vm._fragmentEnd, function (node) {\n        op(node, target, vm);\n      });\n      cb && cb();\n    } else {\n      op(vm.$el, target, vm, cb);\n    }\n    if (shouldCallHook) {\n      vm._callHook('attached');\n    }\n    return vm;\n  }\n\n  /**\n   * Check for selectors\n   *\n   * @param {String|Element} el\n   */\n\n  function query(el) {\n    return typeof el === 'string' ? document.querySelector(el) : el;\n  }\n\n  /**\n   * Append operation that takes a callback.\n   *\n   * @param {Node} el\n   * @param {Node} target\n   * @param {Vue} vm - unused\n   * @param {Function} [cb]\n   */\n\n  function append(el, target, vm, cb) {\n    target.appendChild(el);\n    if (cb) cb();\n  }\n\n  /**\n   * InsertBefore operation that takes a callback.\n   *\n   * @param {Node} el\n   * @param {Node} target\n   * @param {Vue} vm - unused\n   * @param {Function} [cb]\n   */\n\n  function beforeWithCb(el, target, vm, cb) {\n    before(el, target);\n    if (cb) cb();\n  }\n\n  /**\n   * Remove operation that takes a callback.\n   *\n   * @param {Node} el\n   * @param {Vue} vm - unused\n   * @param {Function} [cb]\n   */\n\n  function removeWithCb(el, vm, cb) {\n    remove(el);\n    if (cb) cb();\n  }\n}\n\nfunction eventsAPI (Vue) {\n  /**\n   * Listen on the given `event` with `fn`.\n   *\n   * @param {String} event\n   * @param {Function} fn\n   */\n\n  Vue.prototype.$on = function (event, fn) {\n    (this._events[event] || (this._events[event] = [])).push(fn);\n    modifyListenerCount(this, event, 1);\n    return this;\n  };\n\n  /**\n   * Adds an `event` listener that will be invoked a single\n   * time then automatically removed.\n   *\n   * @param {String} event\n   * @param {Function} fn\n   */\n\n  Vue.prototype.$once = function (event, fn) {\n    var self = this;\n    function on() {\n      self.$off(event, on);\n      fn.apply(this, arguments);\n    }\n    on.fn = fn;\n    this.$on(event, on);\n    return this;\n  };\n\n  /**\n   * Remove the given callback for `event` or all\n   * registered callbacks.\n   *\n   * @param {String} event\n   * @param {Function} fn\n   */\n\n  Vue.prototype.$off = function (event, fn) {\n    var cbs;\n    // all\n    if (!arguments.length) {\n      if (this.$parent) {\n        for (event in this._events) {\n          cbs = this._events[event];\n          if (cbs) {\n            modifyListenerCount(this, event, -cbs.length);\n          }\n        }\n      }\n      this._events = {};\n      return this;\n    }\n    // specific event\n    cbs = this._events[event];\n    if (!cbs) {\n      return this;\n    }\n    if (arguments.length === 1) {\n      modifyListenerCount(this, event, -cbs.length);\n      this._events[event] = null;\n      return this;\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        modifyListenerCount(this, event, -1);\n        cbs.splice(i, 1);\n        break;\n      }\n    }\n    return this;\n  };\n\n  /**\n   * Trigger an event on self.\n   *\n   * @param {String|Object} event\n   * @return {Boolean} shouldPropagate\n   */\n\n  Vue.prototype.$emit = function (event) {\n    var isSource = typeof event === 'string';\n    event = isSource ? event : event.name;\n    var cbs = this._events[event];\n    var shouldPropagate = isSource || !cbs;\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      // this is a somewhat hacky solution to the question raised\n      // in #2102: for an inline component listener like <comp @test=\"doThis\">,\n      // the propagation handling is somewhat broken. Therefore we\n      // need to treat these inline callbacks differently.\n      var hasParentCbs = isSource && cbs.some(function (cb) {\n        return cb._fromParent;\n      });\n      if (hasParentCbs) {\n        shouldPropagate = false;\n      }\n      var args = toArray(arguments, 1);\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        var cb = cbs[i];\n        var res = cb.apply(this, args);\n        if (res === true && (!hasParentCbs || cb._fromParent)) {\n          shouldPropagate = true;\n        }\n      }\n    }\n    return shouldPropagate;\n  };\n\n  /**\n   * Recursively broadcast an event to all children instances.\n   *\n   * @param {String|Object} event\n   * @param {...*} additional arguments\n   */\n\n  Vue.prototype.$broadcast = function (event) {\n    var isSource = typeof event === 'string';\n    event = isSource ? event : event.name;\n    // if no child has registered for this event,\n    // then there's no need to broadcast.\n    if (!this._eventsCount[event]) return;\n    var children = this.$children;\n    var args = toArray(arguments);\n    if (isSource) {\n      // use object event to indicate non-source emit\n      // on children\n      args[0] = { name: event, source: this };\n    }\n    for (var i = 0, l = children.length; i < l; i++) {\n      var child = children[i];\n      var shouldPropagate = child.$emit.apply(child, args);\n      if (shouldPropagate) {\n        child.$broadcast.apply(child, args);\n      }\n    }\n    return this;\n  };\n\n  /**\n   * Recursively propagate an event up the parent chain.\n   *\n   * @param {String} event\n   * @param {...*} additional arguments\n   */\n\n  Vue.prototype.$dispatch = function (event) {\n    var shouldPropagate = this.$emit.apply(this, arguments);\n    if (!shouldPropagate) return;\n    var parent = this.$parent;\n    var args = toArray(arguments);\n    // use object event to indicate non-source emit\n    // on parents\n    args[0] = { name: event, source: this };\n    while (parent) {\n      shouldPropagate = parent.$emit.apply(parent, args);\n      parent = shouldPropagate ? parent.$parent : null;\n    }\n    return this;\n  };\n\n  /**\n   * Modify the listener counts on all parents.\n   * This bookkeeping allows $broadcast to return early when\n   * no child has listened to a certain event.\n   *\n   * @param {Vue} vm\n   * @param {String} event\n   * @param {Number} count\n   */\n\n  var hookRE = /^hook:/;\n  function modifyListenerCount(vm, event, count) {\n    var parent = vm.$parent;\n    // hooks do not get broadcasted so no need\n    // to do bookkeeping for them\n    if (!parent || !count || hookRE.test(event)) return;\n    while (parent) {\n      parent._eventsCount[event] = (parent._eventsCount[event] || 0) + count;\n      parent = parent.$parent;\n    }\n  }\n}\n\nfunction lifecycleAPI (Vue) {\n  /**\n   * Set instance target element and kick off the compilation\n   * process. The passed in `el` can be a selector string, an\n   * existing Element, or a DocumentFragment (for block\n   * instances).\n   *\n   * @param {Element|DocumentFragment|string} el\n   * @public\n   */\n\n  Vue.prototype.$mount = function (el) {\n    if (this._isCompiled) {\n      process.env.NODE_ENV !== 'production' && warn('$mount() should be called only once.', this);\n      return;\n    }\n    el = query(el);\n    if (!el) {\n      el = document.createElement('div');\n    }\n    this._compile(el);\n    this._initDOMHooks();\n    if (inDoc(this.$el)) {\n      this._callHook('attached');\n      ready.call(this);\n    } else {\n      this.$once('hook:attached', ready);\n    }\n    return this;\n  };\n\n  /**\n   * Mark an instance as ready.\n   */\n\n  function ready() {\n    this._isAttached = true;\n    this._isReady = true;\n    this._callHook('ready');\n  }\n\n  /**\n   * Teardown the instance, simply delegate to the internal\n   * _destroy.\n   *\n   * @param {Boolean} remove\n   * @param {Boolean} deferCleanup\n   */\n\n  Vue.prototype.$destroy = function (remove, deferCleanup) {\n    this._destroy(remove, deferCleanup);\n  };\n\n  /**\n   * Partially compile a piece of DOM and return a\n   * decompile function.\n   *\n   * @param {Element|DocumentFragment} el\n   * @param {Vue} [host]\n   * @param {Object} [scope]\n   * @param {Fragment} [frag]\n   * @return {Function}\n   */\n\n  Vue.prototype.$compile = function (el, host, scope, frag) {\n    return compile(el, this.$options, true)(this, el, host, scope, frag);\n  };\n}\n\n/**\n * The exposed Vue constructor.\n *\n * API conventions:\n * - public API methods/properties are prefixed with `$`\n * - internal methods/properties are prefixed with `_`\n * - non-prefixed properties are assumed to be proxied user\n *   data.\n *\n * @constructor\n * @param {Object} [options]\n * @public\n */\n\nfunction Vue(options) {\n  this._init(options);\n}\n\n// install internals\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nmiscMixin(Vue);\n\n// install instance APIs\ndataAPI(Vue);\ndomAPI(Vue);\neventsAPI(Vue);\nlifecycleAPI(Vue);\n\nvar slot = {\n\n  priority: SLOT,\n  params: ['name'],\n\n  bind: function bind() {\n    // this was resolved during component transclusion\n    var name = this.params.name || 'default';\n    var content = this.vm._slotContents && this.vm._slotContents[name];\n    if (!content || !content.hasChildNodes()) {\n      this.fallback();\n    } else {\n      this.compile(content.cloneNode(true), this.vm._context, this.vm);\n    }\n  },\n\n  compile: function compile(content, context, host) {\n    if (content && context) {\n      if (this.el.hasChildNodes() && content.childNodes.length === 1 && content.childNodes[0].nodeType === 1 && content.childNodes[0].hasAttribute('v-if')) {\n        // if the inserted slot has v-if\n        // inject fallback content as the v-else\n        var elseBlock = document.createElement('template');\n        elseBlock.setAttribute('v-else', '');\n        elseBlock.innerHTML = this.el.innerHTML;\n        // the else block should be compiled in child scope\n        elseBlock._context = this.vm;\n        content.appendChild(elseBlock);\n      }\n      var scope = host ? host._scope : this._scope;\n      this.unlink = context.$compile(content, host, scope, this._frag);\n    }\n    if (content) {\n      replace(this.el, content);\n    } else {\n      remove(this.el);\n    }\n  },\n\n  fallback: function fallback() {\n    this.compile(extractContent(this.el, true), this.vm);\n  },\n\n  unbind: function unbind() {\n    if (this.unlink) {\n      this.unlink();\n    }\n  }\n};\n\nvar partial = {\n\n  priority: PARTIAL,\n\n  params: ['name'],\n\n  // watch changes to name for dynamic partials\n  paramWatchers: {\n    name: function name(value) {\n      vIf.remove.call(this);\n      if (value) {\n        this.insert(value);\n      }\n    }\n  },\n\n  bind: function bind() {\n    this.anchor = createAnchor('v-partial');\n    replace(this.el, this.anchor);\n    this.insert(this.params.name);\n  },\n\n  insert: function insert(id) {\n    var partial = resolveAsset(this.vm.$options, 'partials', id, true);\n    if (partial) {\n      this.factory = new FragmentFactory(this.vm, partial);\n      vIf.insert.call(this);\n    }\n  },\n\n  unbind: function unbind() {\n    if (this.frag) {\n      this.frag.destroy();\n    }\n  }\n};\n\nvar elementDirectives = {\n  slot: slot,\n  partial: partial\n};\n\nvar convertArray = vFor._postProcess;\n\n/**\n * Limit filter for arrays\n *\n * @param {Number} n\n * @param {Number} offset (Decimal expected)\n */\n\nfunction limitBy(arr, n, offset) {\n  offset = offset ? parseInt(offset, 10) : 0;\n  n = toNumber(n);\n  return typeof n === 'number' ? arr.slice(offset, offset + n) : arr;\n}\n\n/**\n * Filter filter for arrays\n *\n * @param {String} search\n * @param {String} [delimiter]\n * @param {String} ...dataKeys\n */\n\nfunction filterBy(arr, search, delimiter) {\n  arr = convertArray(arr);\n  if (search == null) {\n    return arr;\n  }\n  if (typeof search === 'function') {\n    return arr.filter(search);\n  }\n  // cast to lowercase string\n  search = ('' + search).toLowerCase();\n  // allow optional `in` delimiter\n  // because why not\n  var n = delimiter === 'in' ? 3 : 2;\n  // extract and flatten keys\n  var keys = Array.prototype.concat.apply([], toArray(arguments, n));\n  var res = [];\n  var item, key, val, j;\n  for (var i = 0, l = arr.length; i < l; i++) {\n    item = arr[i];\n    val = item && item.$value || item;\n    j = keys.length;\n    if (j) {\n      while (j--) {\n        key = keys[j];\n        if (key === '$key' && contains(item.$key, search) || contains(getPath(val, key), search)) {\n          res.push(item);\n          break;\n        }\n      }\n    } else if (contains(item, search)) {\n      res.push(item);\n    }\n  }\n  return res;\n}\n\n/**\n * Filter filter for arrays\n *\n * @param {String|Array<String>|Function} ...sortKeys\n * @param {Number} [order]\n */\n\nfunction orderBy(arr) {\n  var comparator = null;\n  var sortKeys = undefined;\n  arr = convertArray(arr);\n\n  // determine order (last argument)\n  var args = toArray(arguments, 1);\n  var order = args[args.length - 1];\n  if (typeof order === 'number') {\n    order = order < 0 ? -1 : 1;\n    args = args.length > 1 ? args.slice(0, -1) : args;\n  } else {\n    order = 1;\n  }\n\n  // determine sortKeys & comparator\n  var firstArg = args[0];\n  if (!firstArg) {\n    return arr;\n  } else if (typeof firstArg === 'function') {\n    // custom comparator\n    comparator = function (a, b) {\n      return firstArg(a, b) * order;\n    };\n  } else {\n    // string keys. flatten first\n    sortKeys = Array.prototype.concat.apply([], args);\n    comparator = function (a, b, i) {\n      i = i || 0;\n      return i >= sortKeys.length - 1 ? baseCompare(a, b, i) : baseCompare(a, b, i) || comparator(a, b, i + 1);\n    };\n  }\n\n  function baseCompare(a, b, sortKeyIndex) {\n    var sortKey = sortKeys[sortKeyIndex];\n    if (sortKey) {\n      if (sortKey !== '$key') {\n        if (isObject(a) && '$value' in a) a = a.$value;\n        if (isObject(b) && '$value' in b) b = b.$value;\n      }\n      a = isObject(a) ? getPath(a, sortKey) : a;\n      b = isObject(b) ? getPath(b, sortKey) : b;\n    }\n    return a === b ? 0 : a > b ? order : -order;\n  }\n\n  // sort on a copy to avoid mutating original array\n  return arr.slice().sort(comparator);\n}\n\n/**\n * String contain helper\n *\n * @param {*} val\n * @param {String} search\n */\n\nfunction contains(val, search) {\n  var i;\n  if (isPlainObject(val)) {\n    var keys = Object.keys(val);\n    i = keys.length;\n    while (i--) {\n      if (contains(val[keys[i]], search)) {\n        return true;\n      }\n    }\n  } else if (isArray(val)) {\n    i = val.length;\n    while (i--) {\n      if (contains(val[i], search)) {\n        return true;\n      }\n    }\n  } else if (val != null) {\n    return val.toString().toLowerCase().indexOf(search) > -1;\n  }\n}\n\nvar digitsRE = /(\\d{3})(?=\\d)/g;\n\n// asset collections must be a plain object.\nvar filters = {\n\n  orderBy: orderBy,\n  filterBy: filterBy,\n  limitBy: limitBy,\n\n  /**\n   * Stringify value.\n   *\n   * @param {Number} indent\n   */\n\n  json: {\n    read: function read(value, indent) {\n      return typeof value === 'string' ? value : JSON.stringify(value, null, arguments.length > 1 ? indent : 2);\n    },\n    write: function write(value) {\n      try {\n        return JSON.parse(value);\n      } catch (e) {\n        return value;\n      }\n    }\n  },\n\n  /**\n   * 'abc' => 'Abc'\n   */\n\n  capitalize: function capitalize(value) {\n    if (!value && value !== 0) return '';\n    value = value.toString();\n    return value.charAt(0).toUpperCase() + value.slice(1);\n  },\n\n  /**\n   * 'abc' => 'ABC'\n   */\n\n  uppercase: function uppercase(value) {\n    return value || value === 0 ? value.toString().toUpperCase() : '';\n  },\n\n  /**\n   * 'AbC' => 'abc'\n   */\n\n  lowercase: function lowercase(value) {\n    return value || value === 0 ? value.toString().toLowerCase() : '';\n  },\n\n  /**\n   * 12345 => $12,345.00\n   *\n   * @param {String} sign\n   * @param {Number} decimals Decimal places\n   */\n\n  currency: function currency(value, _currency, decimals) {\n    value = parseFloat(value);\n    if (!isFinite(value) || !value && value !== 0) return '';\n    _currency = _currency != null ? _currency : '$';\n    decimals = decimals != null ? decimals : 2;\n    var stringified = Math.abs(value).toFixed(decimals);\n    var _int = decimals ? stringified.slice(0, -1 - decimals) : stringified;\n    var i = _int.length % 3;\n    var head = i > 0 ? _int.slice(0, i) + (_int.length > 3 ? ',' : '') : '';\n    var _float = decimals ? stringified.slice(-1 - decimals) : '';\n    var sign = value < 0 ? '-' : '';\n    return sign + _currency + head + _int.slice(i).replace(digitsRE, '$1,') + _float;\n  },\n\n  /**\n   * 'item' => 'items'\n   *\n   * @params\n   *  an array of strings corresponding to\n   *  the single, double, triple ... forms of the word to\n   *  be pluralized. When the number to be pluralized\n   *  exceeds the length of the args, it will use the last\n   *  entry in the array.\n   *\n   *  e.g. ['single', 'double', 'triple', 'multiple']\n   */\n\n  pluralize: function pluralize(value) {\n    var args = toArray(arguments, 1);\n    var length = args.length;\n    if (length > 1) {\n      var index = value % 10 - 1;\n      return index in args ? args[index] : args[length - 1];\n    } else {\n      return args[0] + (value === 1 ? '' : 's');\n    }\n  },\n\n  /**\n   * Debounce a handler function.\n   *\n   * @param {Function} handler\n   * @param {Number} delay = 300\n   * @return {Function}\n   */\n\n  debounce: function debounce(handler, delay) {\n    if (!handler) return;\n    if (!delay) {\n      delay = 300;\n    }\n    return _debounce(handler, delay);\n  }\n};\n\nfunction installGlobalAPI (Vue) {\n  /**\n   * Vue and every constructor that extends Vue has an\n   * associated options object, which can be accessed during\n   * compilation steps as `this.constructor.options`.\n   *\n   * These can be seen as the default options of every\n   * Vue instance.\n   */\n\n  Vue.options = {\n    directives: directives,\n    elementDirectives: elementDirectives,\n    filters: filters,\n    transitions: {},\n    components: {},\n    partials: {},\n    replace: true\n  };\n\n  /**\n   * Expose useful internals\n   */\n\n  Vue.util = util;\n  Vue.config = config;\n  Vue.set = set;\n  Vue['delete'] = del;\n  Vue.nextTick = nextTick;\n\n  /**\n   * The following are exposed for advanced usage / plugins\n   */\n\n  Vue.compiler = compiler;\n  Vue.FragmentFactory = FragmentFactory;\n  Vue.internalDirectives = internalDirectives;\n  Vue.parsers = {\n    path: path,\n    text: text,\n    template: template,\n    directive: directive,\n    expression: expression\n  };\n\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   *\n   * @param {Object} extendOptions\n   */\n\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var isFirstExtend = Super.cid === 0;\n    if (isFirstExtend && extendOptions._Ctor) {\n      return extendOptions._Ctor;\n    }\n    var name = extendOptions.name || Super.options.name;\n    if (process.env.NODE_ENV !== 'production') {\n      if (!/^[a-zA-Z][\\w-]*$/.test(name)) {\n        warn('Invalid component name: \"' + name + '\". Component names ' + 'can only contain alphanumeric characaters and the hyphen.');\n        name = null;\n      }\n    }\n    var Sub = createClass(name || 'VueComponent');\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(Super.options, extendOptions);\n    Sub['super'] = Super;\n    // allow further extension\n    Sub.extend = Super.extend;\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    config._assetTypes.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n    // cache constructor\n    if (isFirstExtend) {\n      extendOptions._Ctor = Sub;\n    }\n    return Sub;\n  };\n\n  /**\n   * A function that returns a sub-class constructor with the\n   * given name. This gives us much nicer output when\n   * logging instances in the console.\n   *\n   * @param {String} name\n   * @return {Function}\n   */\n\n  function createClass(name) {\n    /* eslint-disable no-new-func */\n    return new Function('return function ' + classify(name) + ' (options) { this._init(options) }')();\n    /* eslint-enable no-new-func */\n  }\n\n  /**\n   * Plugin system\n   *\n   * @param {Object} plugin\n   */\n\n  Vue.use = function (plugin) {\n    /* istanbul ignore if */\n    if (plugin.installed) {\n      return;\n    }\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else {\n      plugin.apply(null, args);\n    }\n    plugin.installed = true;\n    return this;\n  };\n\n  /**\n   * Apply a global mixin by merging it into the default\n   * options.\n   */\n\n  Vue.mixin = function (mixin) {\n    Vue.options = mergeOptions(Vue.options, mixin);\n  };\n\n  /**\n   * Create asset registration methods with the following\n   * signature:\n   *\n   * @param {String} id\n   * @param {*} definition\n   */\n\n  config._assetTypes.forEach(function (type) {\n    Vue[type] = function (id, definition) {\n      if (!definition) {\n        return this.options[type + 's'][id];\n      } else {\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV !== 'production') {\n          if (type === 'component' && (commonTagRE.test(id) || reservedTagRE.test(id))) {\n            warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + id);\n          }\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          if (!definition.name) {\n            definition.name = id;\n          }\n          definition = Vue.extend(definition);\n        }\n        this.options[type + 's'][id] = definition;\n        return definition;\n      }\n    };\n  });\n\n  // expose internal transition API\n  extend(Vue.transition, transition);\n}\n\ninstallGlobalAPI(Vue);\n\nVue.version = '1.0.26';\n\n// devtools global hook\n/* istanbul ignore next */\nsetTimeout(function () {\n  if (config.devtools) {\n    if (devtools) {\n      devtools.emit('init', Vue);\n    } else if (process.env.NODE_ENV !== 'production' && inBrowser && /Chrome\\/\\d+/.test(window.navigator.userAgent)) {\n      console.log('Download the Vue Devtools for a better development experience:\\n' + 'https://github.com/vuejs/vue-devtools');\n    }\n  }\n}, 0);\n\nmodule.exports = Vue;\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"_process\":3}],6:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = {\n    data: function data() {\n        return {\n            /**\n             * original list of email addresses that are shown on screen\n             */\n            display_input: [],\n\n            /**\n             * filtered list of email addresses that are shown on screen\n             */\n            display_output: []\n        };\n    },\n\n\n    props: {\n\n        /**\n         * original list of email addresses that are not shown on screen\n         */\n        input: null,\n\n        /**\n         * filtered list of email addresses that are not show on screen\n         */\n        output: null\n    },\n\n    computed: {\n\n        /**\n         *  are there more results to load\n         */\n        moreToLoad: function moreToLoad() {\n\n            return Boolean(this.input.length || this.output.length);\n        }\n    },\n\n    ready: function ready() {\n\n        this.input = JSON.parse(this.input);\n        this.output = JSON.parse(this.output);\n\n        // only load 20 results onto screen at once\n        this.loadMoreResults(20);\n    },\n\n\n    methods: {\n\n        /**\n         * move email addresses from input/output array to display_input/display_output array\n         *\n         * @param count\n         */\n        loadMoreResults: function loadMoreResults(count) {\n            this.load(this.input, this.display_input, count);\n            this.load(this.output, this.display_output, count);\n        },\n\n        /**\n         * load email addresses from the list onto the display\n         *\n         * @param list\n         * @param display\n         * @param count\n         */\n        load: function load(list, display, count) {\n\n            for (var i = 0; i < count; i++) {\n                if (list.length == 0) {\n                    break;\n                }\n\n                display.push(list.shift());\n            }\n        }\n    }\n\n};\nif (module.exports.__esModule) module.exports = module.exports.default\nif (module.hot) {(function () {  module.hot.accept()\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), true)\n  if (!hotAPI.compatible) return\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"_v-13d2683a\", module.exports)\n  } else {\n    hotAPI.update(\"_v-13d2683a\", module.exports, (typeof module.exports === \"function\" ? module.exports.options : module.exports).template)\n  }\n})()}\n},{\"vue\":5,\"vue-hot-reload-api\":4}],7:[function(require,module,exports){\n'use strict';\n\nvar _Results = require('./components/Results.vue');\n\nvar _Results2 = _interopRequireDefault(_Results);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// browserify entry point\nvar Vue = require('../../../bower_components/vue/dist/vue.min.js');\nVue.use(require('../../../bower_components/vue-resource/dist/vue-resource.min.js'));\n\nnew Vue({\n    el: '#app',\n\n    components: { Results: _Results2.default },\n\n    ready: function ready() {\n        console.log('ready to go!');\n    }\n});\n\n},{\"../../../bower_components/vue-resource/dist/vue-resource.min.js\":1,\"../../../bower_components/vue/dist/vue.min.js\":2,\"./components/Results.vue\":6}]},{},[7]);\n"],"file":"main.js","sourceRoot":"/source/"}